use localdb
use config
use os

# mix db files with "real" files
class DBLister
	string[] paths
	LocalFile[] fake_files
	
	bool is_ignored(string path)
		for i in conf.ignore
			if path.match(i)
				return true
		return false

	void find_paths(string _dir, bool recursive)
		string dir = dir_canonical(_dir)
		let list = Filesystem.search(dir, "*", true)
		for e in list
			if e.is_dir
				if e.name.head(1) != "." and recursive
					find_paths(dir + e.name, recursive)
			else
				string path = (dir + e.name)
				if !is_ignored(path)
					paths.add(path)
	
	LocalFile*[] find(string dir)
		if Filesystem.is_directory(dir)
			return find_dir(dir)
		return find_file(dir)
		
		
	LocalFile*[] find_file(string path)
		LocalFile*[] files
		fake_files.clear()
		paths.clear()
		
		try
			# in DB?
			return [db.find_by_path(path)]
		except
			if Filesystem.exists(path)
				LocalFile ff
				ff.path = path
				fake_files.add(ff)
				return [&fake_files[0]]
			else
				print("ERROR: can't find '{{path}}'")
		return files
		
	LocalFile*[] find_dir(string dir)
		LocalFile*[] files
		fake_files.clear()
		paths.clear()

		files = db.get_in_dir(dir, conf.recursive)
		
		find_paths(dir, conf.recursive)
		for p in paths
			try
				db.find_by_path(p)
			except
				LocalFile f
				f.path = p
				fake_files.add(f)
		for f in fake_files
			files.add(&f)
		return sorted(files, "path")

DBLister lister




bool is_filter(string s)
	return s.find("=", 0) > 0

LocalFile*[] find_by_path_or_filter(string arg)
	if is_filter(arg)
		return db.find_by_tags(arg)
	else
		return lister.find(absolute_path(arg))

use hui

struct Stroke
	var p: vec2[]
	
	func length() -> float
		var l = 0.0
		for i in 1:len(p)
			l += len(p[i-1] - p[i])
		return l
	
	func digest() -> Stroke
		var s = self
		var l0 = self.length()
		
		while true
			var lbest = l0 * 0.998
			var ibest = -1
			for i in 1:len(s.p)-1
				var t = s
				t.p.remove(i)
				let l = t.length()
				if l > lbest
					lbest = l
					ibest = i
			if ibest >= 0
				s.p.remove(ibest)
			else
				break
			
			
		return s

class Sketcher extends hui.Window
	var strokes: Stroke[]
	var cur: Stroke
	var w, h: int
	func __init__()
		super.__init__("Sketcher", 800, 600)
		from_source("
Grid ? '' vertical
	DrawingArea area '' expandx expandy grabfocus
	Grid ? ''
		Edit out '' expandx
		Button copy '' image=hui:copy
		Button clear '' image=hui:delete")
		
		event("copy", on_copy)
		event("clear", on_clear)
		
	func override mut on_left_button_down(m: vec2)
		cur.p.add(m)
		redraw("area")

	func override mut on_left_button_up(m: vec2)
		if len(cur.p) > 1
			strokes.add(cur.digest())
			update_output()
		cur.p.clear()
		redraw("area")

	func override mut on_mouse_move(m: vec2)
		if len(cur.p) > 0
			cur.p.add(m)
			redraw("area")

	func override mut on_key_down(key: int)
		if key == hui.KEY_CONTROL + hui.KEY_Z
			if len(strokes) > 0
				#strokes = strokes[:len(strokes)-1]
				strokes.resize(len(strokes)-1)
			redraw("area")

	func override mut on_draw(p: hui.Painter)
		w = p.width
		h = p.height
		p.set_color(color.WHITE)
		p.draw_rect(rect(0, w, 0, h))
		
		p.set_color(color.BLACK)
		draw_stroke(p, cur)
		for s in strokes
			draw_stroke(p, s)
		
		p.draw_str([10,10], "{{len(to_text())}} b")

	func draw_stroke(p: hui.Painter, s: Stroke)
		for i in 1:len(s.p)
			p.draw_line(s.p[i-1], s.p[i])
	
	func to_text() -> string
		var o = "{{w}} {{h}}"
		for s in strokes
			o += " [" + [for p in s.p "{{int(p.x)}} {{int(p.y)}}"].join(" ") + "]"
		return o

	func mut update_output()
		set_string("out", to_text())
	
	func on_copy()
		hui.clipboard.copy(to_text())
	
	func mut on_clear()
		strokes.clear()
		update_output()
		redraw("area")

func main()
	hui.fly_and_wait(new Sketcher())


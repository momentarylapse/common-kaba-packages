use os
const CHAR_NL = 0x0a
const CHAR_TAB = 0x09

var verbose: bool

func isWhitespace(c: char) -> bool
	return (c == ' ') or (c == CHAR_TAB) or (c == CHAR_NL)

func isNumber(c: char) -> bool
	return (c >= '0') and (c <= '9')

func isOperator(c: char) -> bool
	return (c == '(') or (c == ')') or (c == '=') or (c == '+') or (c == '-') or (c == '*') or (c == '/') or (c == '%') or (c == '.') or (c == ',') or (c == '[') or (c == ']') or (c == '{') or (c == '}') or (c == '!') or (c == '<') or (c == '>') or (c == ':')


func unescape(s: string) -> string
	var r: string
	for j in 1:len(s)-1
		if s[j] == '\\' and j < len(s) + 1
			j ++
			if s[j] == 'n'
				r.add(CHAR_NL)
			if s[j] == 't'
				r.add(CHAR_TAB)
			if s[j] == '\\'
				r.add('\\')
		else
			r.add(s[j])
	return r

class Line
	var indent: int
	var physical_line_no: int
	var words: string[]
	func const show()
		print(indent)
		print(words)

class Lines
	var lines: Line[]
	func const show()
		for l in lines
			l.show()

class LiteralParser
	func const getWord(source: string, i0: int) -> string
		var r: string
		for j in i0:len(source)
			if isWhitespace(source[j])
				break
			if isOperator(source[j])
				break
			r.add(source[j])
		return r

	func const getNumber(source: string, i0: int) -> string
		var r: string
		for j in i0:len(source)
			if !isNumber(source[j]) and (source[j] != '.')
				break
			r.add(source[j])
		return r
		
	func const getString(source: string, i0: int) -> string
		var r: string
		r.add(source[i0])
		for j in i0+1:len(source)
			if source[j] == '\\' and j < len(source) + 1
				r.add(source[j])
				r.add(source[j+1])
				j ++
			else
				r.add(source[j])
				if source[j] == '"' or source[j] == '\''
					break
		return r

	func const getOperator(source: string, i0: int) -> string
		var r: string
		r.add(source[i0])
		if len(source) > i0 + 1
			if source[i0 + 1] == '='
				if source[i0] == '=' or source[i0] == '+' or source[i0] == '-' or source[i0] == '*' or source[i0] == '/' or source[i0] == '<' or source[i0] == '>'
					r.add(source[i0 + 1])
		return r
	
	func parseLine(source: string) -> Line
		var l: Line
		l.indent = 0
		for i in 0:len(source)
			l.indent = i
			if source[i] != CHAR_TAB
				break
		var temp: string
		for i in l.indent:len(source)
			if isWhitespace(source[i])
				continue
			if source[i] == '"' or source[i] == 0x27 # " or '
				temp = getString(source, i)
			else if isNumber(source[i])
				temp = getNumber(source, i)
			else if isOperator(source[i])
				temp = getOperator(source, i)
			else
				temp = getWord(source, i)
			l.words.add(temp)
			i += len(temp)-1
		return l

	func parse(source: string) -> Lines
		var r: Lines
		var lines = source.explode("\n")
		var line_no = 0
		for l in lines
			var ll = parseLine(l)
			if len(ll.words) > 0
				ll.physical_line_no = line_no
				r.lines.add(ll)
			line_no ++
		return r

enum TType
	NONE
	BOOL
	INT
	FLOAT
	STRING
	ARRAY
	DICT
	FUNCTION
	OBJECT

class DynamicValue
	var type = TType.NONE
	var s: DynamicValueState*
	func __init__()
		s = new DynamicValueState()
	func virtual __delete__()
		del s
	func __str__() -> string
		return str(s)
	func render() -> string
		return s.render()
	func __int__() -> int
		return int(s)
	func __float__() -> float
		return float(s)
	func __bool__() -> bool
		return bool(s)
	func selfref mut get_element(i: DynamicValue) -> DynamicValue*
		return s.get_element(i)
	func mut add(el: DynamicValue)
		s.add(el)
	func copy() -> DynamicValue*
		var c = new DynamicValue()
		del c.s
		c.s = s.copy()
		c.type = type
		return c
	func mut setType(_type: TType)
		if type != _type
			#clear()
			del s
			type = _type
			if type == TType.BOOL
				s = new DynamicValueStateBool()
			else if type == TType.INT
				s = new DynamicValueStateInt()
			else if type == TType.FLOAT
				s = new DynamicValueStateFloat()
			else if type == TType.STRING
				s = new DynamicValueStateString()
			else if type == TType.ARRAY
				s = new DynamicValueStateArray()
			else if type == TType.DICT
				s = new DynamicValueStateDict()
			else if type == TType.FUNCTION
				s = new DynamicValueStateFunction()
			else
				s = new DynamicValueState()
	func mut setBool(b: bool)
		setType(TType.BOOL)
		var sb: DynamicValueStateBool* = s
		sb.v = b
	func mut setInt(i: int)
		setType(TType.INT)
		var si: DynamicValueStateInt* = s
		si.v = i
	func mut setFloat(f: float)
		setType(TType.FLOAT)
		var sf: DynamicValueStateFloat* = s
		sf.v = f
	func mut setString(_s: string)
		setType(TType.STRING)
		var ss: DynamicValueStateString* = s
		ss.v = _s
	func mut setFunction(f: Function)
		setType(TType.FUNCTION)
		var sf: DynamicValueStateFunction* = s
		sf._func = &f
	func __assign__(b: DynamicValue)
		if b.type == TType.BOOL
			setBool(bool(b))
		else if b.type == TType.INT
			setInt(int(b))
		else if b.type == TType.FLOAT
			setFloat(float(b))
		else if b.type == TType.STRING
			setString(str(b))
		else if b.type == TType.ARRAY
			setType(TType.ARRAY)
			var ba: DynamicValueStateArray* = b.s
			for el in ba.a
				s.add(el)
		else if b.type == TType.DICT
			setType(TType.DICT)
			var bd: DynamicValueStateDict* = b.s
			var ad: DynamicValueStateDict* = s
			for el,i in bd.values
				ad.add(bd.keys[i], el)
		else if b.type == TType.FUNCTION
			var bf: DynamicValueStateFunction* = b.s
			setFunction(bf._func)

	func mut __iadd__(b: DynamicValue)
		if b.type == TType.INT
			if type == TType.INT
				setInt(int(s) + int(b))
			else if type == TType.FLOAT
				setInt(int(s) + float(b))
		else if b.type == TType.FLOAT
			if type == TType.INT
				setFloat(float(s) + int(b))
			else if type == TType.FLOAT
				setFloat(float(s) + float(b))
		else if b.type == TType.STRING
			if type == TType.STRING
				setString(str(s) + str(b))
		else if b.type == TType.ARRAY
			if type == TType.ARRAY
				var ba: DynamicValueStateArray* = b.s
				for el in ba.a
					s.add(el)
		else if b.type == TType.DICT
			if type == TType.DICT
				var bd: DynamicValueStateDict* = b.s
				var ad: DynamicValueStateDict* = s
				for el,i in bd.values
					ad.add(bd.keys[i], el)

	func mut __isub__(b: DynamicValue)
		if b.type == TType.INT
			if type == TType.INT
				setInt(int(s) - int(b))
			else if type == TType.FLOAT
				setInt(int(s) - float(b))
		else if b.type == TType.FLOAT
			if type == TType.INT
				setFloat(float(s) - float(b))
			else if type == TType.FLOAT
				setFloat(float(s) - float(b))

	func mut __imul__(b: DynamicValue)
		if b.type == TType.INT
			if type == TType.INT
				setInt(int(s) * int(b))
			else if type == TType.FLOAT
				setFloat(float(s) * int(b))
		else if b.type == TType.FLOAT
			if type == TType.INT
				setFloat(int(s) * float(b))
			else if type == TType.FLOAT
				setFloat(float(s) * float(b))

	func mut __idiv__(b: DynamicValue)
		if b.type == TType.INT
			if type == TType.INT
				setInt(int(s) / int(b))
			else if type == TType.FLOAT
				setFloat(float(s) / int(b))
		else if b.type == TType.FLOAT
			if type == TType.INT
				setFloat(int(s) / float(b))
			else if type == TType.FLOAT
				setFloat(float(s) / float(b))

	func compare(b: DynamicValue) -> int
		if b.type == TType.INT
			if type == TType.INT
				return int(s) - int(b)
			else if type == TType.FLOAT
				return (float(s) - float(b)) * 1000.0
		else if b.type == TType.FLOAT
			if type == TType.INT
				return (float(s) - float(b)) * 1000.0
			else if type == TType.FLOAT
				return (float(s) - float(b)) * 1000.0
		else if b.type == TType.STRING
			if type == TType.STRING
				if str(s) < str(b)
					return -1
				if str(s) > str(b)
					return 1
				return 0
				#return ai.v.compare(bf.v)
		return -1


class DynamicValueState
	func virtual __delete__()
	func virtual type() -> string
		return "???"
	func virtual __str__() -> string
		return "nil"
	func virtual render() -> string
		return str(self)
	func virtual __int__() -> int
		return 0
	func virtual __float__() -> float
		return 0.0
	func virtual __bool__() -> bool
		return false
	func virtual selfref mut get_element(i: DynamicValue) -> DynamicValue*
		return nil
	func virtual mut add(el: DynamicValue)
	func virtual copy() -> DynamicValueState*
		

class DynamicValueStateInt extends DynamicValueState
	var v = 0
	func override type() -> string
		return "int"
	func override __str__() -> string
		return str(v)
	func override __int__() -> int
		return v
	func override __float__() -> float
		return v
	func override copy() -> DynamicValueState*
		var c = new DynamicValueStateInt()
		c.v = v
		return c

class DynamicValueStateBool extends DynamicValueState
	var v = false
	func override type() -> string
		return "bool"
	func override __str__() -> string
		return str(v)
	func override __bool__() -> bool
		return v
	func override copy() -> DynamicValueState*
		var c = new DynamicValueStateBool()
		c.v = v
		return c

class DynamicValueStateFloat extends DynamicValueState
	var v = 0.
	func override type() -> string
		return "float"
	func override __str__() -> string
		return str(v)
	func override __int__() -> int
		return v
	func override __float__() -> float
		return v
	func override copy() -> DynamicValueState*
		var c = new DynamicValueStateFloat()
		c.v = v
		return c

class DynamicValueStateString extends DynamicValueState
	var v: string
	func override type() -> string
		return "str"
	func override __str__() -> string
		return v
	func override render() -> string
		return "'{{v}}'"
	func override __int__() -> int
		return int(v)
	func override __float__() -> float
		return float(v)
	func override __bool__() -> bool
		return len(v) > 0
	func override copy() -> DynamicValueState*
		var c = new DynamicValueStateString()
		c.v = v
		return c

class DynamicValueStateArray extends DynamicValueState
	var a: DynamicValue*[]
	func override __delete__()
		for e in a
			del e
	func override type() -> string
		return "array"
	func override __str__() -> string
		var s = "["
		for e,i in a
			if i > 0
				s += ","
			s += e.render()
		return s + "]"
	func override __bool__() -> bool
		return len(a) > 0
	func override get_element(i: DynamicValue) -> DynamicValue*
		if i.type != TType.INT
			return nil
		var ii: DynamicValueStateInt* = i.s
		if ii.v < 0 or ii.v >= len(a)
			return nil
		return a[ii.v]
	func override mut add(el: DynamicValue)
		a.add(el.copy())
	func override copy() -> DynamicValueState*
		var c = new DynamicValueStateArray()
		for el in a
			c.add(el.copy())
		return c

class DynamicValueStateDict extends DynamicValueState
	var keys: DynamicValue*[]
	var values: DynamicValue*[]
	func override __delete__()
		for e in values
			del e
		for e in keys
			del e
	func override type() -> string
		return "dict"
	func override __str__() -> string
		var s = "{"
		for e,i in values
			if i > 0
				s += ","
			s += keys[i].render() + ":" + e.render()
		return s + "}"
	func override __bool__() -> bool
		return len(values) > 0
	func override mut get_element(key: DynamicValue) -> DynamicValue*
		for k,j in keys
			if k.compare(key) == 0
				return values[j]
		
		var val = new DynamicValue()
		values.add(val)
		keys.add(key.copy())
		return val
	func mut add(key: DynamicValue, val: DynamicValue)
		for k,j in keys
			if k.compare(key) == 0
				return
		values.add(val.copy())
		keys.add(key.copy())
	func override copy() -> DynamicValueState*
		var c = new DynamicValueStateDict()
		for v,i in values
			c.add(keys[i].copy(),v.copy())
		return c

class DynamicValueStateFunction extends DynamicValueState
	var _func: Function* = nil
	func override type() -> string
		return "func"
	func override __str__() -> string
		return "<func>"

class Variable
	var v: DynamicValue*
	var name: string
	var writable = true
	var is_ref = false
	func __init__()
		v = new DynamicValue()
	func __init__(_name: string)
		v = new DynamicValue()
		name = _name
	func __delete__()
		clear()
	func mut clear()
		if !is_ref
			del v
		is_ref = false
		v = nil
	func show()
		var s: string
		if writable
			s += "variable "
		else
			s += "const "
		
		#s += v.s.type() + " "
		if len(name) > 0
			s += name + " = "
		s += v.render()
		print(s)
	func mut setType(_type: TType)
		v.setType(_type)
	func mut setReference(r: DynamicValue)
		clear()
		is_ref = true
		v = &r
		


class Function
	var name: string
	var params: string[]
	var is_internal = false
	#Variable*[] params
	#Variable*[] vars
	var block: SyntaxNodeBlock* = nil
	func __init__(_name: string)
		name = _name
	#Variable* addVar(string name)
	#	Variable *v = new Variable(name)
	#	vars.add(v)
	#	return v
	func virtual call(out inter: Interpreter, out ret: Variable, p: Variable*[])
		inter.stack_push(self, ret)
		var n = min(len(p), len(params))
		for i in 0:n
			*inter.cur_context.vars[i].v = *p[i].v
		inter.doNode(block, ret)
		inter.stack_pop()


class FunctionInternal extends Function
	func __init__()
		super.__init__("")
		is_internal = true

class FunctionSin extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setFloat(sin(float(p[0].v)))

class FunctionCos extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setFloat(cos(float(p[0].v)))

class FunctionTan extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setFloat(tan(float(p[0].v)))

class FunctionSqrt extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setFloat(sqrt(float(p[0].v)))

class FunctionAbs extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setFloat(abs(float(p[0].v)))

class FunctionPrint extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		var s: string
		for pp in p
			s += str(pp.v)
			s += " "
		print(s)

class FunctionLen extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			if p[0].v.type == TType.ARRAY
				var a: DynamicValueStateArray* = p[0].v.s
				r.v.setInt(len(a.a))
			if p[0].v.type == TType.DICT
				var a: DynamicValueStateDict* = p[0].v.s
				r.v.setInt(len(a.values))

class FunctionRange extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		r.v.setType(TType.ARRAY)
		var a: DynamicValueStateArray* = r.v.s
		var start = 0
		var end = 0
		var step = 1
	
		if len(p) == 1
			end = int(p[0].v)
		if len(p) >= 2
			start = int(p[0].v)
			end = int(p[1].v)
		if len(p) >= 3
			step = int(p[2].v)

		var i = start
		while i < end
			var ii = new DynamicValue()
			ii.setInt(i)
			a.a.add(ii)
			i += step

class FunctionStr extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setString(str(p[0].v))

class FunctionInt extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setInt(int(p[0].v))

class FunctionFloat extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setFloat(float(p[0].v))

class FunctionBool extends FunctionInternal
	func override call(inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) > 0
			r.v.setBool(bool(p[0].v))

class FunctionMap extends FunctionInternal
	func override call(out inter: Interpreter, out r: Variable, p: Variable*[])
		if len(p) >= 2
			if p[0].v.type == TType.FUNCTION and p[1].v.type == TType.ARRAY
				r.v.setType(TType.ARRAY)
				var f: DynamicValueStateFunction* = p[0].v.s
				var pa: DynamicValueStateArray* = p[1].v.s
				var ra: DynamicValueStateArray* = r.v.s
				for e in pa.a
					var temp, temp2: Variable
					temp2.setReference(e)
					var pp: Variable*[]
					pp.add(&temp2)
					inter.stack_push(self, temp)
					f._func.call(inter, temp, pp)
					inter.stack_pop()
					ra.a.add(temp.v.copy())

enum NodeType
	OPERATOR
	VARIABLE
	CONST
	CALL
	BLOCK
	IF
	WHILE
	FOR
	BREAK
	CONTINUE
	RETURN
	ARRAY_BUILDER
	DICT_BUILDER
	ARRAY_ELEMENT

class SyntaxNode
	var type: NodeType
	var params: SyntaxNode*[]
	func virtual tostr() -> string
		return "???"
	func virtual showPost(indent: int)
	func show(indent: int)
		var s: string
		for i in 0:indent
			s += "    "
		print(s + tostr())
		for p in params
			p.show(indent + 1)
		showPost(indent)

class SyntaxNodeVariable extends SyntaxNode
	var name: string
	var allow_create = false
	func __init__(_name: string)
		name = _name
		type = NodeType.VARIABLE
	func override tostr() -> string
		return "variable " + name

class SyntaxNodeConst extends SyntaxNode
	var v: Variable*
	func __init__(_v: Variable*)
		v = _v
		type = NodeType.CONST
	func override tostr() -> string
		return "const " + v.v.render()

class SyntaxNodeOperator extends SyntaxNode
	var op: string
	func __init__(_op: string)
		op = _op
		type = NodeType.OPERATOR
	func override tostr() -> string
		return "operator " + op
	func rank() -> int
		if op == "*"
			return 1
		if op == "/"
			return 2
		if op == "+"
			return 3
		if op == "-"
			return 4
		if op == "="
			return 10
		return 5

class SyntaxNodeCall extends SyntaxNode
	var name: string
	
	func __init__(_name: string)
		name = _name
		type = NodeType.CALL
	func override tostr() -> string
		return "call " + name

class SyntaxNodeBlock extends SyntaxNode
	func override __init__()
		type = NodeType.BLOCK
	func override tostr() -> string
		return "block"

class SyntaxNodeIf extends SyntaxNode
	var block: SyntaxNode* = nil
	var block_else: SyntaxNode* = nil
	func override __init__()
		type = NodeType.IF
	func override tostr() -> string
		return "if"
	func override showPost(indent: int)
		block.show(indent+1)
		if block_else
			block_else.show(indent+1)

class SyntaxNodeWhile extends SyntaxNode
	var block: SyntaxNode* = nil
	var block_else: SyntaxNode* = nil
	func override __init__()
		type = NodeType.WHILE
	func override tostr() -> string
		return "while"
	func override showPost(indent: int)
		block.show(indent+1)
		if block_else
			block_else.show(indent+1)

class SyntaxNodeFor extends SyntaxNode
	var block: SyntaxNode* = nil
	var block_else: SyntaxNode* = nil
	func override __init__()
		type = NodeType.FOR
	func override tostr() -> string
		return "for"
	func override showPost(indent: int)
		block.show(indent+1)

		if block_else
			block_else.show(indent+1)

class SyntaxNodeReturn extends SyntaxNode
	func override __init__()
		type = NodeType.RETURN
	func override tostr() -> string
		return "return"

class SyntaxNodeBreak extends SyntaxNode
	func override __init__()
		type = NodeType.BREAK
	func override tostr() -> string
		return "break"

class SyntaxNodeContinue extends SyntaxNode
	func override __init__()
		type = NodeType.CONTINUE
	func override tostr() -> string
		return "continue"

class SyntaxNodeArrayBuilder extends SyntaxNode
	func override __init__()
		type = NodeType.ARRAY_BUILDER
	func override tostr() -> string
		return "new []"

class SyntaxNodeDictBuilder extends SyntaxNode
	func override __init__()
		type = NodeType.DICT_BUILDER
	func override tostr() -> string
		return "new {}"

class SyntaxNodeArrayElement extends SyntaxNode
	func override __init__()
		type = NodeType.ARRAY_ELEMENT
	func override tostr() -> string
		return "[]"

class SyntaxError extends Exception

class SyntaxTree
	var vars: Context*
	var consts: Variable*[]
	var func_main: Function*
	var funcs: Function*[]
	var internal_funcs: Function*[]
	
	
	var cur_func: Function*
	
	
	var lines: Lines
	var cur_line_no: int
	var cur_line: Line
	var cur_word: int
	var cur: string
	func endOfFile() -> bool
		return cur_line_no >= len(lines.lines) - 1
	func mut nextLine()
		if endOfFile()
			setError("unexpected end of file")
			return
		cur_line_no ++
		cur_line = lines.lines[cur_line_no]
		cur_word = 0
		cur = cur_line.words[0]
	func endOfLine() -> bool
		return cur_word >= len(cur_line.words) - 1
	func expect_more()
		if endOfLine()
			setError("unexpected end of line")
	func mut next()
		#if endOfLine()
#			setError("unexpected end of line")
#			return
		cur = peek()
		cur_word ++
		#cur = cur_line.words[cur_word]
	func peek() -> string
		if cur_word+1 < len(cur_line.words)
			return cur_line.words[cur_word+1]
		return ""
	
	func setError(msg: string)
		var c = "line {{cur_line.physical_line_no + 1}} at {{cur}}"
		raise(new SyntaxError("Syntax error: {{msg}}\n{{c}}"))
	
	func mut addGlobalVar(name: string) -> Variable*
		var v = new Variable(name)
		vars.add(v)
		return v
	func mut addConst() -> Variable*
		var c = new Variable("")
		c.writable = false
		consts.add(c)
		return c
	func mut addConstNumber(s: string) -> Variable*
		var c: Variable* = addConst()
		if s.find(".", 0) >= 0
			c.v.setFloat(float(s))
		else
			c.v.setInt(int(s))
		return c
	func mut addConstString(s: string) -> Variable*
		var c: Variable* = addConst()
		c.v.setString(s)
		return c
	func mut addFunc(name: string) -> Function*
		var f: Function* = new Function(name)
		var v: Variable* = addGlobalVar(name)
		v.v.setFunction(f)
		funcs.add(f)
		return f
	func mut add_internal_func(name: string, out f: Function*)
		f.name = name
		var v: Variable* = addGlobalVar(name)
		internal_funcs.add(f)
		v.v.setFunction(f)
		
	func mut getNuclearOperand() -> SyntaxNode*
		if isNumber(cur[0])
			var sn: SyntaxNodeVariable* = new SyntaxNodeConst(addConstNumber(cur))
			next()
			return sn
		if cur[0] == '"' or cur[0] == 0x27 # " or '
			var sn: SyntaxNodeVariable* = new SyntaxNodeConst(addConstString(unescape(cur)))
			next()
			return sn
		if isOperator(cur[0])
			setError("variable name expected")
		var sn: SyntaxNodeVariable* = new SyntaxNodeVariable(cur)
		if cur_word == 0
			if peek() == "="
				sn.allow_create = true
		next()
		return sn
	func mut getOperator() -> SyntaxNode*
		if !isOperator(cur[0]) and (cur != "and") and (cur != "or")
			setError("operator expected")
		var sn: SyntaxNode* = new SyntaxNodeOperator(cur)
		next()
		return sn
	func mut getOperandFunc() -> SyntaxNode*
		var sn: SyntaxNode* = new SyntaxNodeCall(cur)
		next() # name
		if cur != "("
			setError("( after function name expected")
		next() # "("
		if cur == ")"
			return sn
		while true
			var param: SyntaxNode* = getOperandGreedy()
			sn.params.add(param)
			if cur != "," and cur != ")"
				setError(", or ) after parameter expexted")
				return nil
			if cur == ")"
				break
			next()
		next() # ")"
		return sn
	func mut getOperandArrayBuilder() -> SyntaxNode*
		var sn = new SyntaxNodeArrayBuilder()
		next() # "["
		while cur != "]"
			var sub: SyntaxNode* = getOperandGreedy()
			sn.params.add(sub)
			if cur != "," and cur != "]"
				setError(", or ] expected")
			if cur == ","
				next()
		next() # "]"
		return sn
	func mut getOperandDictBuilder() -> SyntaxNode*
		var sn = new SyntaxNodeDictBuilder()
		next() # "{"
		while cur != "}"
			var key: SyntaxNode* = getOperandGreedy()
			sn.params.add(key)
			if cur != ":"
				setError(": expected")
			next() # ":"
			var val: SyntaxNode* = getOperandGreedy()
			sn.params.add(val)
			if cur != "," and cur != "}"
				setError(", or } expected")
			if cur == ","
				next()
		next() # "}"
		return sn
	func mut checkOperandExtensions(sn: SyntaxNode*) -> SyntaxNode*
		if cur == "["
			var el = new SyntaxNodeArrayElement()
			el.params.add(sn)
			next() # "["
			var index: SyntaxNode* = getOperandGreedy()
			el.params.add(index)
			if cur != "]"
				setError("] expected")
			next() # "]"
			return checkOperandExtensions(el)
		
		return sn
	func mut getOperand() -> SyntaxNode*
		# bracket?
		if cur == "("
			next()
			var sn: SyntaxNode* = getOperandGreedy()
			if cur != ")"
				setError(") expected")
			next() # ")"
			return checkOperandExtensions(sn)
		
		# [a,b,c]
		if cur == "["
			return getOperandArrayBuilder()
		
		# {a,b,c}
		if cur == "{"
			return getOperandDictBuilder()
		
		# function call?
		if peek() == "("
			return checkOperandExtensions(getOperandFunc())
		
		# basic
		var sn: SyntaxNode* = getNuclearOperand()
		return checkOperandExtensions(sn)
	
	
	# sequence of [operand operator operand ...]
	func mut getOperandGreedy() -> SyntaxNode*
		var sn: SyntaxNode*[]
		sn.add(getOperand())
		while !endOfLine()
			if cur == "," or cur == ")" or cur == "]" or cur == "}" or cur == ":"
				break
			sn.add(getOperator())
			sn.add(getOperand())
		return linkOperators(sn)
	func linkOperators(out sn: SyntaxNode*[]) -> SyntaxNode*
		var rank: int[]
		for i in 0:(len(sn)-1)/2
			var op: SyntaxNodeOperator* = sn[i*2+1]
			rank.add(op.rank())
		while len(sn) > 2
			var rmin = 100
			var imin = 0
			for r,i in rank
				if r < rmin
					rmin = r
					imin = i
			sn[imin*2+1].params.add(sn[imin*2])
			sn[imin*2+1].params.add(sn[imin*2+2])
			sn.remove(imin*2+2)
			sn.remove(imin*2)
			rank.remove(imin)
		return sn[0]
	func mut getSpecialCommandReturn() -> SyntaxNode*
		var sn = new SyntaxNodeReturn()
		while !endOfLine()
			next()
			sn.params.add(getOperandGreedy())
			if !endOfLine()
				setError("multi return not supported")
				next()
				if cur != ","
					setError(", or end of line expected")
					return nil
		return sn
	func mut getSpecialCommandIf() -> SyntaxNode*
		var indent0 = cur_line.indent
		var sn = new SyntaxNodeIf()
		next() # "if"
		sn.params.add(getOperandGreedy())
		sn.block = parseBlock()
		if endOfFile()
			return sn
		if lines.lines[cur_line_no + 1].indent != indent0 or lines.lines[cur_line_no + 1].words[0] != "else"
			return sn
		nextLine()
		# else
		sn.block_else = parseBlock()
		return sn
	func mut getSpecialCommandWhile() -> SyntaxNode*
		var indent0 = cur_line.indent
		var sn: SyntaxNodeWhile* = new SyntaxNodeWhile()
		next() # "while"
		sn.params.add(getOperandGreedy())
		sn.block = parseBlock()
		if endOfFile()
			return sn
		if lines.lines[cur_line_no + 1].indent != indent0 or lines.lines[cur_line_no + 1].words[0] != "else"
			return sn
		nextLine()
		# else
		sn.block_else = parseBlock()
		return sn
	func mut getSpecialCommandFor() -> SyntaxNode*
		var indent0 = cur_line.indent
		var sn = new SyntaxNodeFor()
		next() # "for"
		var vvv = new SyntaxNodeVariable(cur)
		next()
		vvv.allow_create = true
		sn.params.add(vvv)
		if cur != "in"
			setError("in extected")
		next()
		sn.params.add(getOperandGreedy())
		sn.block = parseBlock()
		if endOfFile()
			return sn
		if lines.lines[cur_line_no + 1].indent != indent0 or lines.lines[cur_line_no + 1].words[0] != "else"
			return sn
		nextLine()
		# else
		sn.block_else = parseBlock()
		return sn
	func mut getSpecialCommandBreak() -> SyntaxNode*
		return new SyntaxNodeBreak()
	func mut getSpecialCommandContinue() -> SyntaxNode*
		return new SyntaxNodeContinue()
	func mut parseFunctionDef()
		var prev_func = cur_func
		var indent0 = cur_line.indent
		next()
		var f = addFunc(cur)
		cur_func = f
		next()
		if cur != "("
			setError("( expected")
		next()
		while cur != ")"
			#Variable* v = ad
			f.params.add(cur)
			next()
			if cur == ")"
				break
			if cur != ","
				setError(", or ) expected")
			next()
		if !endOfLine()
			setError("end of line expexted")
		
		f.block = parseBlock()
		cur_func = prev_func
		
	func mut parseLine() -> SyntaxNode*
		if cur == "if"
			return getSpecialCommandIf()
		if cur == "while"
			return getSpecialCommandWhile()
		if cur == "for"
			return getSpecialCommandFor()
		if cur == "return"
			return getSpecialCommandReturn()
		if cur == "break"
			return getSpecialCommandBreak()
		if cur == "continue"
			return getSpecialCommandContinue()
		if cur == "def"
			parseFunctionDef()
			return nil
		var sn = getOperandGreedy()
		if !endOfLine()
			setError("end of line expected")
		return sn
	func mut parseBlock() -> SyntaxNode*
		var sn = new SyntaxNodeBlock()
		nextLine()
		var indent0 = cur_line.indent
		var sub = parseLine()
		if sub
			sn.params.add(sub)
		while !endOfFile()
			if lines.lines[cur_line_no + 1].indent < indent0
				return sn
			if lines.lines[cur_line_no + 1].indent > indent0
				sn.params.add(parseBlock())
			else
				nextLine()
				sub = parseLine()
				if sub
					sn.params.add(sub)
		return sn
	
	func mut create(source: string)
		var lp: LiteralParser
		
		vars = new Context("-global-", nil)
		
		func_main = addFunc("main")
		
		var v = addGlobalVar("true")
		v.v.setBool(true)
		v.writable = false
		v = addGlobalVar("false")
		v.writable = false
		v.v.setBool(false)
		v = addGlobalVar("nil")
		v.writable = false
		v = addGlobalVar("pi")
		v.v.setFloat(3.141592654)
		v.writable = false

		add_internal_func("sin", new FunctionSin())
		add_internal_func("cos", new FunctionCos())
		add_internal_func("tan", new FunctionTan())
		add_internal_func("sqrt", new FunctionSqrt())
		add_internal_func("abs", new FunctionAbs())
		add_internal_func("len", new FunctionLen())
		add_internal_func("range", new FunctionRange())
		add_internal_func("print", new FunctionPrint())
		add_internal_func("str", new FunctionStr())
		add_internal_func("int", new FunctionInt())
		add_internal_func("float", new FunctionFloat())
		add_internal_func("bool", new FunctionBool())
		add_internal_func("map", new FunctionMap())
		
		lines = lp.parse(source)
		
		cur_line_no = -1
		#lines.show()
		cur_func = func_main
		func_main.block = parseBlock()
	func show()
		print("--- syntax tree ---")
		for f in funcs
			print("function " + f.name)
			f.block.show(1)
		print("--- ---")

class Context
	var name: string
	var parent: Context*
	var vars: Variable*[]
	var ret: Variable* = nil
	var _func: Variable* = nil
	var flag_return = false
	var flag_break = false
	var flag_continue = false
	func __init__(_name: string, p: Context*)
		name = _name
		parent = p
	func __delete__()
		for v in vars
			del v
	func get(name: string) -> Variable*
		for v in vars
			if v.name == name
				return v
		if parent
			return parent.get(name)
		return nil
	func mut add(v: Variable*)
		vars.add(v)
	func show()
		print(">>>  {{name}}")
		for v in vars
			v.show()

class RuntimeError extends Exception

class Interpreter
	var syntax: SyntaxTree*
	var contexts: Context*[]
	var cur_context: Context*
	func setError(msg: string)
		raise(new RuntimeError("Runtime error: {{msg}}"))
	func mut stack_push(f: Function, ret: Variable)
		cur_context = new Context(f.name, cur_context)
		cur_context._func = &f
		cur_context.ret = &ret
		for n in f.params
			cur_context.add(new Variable(n))
		contexts.add(cur_context)
	func mut stack_pop()
		var n = len(contexts) - 1
		del cur_context
		contexts.remove(n)
		if n > 0
			cur_context = contexts[n - 1]
	func mut doNode(sn: SyntaxNode, out ret: Variable)
		var params: Variable*[]
		var is_temp: bool[]
		
		# parameters
		for p in sn.params
			if p.type == NodeType.VARIABLE
				var vv: SyntaxNodeVariable* = p
				var v = cur_context.get(vv.name)
				if !v
					if vv.allow_create
						v = new Variable(vv.name)
						cur_context.add(v)
					else
						setError("variable not found: {{vv.name}}")
				params.add(v)
				is_temp.add(false)
			else if p.type == NodeType.CONST
				var vv: SyntaxNodeConst* = p
				params.add(vv.v)
				is_temp.add(false)
			else
				var temp = new Variable()
				doNode(p, temp)
				params.add(temp)
				is_temp.add(true)
				
				if cur_context.flag_return or cur_context.flag_break or cur_context.flag_continue
					break
		
		# execute
		if sn.type == NodeType.OPERATOR
			var op: SyntaxNodeOperator* = &sn
			if op.op == "="
				*params[0].v = *params[1].v
			else if op.op == "+"
				*ret.v = *params[0].v
				*ret.v += *params[1].v
			else if op.op == "+="
				*params[0].v += *params[1].v
			else if op.op == "-"
				*ret.v = *params[0].v
				*ret.v -= *params[1].v
			else if op.op == "-="
				*params[0].v -= *params[1].v
			else if op.op == "*"
				*ret.v = *params[0].v
				*ret.v *= *params[1].v
			else if op.op == "*="
				*params[0].v *= *params[1].v
			else if op.op == "/"
				*ret.v = *params[0].v
				*ret.v /= *params[1].v
			else if op.op == "/="
				*params[0].v /= *params[1].v
			else if op.op == ">"
				ret.v.setBool(params[0].v.compare(*params[1].v) > 0)
			else if op.op == "<"
				ret.v.setBool(params[0].v.compare(*params[1].v) < 0)
			else if op.op == "=="
				ret.v.setBool(params[0].v.compare(*params[1].v) == 0)
			else if op.op == ">="
				ret.v.setBool(params[0].v.compare(*params[1].v) >= 0)
			else if op.op == "<="
				ret.v.setBool(params[0].v.compare(*params[1].v) <= 0)
			else if op.op == "and"
				ret.v.setBool(bool(params[0].v) and bool(params[1].v))
			else if op.op == "or"
				ret.v.setBool(bool(params[0].v) or bool(params[1].v))
			else if op.op == "not"
				ret.v.setBool(bool(params[0].v))
			else
				setError("unhandled operator: {{op.op}}")
		else if sn.type == NodeType.CALL
			var call: SyntaxNodeCall* = &sn
			var v = cur_context.get(call.name)
			if !v
				setError("function not found: {{call.name}}")
			if v.v.type != TType.FUNCTION
				setError("is not a function: {{call.name}}")
			var fs: DynamicValueStateFunction* = v.v.s
			var f: Function* = fs._func
			stack_push(f, ret)
			f.call(self, ret, params)
			#if f.block
#				int n = min(len(sn.params), len(f.params))
#				for i in 0:n
#					*cur_context.vars[i].v = *params[i].v
#			else
			stack_pop()
				
		else if sn.type == NodeType.IF
			var dummy: Variable
			var _if: SyntaxNodeIf* = &sn
			if bool(params[0].v)
				doNode(_if.block, dummy)
			else if _if.block_else
				doNode(_if.block_else, dummy)
		else if sn.type == NodeType.WHILE
			var _while: SyntaxNodeWhile* = &sn
			while bool(params[0].v)
				cur_context.flag_continue = false
				var dummy: Variable
				doNode(_while.block, dummy)
				
				if cur_context.flag_return or cur_context.flag_break
					break

				# reevaluate
				if sn.params[0].type != NodeType.VARIABLE
					doNode(sn.params[0], params[0])
			cur_context.flag_break = false
		else if sn.type == NodeType.FOR
			if params[1].v.type != TType.ARRAY
				setError("for needs array")
			var a: DynamicValueStateArray* = params[1].v.s
			var _for: SyntaxNodeFor* = &sn
			for el in a.a
				params[0].setReference(el)
				cur_context.flag_continue = false
				
				var dummy: Variable
				doNode(_for.block, dummy)
				
				if cur_context.flag_return or cur_context.flag_break
					break
					
			cur_context.flag_break = false
		else if sn.type == NodeType.RETURN
			if len(params) > 0
				*cur_context.ret.v = *params[0].v
			cur_context.flag_return = true
		else if sn.type == NodeType.BREAK
			cur_context.flag_break = true
		else if sn.type == NodeType.CONTINUE
			cur_context.flag_continue = true
		else if sn.type == NodeType.BLOCK
			pass
		else if sn.type == NodeType.ARRAY_BUILDER
			ret.setType(TType.ARRAY)
			for c in params
				ret.v.add(c.v)
		else if sn.type == NodeType.DICT_BUILDER
			ret.setType(TType.DICT)
			var ds: DynamicValueStateDict* = ret.v.s
			var n = len(params) / 2
			for i in 0:n
				ds.add(params[0].v, params[1].v)
		else if sn.type == NodeType.ARRAY_ELEMENT
			var dv: DynamicValue* = params[0].v.get_element(params[1].v)
			if dv
				ret.setReference(dv)
		else
			setError("unhandled node: {{sn.type}}")
		for p,i in params
			if is_temp[i]
				del p
				
	func mut run(_syntax: SyntaxTree)
		syntax = &_syntax
		var dummy: Variable
		cur_context = syntax.vars
		stack_push(syntax.func_main, dummy)
		doNode(syntax.func_main.block, dummy)

func eval(source: string)
	var syntax: SyntaxTree
	syntax.create(source)
	if verbose
		syntax.show()
	var inter: Interpreter
	inter.run(syntax)
	if verbose
		print("--- variables ---")
		syntax.vars.show()
		for c in inter.contexts
			c.show()
		print("--- ---")

func main(arg: string[])
	verbose = false
	var input: string
	var from_file = true
	for a in arg
		if a == "--verbose"
			verbose = true
		else if a == "-C" or a == "--command"
			from_file = false
		else
			input = a
	if len(input) > 0
		var source = input
		try
			if from_file
				source = fs.read_text(input)
			eval(source)
		except Exception as e
			print("------------------------------------------------")
			print(e)
			print("------------------------------------------------")

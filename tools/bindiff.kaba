use os

var MAX_DIFF_SIZE: int
var MIN_MATCH_SIZE: int
var CONTEXT: int

struct Mapping
	var a0, a1, b0, b1: int
	func la() -> int
		return a1 - a0
	func lb() -> int
		return b1 - b0
	func __str__() -> string
		return "{{a0}}:+{{la()}} / {{b0}}:+{{lb()}}"


func expand_mapping(a: string, b: string, out m: Mapping)
	var d = m.b0 - m.a0
	
	# forward comp
	for i in m.a0:len(a)
		if a[i] != b[i+d]
			m.a1 = i
			m.b1 = m.a1 + d
			return
	m.a1 = len(a)
	m.b1 = m.a1 + d

func try_match(a: string, b: string, offset_a: int, offset_b: int) -> Mapping
	var m: Mapping
	for i in 0:MAX_DIFF_SIZE
		var oa = offset_a + i
		for j in 0:MAX_DIFF_SIZE
			var ob = offset_b + j
			if a[oa:oa+MIN_MATCH_SIZE] == b[ob:ob+MIN_MATCH_SIZE]
				m.a0 = oa
				m.b0 = ob
				return m
	m.a0 = -1
	return m

func is_printable_ascii(c: u8) -> bool
	return c >= 0x20 and c <= 0x7e

func hex(s: string) -> string
	var r: string
	var in_printable = false
	for i in 0:len(s)
		if in_printable
			if not is_printable_ascii(s[i])
				in_printable = false
				r += "» "
		else if len(s[i:i+4]) == 4
			in_printable = true
			for c in s[i:i+4]
				if not is_printable_ascii(c)
					in_printable = false
			if in_printable
				r += "«"
		
		if in_printable
			r += as_binary(&s[i], 1)
		else
			r += s[i:i+1].hex()
			if i < len(s) -1
				r += " "
	if in_printable
		r += "»"
	return r

func diff(a: string, b: string)
	var diffs: Mapping[]
	var m: Mapping
	m.a0 = 0
	m.b0 = 0
	
	while true
		expand_mapping(a, b, m)
		if m.a1 >= len(a) or m.b1 >= len(b)
			break
		var m2 = try_match(a, b, m.a1, m.b1)
		if m2.a0 < 0
			break
		expand_mapping(a, b, m2)
	
		var d: Mapping
		d.a0 = m.a1
		d.b0 = m.b1
		d.a1 = m2.a0
		d.b1 = m2.b0
		diffs.add(d)
	
		print("{{os.terminal.YELLOW}}diff at {{d}}:{{os.terminal.END}}")
		var a000 = clamp(d.a0-CONTEXT, 0, len(a))
		var a111 = clamp(d.a1+CONTEXT, 0, len(a))
		print(hex(a[a000:d.a0]) + " {{os.terminal.RED}}{{hex(a[d.a0:d.a1])}} {{os.terminal.GREEN}}{{hex(b[d.b0:d.b1])}}{{os.terminal.END}} " + hex(a[d.a1:a111]))
		m = m2

func main(arg: string[])
	CONTEXT = 4
	MAX_DIFF_SIZE = 4096*2
	MIN_MATCH_SIZE = 16

	var p: os.CommandLineParser
	var pp = &p
	p.info("bindiff", "find (small) differences between binary files")
	p.option("--context", "BYTES", "how many bytes of context are shown", func (a: string) CONTEXT = int(a))
	p.option("--max-diff", "BYTES", "maximum size of a non-matching chunk", func (a: string) MAX_DIFF_SIZE = int(a))
	p.option("--min-match", "BYTES", "minimum size to recognize a matching chunk", func (a: string) MIN_MATCH_SIZE = int(a))
	p.cmd("help", "", "show help", func (a: string[]) pp.show())
	p.cmd("", "FILE1 FILE2", "show diff", func (a: string[]) diff(os.fs.read(a[0]), os.fs.read(a[1])))
	p.parse(arg)
	#p.show_help()

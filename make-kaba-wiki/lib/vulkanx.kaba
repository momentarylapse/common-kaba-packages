use vulkan.*
use time.Timer
use image.Image

class Vertex
	pos: vec3
	n: vec3
	u,v: float


func create_quad(r: Rect) -> xfer[VertexBuffer]
	var vb = new VertexBuffer("3f,3f,2f")
	vb.create_quad(r, rect.ID)
	return give(vb)


class Renderer
	var width, height: int
	#var in_flight_fence: Fence*
	var wait_for_frame_fences: owned[Fence][]
	var image_available_semaphore, render_finished_semaphore: owned[Semaphore]

	var device: Device&
	var command_buffers: owned[CommandBuffer][]
	#var cb: CommandBuffer*
	var pool: owned[DescriptorPool]

	func __init__(_device: Device&)
		width = 0
		height = 0
		device := _device
	
		#in_flight_fence = new Fence()
		image_available_semaphore = new Semaphore(device)
		render_finished_semaphore = new Semaphore(device)
		#cb = new CommandBuffer()
	
	func virtual __delete__()
	
	func virtual default_render_pass() -> RenderPass*
		return nil
		
	func virtual current_frame_buffer() -> FrameBuffer*
		return nil
		
	func virtual current_command_buffer() -> CommandBuffer*
		return nil

	func virtual mut start_frame() -> bool
		return false

	func virtual mut end_frame()
		pass
	
	func area() -> Rect
		return rect(0, width, 0, height)


class WindowRenderer extends Renderer
	var window: void*
	var swap_chain: owned![SwapChain]
	var _default_render_pass: owned[RenderPass]
	var depth_buffer: owned[DepthBuffer]
	var frame_buffers: owned[FrameBuffer][]
	var image_index: int
	var framebuffer_resized: bool
	
	func __init__(_window: void*, _device: Device&)
		super.__init__(_device)
		window = _window
		framebuffer_resized = false
		pool = new DescriptorPool("buffer:1024,sampler:1024", 1024)

		_create_swap_chain_and_stuff()

		#main_renderer = this
	#glfwSetFramebufferSizeCallback(window, framebuffer_resize_callback);

	func mut _create_swap_chain_and_stuff()
		swap_chain = SwapChain.create_for_glfw(device, window)
		var swap_images = swap_chain.create_textures()
		for t in swap_images
			wait_for_frame_fences.add(new Fence(device))
		
		for pool in device.command_pool
			for t in swap_images
				command_buffers.add(pool.create_command_buffer())
			
		depth_buffer = swap_chain.create_depth_buffer()
		_default_render_pass = swap_chain.create_render_pass(depth_buffer, [])
		frame_buffers = swap_chain.create_frame_buffers(_default_render_pass, depth_buffer)
		width = swap_chain.width
		height = swap_chain.height

#void WindowRenderer::framebuffer_resize_callback(GLFWwindow* window, int width, int height) {
#	main_renderer->on_resize(width, height);

#void WindowRenderer::on_resize(int w, int h) {
#	width = w;
#	height = h;
#	framebuffer_resized = true;

	func mut rebuild_default_stuff()
		print("recreate swap chain")

		device.wait_idle()

		_create_swap_chain_and_stuff()
	
	func override default_render_pass() -> RenderPass*
		return _default_render_pass

	func override current_frame_buffer() -> FrameBuffer*
		return frame_buffers[image_index]

	func override current_command_buffer() -> CommandBuffer*
		return weak(command_buffers[image_index])

	func override start_frame() -> bool
		#in_flight_fence.wait()

		for index in swap_chain.acquire_image(image_available_semaphore)
			image_index = index
			for f in wait_for_frame_fences[image_index]
				f.wait()
				f.reset()
				return true
		else
			rebuild_default_stuff()
		return false

	func override end_frame()
	#	queue_submit_command_buffer(cb, [image_available_semaphore], [render_finished_semaphore], in_flight_fence)

	#	if !swap_chain.present(image_index, [render_finished_semaphore]) or framebuffer_resized
	#		framebuffer_resized = false
	#		rebuild_default_stuff()
			
		
		for f in wait_for_frame_fences[image_index]
			device.present_queue.submit(command_buffers[image_index], [weak(image_available_semaphore)], [weak(render_finished_semaphore)], &f)

			swap_chain.present(image_index, [weak(render_finished_semaphore)])
			
		device.wait_idle()










class TextureRenderer extends Renderer
	var tex: shared![Texture]
	var depth_buffer: shared![DepthBuffer]
	var frame_buffer: owned![FrameBuffer]
	var _default_render_pass: owned![RenderPass]


	func __init__(t: shared![Texture], d: Device&)
		super.__init__(d)
		tex = t
		width = tex.width
		height = tex.height

		#vulkan::next_compare_op = VK_COMPARE_OP_LESS;
		depth_buffer = new DepthBuffer(width, height, "d:f32", true)
		#vulkan::next_compare_op = VK_COMPARE_OP_ALWAYS;

		_default_render_pass = new RenderPass(["rgba:i8", "d:f32"], ["clear"])
		frame_buffer = new FrameBuffer(_default_render_pass, [tex, depth_buffer])

	func override start_frame() -> bool
		#cb.begin()
		return true

	func override end_frame()
		#cb->barrier([tex, depth_buffer], 0);
	#	cb.barrier([depth_buffer], 0)
	#	cb.end()

	#	queue_submit_command_buffer(cb, [], [], in_flight_fence)
	#	in_flight_fence.wait()
		device.wait_idle()


	func override current_frame_buffer() -> FrameBuffer*
		return weak(frame_buffer)






class UBO
	var m,v,p: mat4

class StatLayer
	var tex: owned![Texture]
	var ubo: owned![UniformBuffer]
	var dset: owned![DescriptorSet]
	var timer: owned![Timer]
	var im: owned![Image]
	var vb: owned![VertexBuffer]
	var pipeline: owned![GraphicsPipeline]
	var frames: int
	var _time: float
	
	func __init__(shader: Shader*, rp: RenderPass*, subpass: int, pool: DescriptorPool*)
		timer = new Timer()
		_time = 0
		frames = 0
		im = new Image(256, 64, color(0,0,0,0))
		tex = new Texture()
		tex.write(im)
		ubo = new UniformBuffer(64*3)
		var u: UBO
		u.p = mat4.ID
		u.v = mat4.ID
		u.m = mat4.ID
		ubo.update(&u)
		for p in pool
			dset = p.create_set("buffer,sampler")
			dset.set_uniform_buffer(0, ubo)
			dset.set_texture(1, tex)
			dset.update()
		# argh
		vb = create_quad(rect(-1,-0.3,-1,-0.8))
		pipeline = new GraphicsPipeline(shader, rp, subpass, "triangles", "3f,3f,2f")
		pipeline.set_blend(6,7)
		pipeline.set_z(false, false)
		pipeline.rebuild()
	func mut tick()
		var dt = timer.get()
		_time += dt
		frames ++
		if _time < 0.1
			return
		
		im.create(256, 64, color(0,1,1,1))
		var pp = im.start_draw()
		pp.set_color(color.WHITE)
		pp.set_font_size(20)
		pp.draw_str([5,5], "{{frames/_time|1}}")
		tex.write(im)
		dset.set_texture(1, tex)
		dset.update()
		frames = 0
		_time = 0
	func draw(out cb: CommandBuffer)
		cb.bind_pipeline(pipeline)
		cb.bind_descriptor_set(0, dset)
		cb.draw(vb)
		
		
		

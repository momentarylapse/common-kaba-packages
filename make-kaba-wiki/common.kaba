use kaba.*
use os.*


func func_notable_params(f: Function) -> (string,Class*)[]
	var r: (string,Class*)[]
	for i=>p in f.param_type
		if i > 0 or f.is_static()
			r.add([f.var[i].name, p])
	return r


func filter_funcs(funcs: Function&[], namespace: Class) -> Function&[]
	return funcs
		|> filter(f => f.namespace == &namespace)
		|> filter(f => f.name != "main")
		|> filter(f => not(f.name[:1] in ["@", "_", "-", ":"]) or f.name == "__init__")
		|> sort("name")
		|> sort("is_static!")

func filter_consts(consts: Constant&[]) -> Constant&[]
	return consts
		|> filter(c => (c.name[:1] != "-" and c.name != "KABA_LINK"))
		|> sort("name")

func filter_elements(elements: ClassElement[]) -> ClassElement[]
	return elements
		|> filter(e => not (e.name[:1] in ["_", "-"]))
		|> sort("name")

func filter_classes(classes: Class&[]) -> Class&[]
	return classes
		|> filter(c => not("?" in c.name))
		|> filter(c => not("->" in c.name))
		|> filter(c => not("*" in c.name) and not("&" in c.name))
		|> filter(c => not("@" in c.name) and not("-" in c.name) and not("<" in c.name))
		|> filter(c => c.name[0] != '_')
		|> filter(c => (not("[" in c.name) and not("{" in c.name)) or (c.name in ["int[]", "float[]", "bool[]"]))
		|> filter(c => not("(" in c.name))
		|> sort("name")


struct ExternalPackage
	name: string
	main: shared[Module]
	sub_modules: (string,shared[Module])[]
	#sub_names: string[]
	

func find_external_packages_in(base_dir: Path) -> ExternalPackage[]
	var r: ExternalPackage[]
	let list = fs.search(base_dir, "", "d")
	for e in list
		if not fs.exists(base_dir | e | "{{e}}.kaba")
			continue
		var p: ExternalPackage
		p.name = str(e)
		print("extern: {{e}}")
		p.main = default_context.load_module(base_dir | e | "{{e}}.kaba", true)
		
		# sub-modules
		let list2 = fs.search(base_dir | e, "*.kaba", "f")
		for e2 in list2
			if str(e2) != str(e) + ".kaba"
				var xx = default_context.load_module(base_dir | e | e2, true)
				p.sub_modules.add([str(e2).replace(".kaba", ""), xx])
		#p.name = str(e)[:-5]
		r.add(p)
	return r


func find_external_packages() -> ExternalPackage[]
	return find_external_packages_in(app_directory_dynamic | "repos" | "michi.common")


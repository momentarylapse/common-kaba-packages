use kaba
use os

func func_notable_params(f: Function) -> (string,Class*)[]
	var r: (string,Class*)[]
	for p,i in f.param_type
		if i == 0 and not f.is_static()
			continue
		r.add([f.var[i].name, p])
	return r


func filter_funcs(ff: Function*[], namespace: Class) -> Function*[]
	var r: Function*[]
	for f in ff
		if f.namespace != &namespace
			continue
		else if f.name == "__init__"
			r.add(f)
		else if f.name[:1] in ["@", "_", "-"]
			continue
		else if f.name == "main"
			continue
		else
			r.add(f)
	r = sorted(r, "name")
	r = sorted(r, "is_static")
	return r

func filter_consts(cc: Constant*[]) -> Constant*[]
	var r: Constant*[]
	for c in cc
		if c.name[:1] != "-" and c.name != "KABA_LINK"
			r.add(c)
	return sorted(r, "name")

func filter_elements(cc: ClassElement[]) -> ClassElement[]
	return sorted([for c in cc c if not (c.name[:1] in ["_", "-"])], "name")

func filter_classes(cc: Class*[]) -> Class*[]
	var r: Class*[]
	for c in cc
		if c.name.find("shared ", 0) >= 0
			continue
		if c.name.find("->", 0) >= 0
			continue
		if c.name.find("*", 0) >= 0 or c.name.find("&", 0) >= 0
			continue
		if c.name.find("@", 0) >= 0 or c.name[0] == '-' or c.name[0] == '<'
			continue
		if c.name[0] == '_'
			continue
		if c.name.find("[", 0) >= 0 or c.name.find("{", 0) >= 0
			if !(c.name in ["int[]", "float[]", "bool[]"])
				continue
		if c.name.find("(", 0) >= 0
			continue
		r.add(c)
	return sorted(r, "name")



class ExternalPackage
	name: string
	main: Module*
	sub_modules: (string,Module*)[]
	#sub_names: string[]
	

func find_external() -> ExternalPackage[]
	var r: ExternalPackage[]
	var list = fs.search("extern", "", "d")
	for e in list
		ExternalPackage p
		p.name = e
		p.main = weak(Module.load("extern/" + e + "/" + e + ".kaba", true))
		
		# sub-modules
		var list2 = fs.search("extern/" + e , "*.kaba", "f")
		for e2 in list2
			if str(e2) != str(e) + ".kaba"
				p.sub_modules.add([str(e2).replace(".kaba", ""), weak(Module.load("extern/" + e + "/" + e2, true))])
		#p.name = str(e)[:-5]
		r.add(p)
	return r

func find_external_libs() -> Module*[]
	var r: Module*[]
	var list = fs.search("lib", "*.kaba", "f")
	for e in list
		var p = weak(Module.load("lib/" + e, true))
		p.name = str(e)[:-5]
		r.add(p)
	return r

use nix
use os
use net

class EngineData
	var debug: bool
	var show_timings: bool
	var console_enabled: bool
	#bool wire_mode
	var resetting_game, game_running, first_frame: bool
	var physical_aspect_ratio: float
	
	var physics_enabled, collisions_enabled: bool
	var detail_level: float
	
	var elapsed: float
	var elapsed_rt: float
	var time_scale: float
	
	var fps_min, fps_max: float
	
	var initial_world_file, second_world_file: Path
	#Font* default_font
	var renderer: RenderPath*

class RenderPath
	var cube_map: nix.CubeMap*
	func extern virtual render_into_texture(fb: nix.FrameBuffer, cam: Camera)
	func extern render_into_cubemap(db: nix.DepthBuffer, cube: nix.CubeMap, pos: vector)

class Entity
#	extern void __init__()
	func extern virtual __delete__()
	func extern __del_override__()
	func extern virtual on_init()
	func extern virtual on_delete()
	func extern virtual on_iterate(dt: float)

class Controller extends Entity
	func extern override __delete__()
	
	# common
#	extern virtual void on_iterate(float dt)
	func extern virtual on_key_down(key: int)
	func extern virtual on_key_up(key: int)
	func extern virtual on_left_button_down()
	func extern virtual on_left_button_up()
	func extern virtual on_middle_button_down()
	func extern virtual on_middle_button_up()
	func extern virtual on_right_button_down()
	func extern virtual on_right_button_up()
	func extern virtual on_input()
	
	# rare
	func extern virtual on_iterate_pre(dt: float)
	func extern virtual on_draw_pre()
	func extern virtual on_render_inject()

class Camera extends Entity
	var pos: vector
	var ang: quaternion
	var dest: rect
	var m_view: matrix
	var exposure: float
	var bloom_radius: float
	var bloom_factor: float
	
	var focus_enabled: bool
	var focal_length: float
	var focal_blur: float
	
	var fov: float
	var min_depth, max_depth: float
	
	var show, enabled: bool

	func extern override __delete__()
	func extern project(p: vector) -> vector
	func extern unproject(p: vector) -> vector
	func extern update_matrices(aspect_ratio: float)

class Material
	var albedo: color
	var roughness: float
	var metal: float
	var emission: color
	var textures: nix.Texture*[]
	var shader: nix.Shader*
	var cast_shadow: bool
	func extern add_uniform(name: string, p: float*, size: int)
	func extern static load(filename: Path) -> Material*

class CollisionData
	var m, sub: Model*
	var t: Terrain*
	var p, n: vector

class Model extends Entity
	class Mesh
		class Sub
			var num_triangles: int
			var triangle_index: int[]
			var skin_vertex: float[]
			var normal: vector[]
		var bone_index: int[]
		var vertex: vector[]
		var sub: Sub[]
	class Bone
		var parent: int
		var pos: vector
		var model: Model*
		var dmatrix: matrix
		var cur_ang: quaternion
		var cur_pos: vector
	var pos: vector
	var vel: vector
	var ang: quaternion
	var rot: vector
	var matrix: matrix
	var mass: float
	var theta: matrix3
	var physics_active: bool
	var physics_passive: bool
	var g_factor: float
	var name: string
	var radius: float
	var min, max: vector
	
	var materials: Material*[]
	
	var mesh: Mesh*[3]
	var bones: Bone[]
	
	var vars: float[]
	var vars_i: int[]

	func extern override __init__()
	func extern override __delete__()
	func extern virtual on_collide(c: CollisionData)
	
	func extern make_editable()
	func extern begin_edit(detail: int)
	func extern end_edit(detail: int)
	
	func extern get_vertex(index: int) -> vector
	
	func extern add_force(f: vector, rho: vector)
	func extern add_impulse(p: vector, rho: vector)
	func extern add_torque(t: vector)
	func extern add_torque_impulse(l: vector)
	func extern update_mass()
	func extern update_motion()
	
	func extern reset_animation()
	func extern begin_edit_animation()
	func extern animate_x(op: int, p1: float, p2: float, move: int, t: float*, dt: float, vel_param: float, loop: bool) -> bool
	func extern animate(op: int, move: int, t: float*, dt: float, loop: bool) -> bool
	func extern is_animation_done(op_no: int) -> bool
	enum
		MOVE_OP_SET           # overwrite
		MOVE_OP_SET_NEW_KEYED # overwrite, if current doesn't equal 0
		MOVE_OP_SET_OLD_KEYED # overwrite, if last equals 0
		MOVE_OP_ADD_1_FACTOR  # w = w_old         + w_new * f
		MOVE_OP_MIX_1_FACTOR  # w = w_old * (1-f) + w_new * f
		MOVE_OP_MIX_2_FACTOR  # w = w_old * a     + w_new * b

class Terrain extends Entity
	var pos: vector
	var pattern: vector
	var num_x, num_z: int
	func extern get_height(p: vector) -> float
	# ...

class Light extends Entity
	var pos: vector
	var dir: vector
	var color: color
	var radius: float
	var theta: float
	var harshness: float
	var enabled: bool
	var allow_shadow: bool
	var user_shadow_control: bool
	var user_shadow_theta: float

	class Spherical extends Light
		func extern __init__(pos: vector, c: color, radius: float)

	class Parallel extends Light
		func extern __init__(dir: vector, c: color)

	class Cone extends Light
		func extern __init__(pos: vector, dir: vector, c: color, radius: float, theta: float)

class Particle extends Entity
	var pos, vel: vector
	var radius: float
	var time_to_live: float
	var suicidal: bool
	var texture: nix.Texture*
	var color: color
	var source: rect
	var enabled: bool
	func extern __init__(p: vector, r: float, t: nix.Texture, ttl: float)
	func extern override __delete__()

class Beam extends Particle
	var length: vector
	func extern __init__(p: vector, l: vector, r: float, t: nix.Texture, ttl: float)

class Fog
	var color: color
	var distance: float
	var enabled: bool

class Link extends Entity
	var a, b: Model*
	func extern set_motor(v: float, max: float)
#	extern void set_axis(vector v)
	func extern set_frame(n: int, q: quaternion)

#	class Socket extends Link
#		extern void __init__(Model* a, Model* b, vector pos)
#	...

class World
	var objects: Model*[]
	var terrains: Terrain*[]
	
	var ego: Model*
	
	var lights: Light*[]
	
	var background: color
	var skyboxes: Model*[]
	
	var fog: Fog
	var gravity: vector
	
	var links: Link*[]
	
	enum
		PHYSICS_NONE
		PHYSICS_SIMPLE
		PHYSICS_FULL_INTERNAL
		PHYSICS_FULL_EXTERNAL
	var physics_mode: int
	
	func extern add_light(l: Light)
	func extern add_particle(p: Particle)
	func extern add_sound(s: audio.Sound)
	func extern create_object(filename: Path, pos: vector, ang: quaternion) -> Model*
	func extern create_terrain(filename: Path, pos: vector) -> Terrain*
	func extern set_active_physics(o: Model, active: bool)
	func extern shift_all(dpos: vector)
	func extern get_g(pos: vector) -> vector
	func extern trace(p1: vector, p2: vector, out d: CollisionData, simple_test: bool, ignore: Model*) -> bool
	
#	extern void unregister(void* o) # Model, Link, Light, Particle, Beam
	func extern delete(o: void*)


class ui
	class Node
		func extern __init__(r: rect)
		func extern virtual __delete__()
		func extern __del_override__()
		
		func extern add(n: Node)
		
		func extern virtual on_iterate(dt: float)
		func extern virtual on_enter()
		func extern virtual on_leave()
		func extern virtual on_left_button_down() -> bool
		func extern virtual on_left_button_up() -> bool
		func extern virtual on_middle_button_down() -> bool
		func extern virtual on_middle_button_up() -> bool
		func extern virtual on_right_button_down() -> bool
		func extern virtual on_right_button_up() -> bool
		var x, y: float
		var width, height: float
		func extern set_area(r: rect)
		var _eff_area: rect
		var margin: rect
		var dz: float
		var color: color
		var align: int
		var visible: bool
		var children: Node*[]
		
		enum
			ALIGN_NONE
			ALIGN_FILL_X = 2^0
			ALIGN_FILL_Y = 2^1
			ALIGN_TOP = 2^2
			ALIGN_BOTTOM = 2^3
			ALIGN_LEFT = 2^4
			ALIGN_RIGHT = 2^5
			ALIGN_NONSQUARE = 2^7
			ALIGN_CENTER_H = 2^8
			ALIGN_CENTER_V = 2^9
	
	class HBox extends Node
		func extern __init__()
	
	class VBox extends Node
		func extern __init__()
		
	class Picture extends Node
		func extern __init__(r: rect, tex: Texture)
		func extern __init__(r: rect, tex: Texture, source: rect)
		func extern override __delete__()
		var source: rect
		var texture: Texture*
		var blur: float
		var shader: nix.Shader*

	class Text extends Picture
		func extern __init__(t: string, font_size: float)
		func extern __init__(t: string, font_size: float, x: float, y: float)
		func extern override __delete__()
		var text: string
		var font_size: float
		func extern set_text(t: string)
	
	class Picture3d extends Node
		var model: Model*
		var matrix: matrix
		var world_3d: bool
		var lighting: bool
		func __init__(m: Model*, mat: matrix, z: float)
			super.__init__(rect.ID)
			model = m
			self.matrix = mat

	var extern static toplevel: Node*
	func extern static key(k: int) -> bool
	func extern static key_down(k: int) -> bool
	func extern static key_up(k: int) -> bool

	var extern static mouse, dmouse, scroll: vector

class PerformanceMonitor
	class Average
		var frame_time: float
		var location: float[16]
	var frames: int
	var avg: Average


class NetworkManager
	class Connection
		var s: Socket*
		var buffer: BinaryBuffer*
		func extern start_block(id: string)
		func extern end_block()
		func extern send()
	var cur_con: Connection*
	func extern connect_to_host(host: string) -> Connection*
	func extern event(id: string, e: Entity, f: Entity->void)


# TODO
class audio
	class Sound
		func extern pause(pause: bool)
		func extern play(loop: bool)
		func extern set(pos: vector, vel: vector, r_min: float, r_max: float, speed: float, volume: float)
		func extern stop()
		func extern static emit(filename: Path, pos: vector, r_min: float, r_max: float, speed: float, volume: float, loop: bool) -> Sound*
		func extern static load(filename: Path) -> Sound*
	class Music
		func pause(pause: bool)
		func play(loop: bool)
		func set_rate(rate: float)
		func stop()
	func load_music(filename: Path) -> Music*
	#void save_sound(Path filename, float[] buf_r, float[] buf_l, int freq, int channels, int bits)
	var volume_music: float
	var volume_sounds: float


func extern load_model(filename: Path) -> Model*


var extern tex_white: nix.Texture*
var extern engine: EngineData
var extern world: World
var extern cam: Camera*
var extern perf_mon: PerformanceMonitor*
var extern network: NetworkManager
var extern post_processors: Material*[]

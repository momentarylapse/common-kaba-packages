use os
use net
use kaba

class Vertex
	var p, n: vector
	var u, v: float

class VertexFx
	pos: vector
	col: color
	u, v: float

class FrameBuffer
	var width, height: int
	func extern __init__(att: Texture*[])
	func extern depth_buffer() -> DepthBuffer*
	func extern color_attachments() -> Texture*[]

class Shader

class Texture as shared
	var width, height: int
	func extern __init__(w: int, h: int, format: string = "rgba:i8")
	func extern __delete__()
	#func extern update(im: Image)

class CubeMap extends Texture
	func extern __init__(size: int, format: string)
class DepthBuffer extends Texture
	func extern override __init__(w: int, h: int, format: string)

class VertexBuffer
	func extern __init__(format: string = "3f,3f,2f")
	func extern update(vertices: @DynamicArray)

class EngineData
	var debug: bool
	var show_timings: bool
	var console_enabled: bool
	#bool wire_mode
	var resetting_game, game_running, first_frame: bool
	var physical_aspect_ratio: float
	
	var physics_enabled, collisions_enabled: bool
	var detail_level: float
	
	var elapsed: float
	var elapsed_rt: float
	var time_scale: float
	
	var fps_min, fps_max: float
	var resolution_scale: vec2
	
	var initial_world_file, second_world_file: Path
	#Font* default_font
	var renderer: Renderer*
	var render_path: RenderPath*
	var hdr_renderer: HDRRenderer*
	var post_processor: PostProcessor*

	func extern exit()

class Renderer

class RenderPath
	enum Type
		NONE
		FORWARD
		DEFERRED
	var type: int
	var depth_buffer: DepthBuffer*
	var cube_map: CubeMap*
	var fb_shadow, fb_shadow2: FrameBuffer*
	var shader_fx: Shader*
	var gbuffer: FrameBuffer*

	#func extern virtual render_into_texture(fb: FrameBuffer, cam: Camera)
	#func extern render_into_cubemap(db: DepthBuffer, cube: CubeMap, pos: vector)
	func extern add_fx_injector(f: void->void, transparent: bool)
	func extern draw_user_mesh(vb: VertexBuffer, s: Shader, m: matrix, tex: Texture*[], data: any)

class HDRRenderer
	var fb_main: FrameBuffer*
	var fb_small1, fb_small2: FrameBuffer*

class PostProcessor
	var fb1, fb2: FrameBuffer*
	func extern next_fb(cur: FrameBuffer) -> FrameBuffer*
	func extern process(source: Texture*[], target: FrameBuffer, shader: Shader)
	func extern add_stage(f: FrameBuffer*->FrameBuffer*)

# always let the engine create/delete!
class Component
	func extern __init__()
	func extern virtual __delete__()
	func extern virtual on_init()
	func extern virtual on_delete()
	func extern virtual on_iterate(dt: float)
	func extern virtual on_collide(col: CollisionData)
	func extern set_variables(vars: string)
	var owner: Entity*

func extern get_component_list(t: Class) -> Component*[]*

class Entity
#	extern void __init__()
	func extern virtual __delete__()
	func extern __del_override__()
	func extern virtual on_init()
	func extern virtual on_delete()
	func extern virtual on_iterate(dt: float)
	func extern add_component(t: Class, vars: string) -> Component*
	func extern const get_component(t: Class) -> Component*

class Entity3D extends Entity
	var pos: vector
	var ang: quaternion
	var parent: Entity3D*
	func extern get_matrix() -> matrix
	
	func selfref model() -> Model*
		var m: Model* = get_component(Model)
		return m
	func selfref body() -> SolidBody*
		var b: SolidBody* = get_component(SolidBody)
		return b

class Component3D extends Component
	var override owner: Entity3D*
	use owner

class Controller extends Entity
	func extern override __delete__()
	
	# common
#	extern virtual void on_iterate(float dt)
	func extern virtual on_key_down(key: int)
	func extern virtual on_key_up(key: int)
	func extern virtual on_left_button_down()
	func extern virtual on_left_button_up()
	func extern virtual on_middle_button_down()
	func extern virtual on_middle_button_up()
	func extern virtual on_right_button_down()
	func extern virtual on_right_button_up()
	func extern virtual on_input()
	
	# rare
	func extern virtual on_iterate_pre(dt: float)
	func extern virtual on_draw_pre()
	func extern virtual on_render_inject()

class Camera extends Component3D
	var dest: rect
	var m_view: matrix
	var exposure: float
	var bloom_radius: float
	var bloom_factor: float
	
	var focus_enabled: bool
	var focal_length: float
	var focal_blur: float
	
	var fov: float
	var min_depth, max_depth: float
	
	var show, enabled: bool

	func extern project(p: vector) -> vector
	func extern unproject(p: vector) -> vector
	func extern update_matrices(aspect_ratio: float)

class Material
	var albedo: color
	var roughness: float
	var metal: float
	var emission: color
	var textures: Texture*[]
	var shader: Shader*
	var cast_shadow: bool
	func extern add_uniform(name: string, p: float*, size: int)
	func extern static load(filename: Path) -> Material*

class CollisionData
	var sb: SolidBody*
	var sub: Model*
	var t: Terrain*
	var p, n: vector

class Model extends Component3D
	class Mesh
		class Sub
			var num_triangles: int
			var triangle_index: int[]
			var skin_vertex: float[]
			var normal: vector[]
		var bone_index: int[]
		var vertex: vector[]
		var sub: Sub[]
#	var matrix: matrix
	var name: string
	var radius: float
	var min, max: vector
	
	var materials: Material*[]
	
	var mesh: Mesh*[3]

	func extern override __init__()
	func extern override __delete__()
	
	func extern make_editable()
	func extern begin_edit(detail: int)
	func extern end_edit(detail: int)
#	func extern update_matrix()
	
	func extern get_vertex(index: int) -> vector

class SolidBody extends Component3D
	var vel: vector
	var rot: vector
	var mass: float
	var theta: matrix3
	var physics_active: bool
	var physics_passive: bool
	var g_factor: float
	
	func extern add_force(f: vector, rho: vector = vector.0)
	func extern add_impulse(p: vector, rho: vector = vector.0)
	func extern add_torque(t: vector)
	func extern add_torque_impulse(l: vector)
	func extern update_mass()
	func extern update_motion()

class Collider extends Component3D
class MeshCollider extends Collider
class BoxCollider extends Collider
class SphereCollider extends Collider
class TerrainCollider extends Collider
	
class Animator extends Component3D
	func extern reset()
	func extern add_x(op: int, p1: float, p2: float, move: int, t: float*, dt: float, vel_param: float = 1.0, loop: bool = true) -> bool
	func extern add(op: int, move: int, t: float*, dt: float, loop: bool = true) -> bool
	func extern is_done(op_no: int) -> bool
	enum
		MOVE_OP_SET           # overwrite
		MOVE_OP_SET_NEW_KEYED # overwrite, if current doesn't equal 0
		MOVE_OP_SET_OLD_KEYED # overwrite, if last equals 0
		MOVE_OP_ADD_1_FACTOR  # w = w_old         + w_new * f
		MOVE_OP_MIX_1_FACTOR  # w = w_old * (1-f) + w_new * f
		MOVE_OP_MIX_2_FACTOR  # w = w_old * a     + w_new * b

class Skeleton extends Component3D
	var bones: Entity3D[]
	var pos0, dpos: vector[]
	var parents: int[]
	func extern reset()

class Terrain extends Component3D
	var pattern: vector
	var num_x, num_z: int
	func extern const get_height(p: vector) -> float
	# ...

class Light extends Component3D
	var color: color
	var radius: float
	var theta: float
	var harshness: float
	var enabled: bool
	var allow_shadow: bool
	var user_shadow_control: bool
	var user_shadow_theta: float
	var shadow_dist_min: float
	var shadow_dist_max: float
	func extern set_direction(dir: vector)

#	class Spherical extends Light
#		func extern __init__(pos: vector, c: color, radius: float)
#
#	class Parallel extends Light
#		func extern __init__(ang: quaternion, c: color)
#
#	class Cone extends Light
#		func extern __init__(pos: vector, ang: quaternion, c: color, radius: float, theta: float)

class Particle extends Entity
	var pos, vel: vector
	var radius: float
	var time_to_live: float
	var suicidal: bool
	var texture: Texture*
	var color: color
	var source: rect
	var enabled: bool
	func extern __init__(p: vector, r: float, t: Texture, ttl: float)
	func extern override __delete__()

class Beam extends Particle
	var length: vector
	func extern __init__(p: vector, l: vector, r: float, t: Texture, ttl: float)

class Fog
	var color: color
	var distance: float
	var enabled: bool

class Link extends Entity
	var a, b: Model*
	func extern set_motor(v: float, max: float)
#	extern void set_axis(vector v)
	func extern set_frame(n: int, q: quaternion)

#	class Socket extends Link
#		extern void __init__(Model* a, Model* b, vector pos)
#	...

class World
	var objects: Entity3D*[]
	var terrains: Terrain*[]
	
	var ego: Entity3D*
	
	var lights: Light*[]
	
	var background: color
	var skyboxes: Model*[]
	
	var fog: Fog
	var gravity: vector
	
	var links: Link*[]
	
	enum
		PHYSICS_NONE
		PHYSICS_SIMPLE
		PHYSICS_FULL_INTERNAL
		PHYSICS_FULL_EXTERNAL
	var physics_mode: int
	
	func extern load_soon(filename: Path)
	
	func extern add_light_parallel(ang: quaternion, c: color) -> Light*
	func extern add_light_point(pos: vector, c: color, radius: float) -> Light*
	func extern add_light_cone(pos: vector, ang: quaternion, c: color, radius: float, theta: float) -> Light*
	func extern add_particle(p: Particle)
	func extern add_sound(s: audio.Sound)
	func extern create_object(filename: Path, pos: vector, ang: quaternion) -> Entity3D*
	func extern create_object_no_reg(filename: Path, pos: vector, ang: quaternion) -> Entity3D*
	func extern create_object_multi(filename: Path, pos: vector[], ang: quaternion[]) -> Entity3D*
	func extern create_terrain(filename: Path, pos: vector) -> Terrain*
	func extern create_entity(pos: vector, ang: quaternion) -> Entity3D*
	func extern register_entity(e: Entity3D)
	func extern set_active_physics(o: Model, active: bool)
	func extern shift_all(dpos: vector)
	func extern get_g(pos: vector) -> vector
	func extern trace(p1: vector, p2: vector, out d: CollisionData, simple_test: bool, ignore: Entity3D*) -> bool
	
#	extern void unregister(void* o) # Model, Link, Light, Particle, Beam
#	func extern delete(o: void*)
	
	class MessageData
		var e: Entity3D*
		var v: vector
	var msg_data: MessageData
	
	func extern subscribe(msg: string, f: void->void)


class ui
	class Node
		func extern __init__(r: rect)
		func extern virtual __delete__()
		func extern __del_override__()
		
		func extern add(n: Node)
		
		func extern virtual on_iterate(dt: float)
		func extern virtual on_enter()
		func extern virtual on_leave()
		func extern virtual on_left_button_down() -> bool
		func extern virtual on_left_button_up() -> bool
		func extern virtual on_middle_button_down() -> bool
		func extern virtual on_middle_button_up() -> bool
		func extern virtual on_right_button_down() -> bool
		func extern virtual on_right_button_up() -> bool
		var pos: vec2
		var x, y: float
		var width, height: float
		func extern set_area(r: rect)
		var _eff_area: rect
		var margin: rect
		var dz: float
		var color: color
		var align: int
		var visible: bool
		var children: Node*[]
		
		enum
			ALIGN_NONE
			ALIGN_FILL_X = 2^0
			ALIGN_FILL_Y = 2^1
			ALIGN_TOP = 2^2
			ALIGN_BOTTOM = 2^3
			ALIGN_LEFT = 2^4
			ALIGN_RIGHT = 2^5
			ALIGN_NONSQUARE = 2^7
			ALIGN_CENTER_H = 2^8
			ALIGN_CENTER_V = 2^9
	
	class HBox extends Node
		func extern __init__()
	
	class VBox extends Node
		func extern __init__()
		
	class Picture extends Node
		func extern __init__(r: rect, tex: Texture, source: rect = rect.ID)
		func extern override __delete__()
		var source: rect
		var texture: Texture*
		var blur: float
		var angle: float
		var shader: Shader*
		var shader_data: any

	class Text extends Picture
		func extern __init__(t: string, font_size: float, p: vec2 = vec2.0)
		func extern override __delete__()
		var text: string
		var font_size: float
		func extern set_text(t: string)
	
	class Picture3d extends Node
		var model: Model*
		var matrix: matrix
		var world_3d: bool
		var lighting: bool
		func __init__(m: Model*, mat: matrix, z: float)
			super.__init__(rect.ID)
			model = m
			self.matrix = mat

	var extern static toplevel: Node*
	func extern static key(k: int) -> bool
	func extern static key_down(k: int) -> bool
	func extern static key_up(k: int) -> bool
	func extern static button(b: int) -> bool

	var extern static mouse, dmouse, scroll: vec2
	
	var extern static link_mouse_and_keyboard_into_pad: bool
	
	class Gamepad as shared
		enum
			CROSS
			CIRCLE
			SQUARE
			TRIANGLE
			L1
			R1
			OPTIONS
			SHARE
			PS
			L3
			R3
			UP
			RIGHT
			DOWN
			LEFT
		var deadzone: float
	
		func extern is_present() -> bool
		func extern axis(a: int) -> float
		func extern button(b: int) -> bool
		func extern clicked(b: int) -> bool
	func extern static get_pad(index: int) -> Gamepad shared

class PerformanceMonitor
	class Channel
		var name: string
		var parent: int
		var average: float
	var extern static channels: Channel[]
	var extern static avg_frame_time: float
	var extern static frames: int
	#class Average
	#	var frame_time: float
	#	var location: float[16]
	#var frames: int
	#var avg: Average
#var extern perf_mon: PerformanceMonitor*


class NetworkManager
	class Connection
		var s: Socket*
		var buffer: BinaryBuffer*
		func extern start_block(id: string)
		func extern end_block()
		func extern send()
	var cur_con: Connection*
	func extern connect_to_host(host: string) -> Connection*
	func extern event(id: string, e: Entity, f: Entity->void)


# TODO
class audio
	class Sound extends Entity
		func extern pause(pause: bool)
		func extern play(loop: bool)
		func extern set(pos: vector, vel: vector, r_min: float, r_max: float, speed: float = 1.0, volume: float = 1.0)
		func extern stop()
		func extern static emit(filename: Path, pos: vector, r_min: float, r_max: float, speed: float = 1.0, volume: float = 1.0, loop: bool = false) -> Sound*
		func extern static load(filename: Path) -> Sound*
	class Music extends Entity
		func pause(pause: bool)
		func play(loop: bool)
		func set_rate(rate: float)
		func stop()
	func load_music(filename: Path) -> Music*
	#void save_sound(Path filename, float[] buf_r, float[] buf_l, int freq, int channels, int bits)
	var volume_music: float
	var volume_sounds: float

class Scheduler
	func static extern subscribe(dt: float, f: void->void)

func extern load_model(filename: Path) -> Model*
func extern load_shader(filename: Path) -> Shader*
func extern create_shader(source: string) -> Shader*
func extern load_texture(filename: Path) -> Texture*
func extern get_controller(type: Class) -> Controller*
func extern add_camera(pos: vector, ang: quaternion, r: rect) -> Camera*


var extern tex_white: Texture*
var extern engine: EngineData
var extern world: World
var extern cam: Camera*
var extern network: NetworkManager

use hui
use nix
use os
#import x

class Observable
	int dummy
	
class Observer
	#virtual void OnUpdate(Observable o)

class Data extends Observable
	Path filename
	int file_time
	bool binary_file_format
	int type
	func extern begin_action(name: string)
	func extern end_action()



class MultiView

	class ActionController
		func extern start_action(win: MultiView.Window*, m: vector, constraints: int)
		func extern update_action()
		func extern update_param(param: vector)
		func extern end_action(set: bool)
		vector pos

	class Window
		quaternion local_ang

	class Camera
		vector pos
		quaternion ang

	# "des Pudels Kern", don't change!!!!!!!
	class SingleData
		int view_stage
		bool is_selected, m_delta, m_old, is_special
		vector pos
		
	enum
		ACTION_SELECT
		ACTION_MOVE
		ACTION_ROTATE
		ACTION_ROTATE_2D
		ACTION_SCALE
		ACTION_SCALE_2D
		ACTION_MIRROR
		ACTION_ONCE

	enum
		ACTION_CONSTRAINTS_NONE
		ACTION_CONSTRAINTS_X
		ACTION_CONSTRAINTS_Y
		ACTION_CONSTRAINTS_Z
		ACTION_CONSTRAINTS_XY
		ACTION_CONSTRAINTS_XZ
		ACTION_CONSTRAINTS_YZ

		
	#extern void on_mouse_move()
	#extern void set_mouse_action(string name, int type, bool locked) #"ActionModelAnimationTransformBones", mouse_action, false);
	ActionController* action_con
	MultiView.Window* mouse_win
	MultiView.Window* active_win
	MultiView.Camera cam
	func extern cam_move(dpos: vector)
	func extern cam_rotate(dq: quaternion, cam_center: bool)
	func extern cam_zoom(factor: float, mouse_rel: bool)



const TransparencyModeDefault = -1
const TransparencyModeNone = 0
const TransparencyModeFunctions = 1
const TransparencyModeColorKeyHard = 2
const TransparencyModeColorKeySmooth = 3
const TransparencyModeFactor = 4

# effects
enum
	FXKindScript,
	FXKindLight,
	FXKindFog,
	FXKindSound,
	FXKindForceField

class y
	class Material
		nix.Shader* shader
	class Terrain
	class Model



class Model extends Data
	const MAX_TEXTURES = 8
	const MAX_POLY_VERTICES_PER_FACE = 16
	const MAX_POLY_FACES = 32
	const MAX_POLY_EDGES = 32 * 4


	class Material
		Path filename
		y.Material *material
		int num_textures
		Texture*[Model.MAX_TEXTURES] texture
		string[Model.MAX_TEXTURES] texture_file

		bool user_transparency
		int transparency_mode
		int alpha_source, alpha_destination
		float alpha_factor
		bool alpha_z_buffer

		bool user_color
		color ambient
		color diffuse
		color specular
		color emission
		float shininess
		func __assign__(other: Material)

	class Effect
		int kind, surface, vertex
		int size, speed, intensity
		color[3] colors
		bool inv_quad
		string file
		func __assign__(other: Effect)
			nil


	# only for use in MultiView...
	class SkinVertexDummy extends MultiView.SingleData

	class Ball extends MultiView.SingleData
		int index
		float radius


	# TODO: dynamical!
	class Polyhedron extends MultiView.SingleData
		class Face
			int num_vertices
			int[Model.MAX_POLY_VERTICES_PER_FACE] index
			plane plane
		int num_faces
		Face[Model.MAX_POLY_FACES] face
		int num_svertices
		int[Model.MAX_POLY_FACES * Model.MAX_POLY_VERTICES_PER_FACE] sindex

		# non redundant edge list!
		int num_edges
		int[Model.MAX_POLY_EDGES * 2] edge_index

		# "topology"
		bool[Model.MAX_POLY_EDGES * Model.MAX_POLY_FACES] edge_on_face # [edge * NumFaces + face]
		int[Model.MAX_POLY_FACES * Model.MAX_POLY_FACES] faces_joining_edge # [face1 * NumFaces + face2]



	class Triangle extends MultiView.SingleData
		int[3] vertex
		#int[3] edge
		#int[3] edge_direction # which no of triangle in edge's list are we?
		vector[Model.MAX_TEXTURES][3] skin_vertex
		int[3] normal_index
		vector[3] normal
		vector temp_normal
		bool normal_dirty
		int material


	# triangles belonging to one material
	class SubSkin
		int num_textures # "read only" (updated automatically...)

		# triangles
		Triangle[] triangle


	# geometry
	class Skin
		# general properties
		int normal_mode_all

		# vertices
		Geometry.Vertex[] vertex

		# sub skins
		SubSkin[] sub

	class Bone extends MultiView.SingleData
		int parent
		string model_file
		Model *model
		bool const_pos

		# for editing
		matrix matrix
		func __init__()



	class Move
		enum
			TYPE_NONE
			TYPE_VERTEX
			TYPE_SKELETAL

		class Frame
			# skeleton animation
			vector[] skel_dpos
			vector[] skel_ang

			# vertex animation
			vector[4][] dpos
			vector[] vertex_dpos
			func __assign__(other: Frame)
		
		int type
		Frame[] frame
		float frames_per_sec_const, frames_per_sec_factor
		string name

	class Edge extends MultiView.SingleData
		#int NormalMode;
		int[2] vertex
		int ref_count
		int[2] triangle, side
		bool is_round # for editing
		float weight # for easify'ing

		# constraints:
		#  Vertex[0] = surf.Triangle[Triangle[0]].Vertex[Side[0]]
		#  Vertex[1] = surf.Triangle[Triangle[0]].Vertex[(Side[0] + 1) % 3]
		#  same for Triangle/Side[1] but Vertex[0 <-> 1]


	class __Surface extends MultiView.SingleData
		Geometry.Polygon[] polygon
		Edge[] edge
		int[] vertex
		bool is_physical, is_visible
		bool is_closed

		void *model
		func __init__()

	class MetaData
		# level of detail
		float[3] detail_dist
		int[3] detail_factor
		bool auto_generate_dists
		bool[3] auto_generate_skin

		# physics
		float mass
		bool active_physics, passive_physics
		bool auto_generate_tensor
		matrix3 inertia_tensor

		# object-properties
		string name, description
		Path[] inventary

		# script
		Path script_file
		float[] script_var
		func __assign__(other: MetaData)

	class Selection
		int[] vertex, polygon, edge

	class Mesh
		Geometry.Vertex[] vertex
		Geometry.Polygon[] polygon
		Edge[] edge
	
		# geometry (physical)
		Ball[] ball
	
	# properties
	Bone[] bone


	# properties
	Model.Move[] move

#	int CurrentMove,CurrentFrame

#	bool Playing,PlayLoop
#	float TimeScale,TimeParam,SimFrame

	# geometry
	Mesh* mesh
	Mesh* phys_mesh
#	MultiViewSingleData SkinVertex[] # only temporary...
#	int SkinVertMat, SkinVertTL

	# old geometry
	Skin[4] skin

	
	#ModelPolyhedron Poly[]

	# general properties
	Material[] material

	# effects
	Effect[] fx

	MetaData meta_data
	
	func extern clear_selection()
	func extern selection_from_vertices()
	func extern selection_from_polygons()
	#extern void SelectOnlySurface(ModelSurface s)
	
	func extern add_vertex(pos: vector, bone_index: int, normal_mode: int)
	func extern add_triangle(a: int, b: int, c: int, material: int) -> Geometry.Polygon*
	func extern add_polygon(v: int[], material: int) -> Geometry.Polygon*
	func extern delete_polygon(index: int)
	
	func extern delete_selection(s: Selection, greedy: bool)
	func extern invert_polygons(s: Selection)
	func extern subtract_selection()
#	extern void CutOutSelection()
	func extern convert_selection_to_triangles()
#	extern void AlignToGridSelection(float grid_d)
#	extern void NearifySelectedVertices()
#	extern void CollapseSelectedVertices()
	func extern bevel_selected_vertices(radius: float)
#	extern void FlattenSelectedVertices()
	func extern triangulate_selected_vertices()
	func extern extrude_selected_polygons(offset: float)
#	extern void AutoWeldSelectedSurfaces(float d)
#	extern void SetNormalModeSelection(int mode)
#	extern void SetNormalModeAll(int mode)
#	extern void SetMaterialSelection(int material)
#	extern void Easify(float factor)
	func extern paste_geometry(g: Geometry, default_material: int)
	
	func extern add_animation(index: int, type: int)
	func extern duplicate_animation(source: int, target: int)
	func extern delete_animation(index: int)
	func extern animation_set_data(index: int, name: string, fps_const: float, fps_factor: float)
	func extern animation_add_frame(index: int, frame: int, f: Move.Frame)
	func extern animation_delete_frame(index: int, frame: int)
	func extern animation_set_frame_duration(index: int, frame: int, duration: float)
	func extern animation_set_bone(move: int, frame: int, bone: int, dpos: vector, ang: vector)
	
	func __assign__(other: Model)


class Geometry
	class Vertex extends MultiView.SingleData
		int normal_mode
		int bone_index

		bool normal_dirty
		int ref_count # triangles
		int surface

	class Polygon extends MultiView.SingleData
		class Side
			int vertex
			int edge
			int edge_direction # which no of triangle in edge's list are we?
			vector[Model.MAX_TEXTURES] skin_vertex
			int normal_index
			vector normal
			char[3] triangulation
		Side[] side
		vector temp_normal
		bool normal_dirty, triangulation_dirty
		int material
		func __init__()
		
	Vertex[] vertex
	Polygon[] polygon
	Model.Edge[] edge
	bool is_closed
	
	func extern static subtract(a: Geometry, b: Geometry, out _out: Geometry) -> int
	func extern static and(a: Geometry, b: Geometry, out _out: Geometry) -> int

	enum
		END_OPEN
		END_FLAT
		END_ROUND
		END_LOOP

	class Ball extends Geometry
		func extern __init__(pos: vector, radius: float, num_x: int, num_y: int)

	class Cube extends Geometry
		func extern __init__(pos: vector, dv1: vector, dv2: vector, dv3: vector, num_1: int, num_2: int, num_3: int)

	class Cylinder extends Geometry
		func extern __init__(pos1: vector, pos2: vector, radius: float, rings: int, edges: int, end_mode: int)

	class CylinderComplex extends Geometry
		func extern __init__(pos: vector[], radius: float[], rings: int, edges: int, end_mode: int)

	class Sphere extends Geometry
		func extern __init__(pos: vector, radius: float, num: int)

	class Torus extends Geometry
		func extern __init__(pos: vector, axis: vector, radius1: float, radius2: float, num_x: int, num_y: int)

	class TorusKnot extends Geometry
		func extern __init__(pos: vector, axis: vector, radius1: float, radius2: float, radius3: float, turns: int, twists: int, rings: int, edges: int)

	class Plane extends Geometry
		func extern __init__(pos: vector, dv1: vector, dv2: vector, num_x: int, num_y: int)

	class Platonic extends Geometry
		func extern __init__(pos: vector, radius: float, samples: int)




class World extends Data


	class Terrain extends MultiView.SingleData
		Path filename
		#WorldTerrainVertex Vertex[]
		int vertex_buffer_single
		int show_texture
		bool changed
		y.Terrain* terrain
		func __init__()


	class Object extends MultiView.SingleData
		string filename
		string name
		y.Model* object
		vector ang
		func __init__()


	Object[] objects
	Terrain[] terrains
	int ego_index

	# actions
	func extern add_object(filename: Path, pos: vector) -> Object*
	func extern add_terrain(filename: Path, pos: vector) -> Terrain*
	func extern add_new_terrain(pos: vector, size: vector, num_x: int, num_z: int) -> Terrain*


class Mode
	string name
	MultiView* multi_view

class Edward
	Mode* cur_mode

class shader
	enum
		TYPE_FLOAT
		TYPE_INT
		TYPE_VEC2
		TYPE_VEC3
		TYPE_COLOR
		TYPE_LITERAL # ...

	class BuilderContext
		func extern create_temp(source: Node, port: int, type: int) -> string
		func extern create_out(source: Node, port: int) -> string
		func extern find_temp(source: Node, port: int, wanted_type: int) -> string
		func extern build_value(n: Node, i: int, internal: string) -> string
		func value(n: Node, i: int) -> string
			return build_value(n, i, "")
		func extern build_const(n: Node, i: int) -> string

	class Node extends Object
		func extern __init__(t: string)
		func extern override __delete__()
		func __assign__(n: Node)
			pass
		int x, y
		string type
	
		class Parameter
			int type
			string name
			string value
			string options
			func __init__()
			func __init__(t: int, n: string, v: string, o: string)
				type = t
				name = n
				value = v
				options = o
		Parameter[] params


		class Port
			int type
			string name
			func __init__()
			func __init__(t: int, n: string)
				type = t
				name = n
		Port[] output
	
		func extern virtual const dependencies() -> string[]
		func extern virtual const uniform_dependencies() -> string[]
		func extern virtual const code_pixel(out ctx: BuilderContext) -> string

extern Model* model
extern World* world
extern Window* edward
extern Edward* ed


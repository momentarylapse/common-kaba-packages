#----------------------------------------------------------------------#
#                                                                      #
# header for Tsunami plugin api                                        #
#                                                                      #
#    (c) by MichiSoft TM 2010                                          #
#                                                                      #
# Don't even think of changing anything within this file!              #
#    (unless you dare dying a cruel death)                             #
#                                                                      #
#----------------------------------------------------------------------#

use hui
use kaba
use os

const NUM_PEAK_LEVELS = 24

const DEFAULT_SAMPLE_RATE = 44100

const MAX_PITCH = 128

class Range
	var offset, length: int
	func extern const start() -> int
	func extern const end() -> int
	func const inside(pos: int) -> bool
		return pos >= offset and pos < offset + length
	func extern const overlaps(o: Range) -> bool
	func extern const covers(o: Range) -> bool
	func extern const __and__(o: Range) -> Range
	func extern const __str__() -> string
	#	return "({{offset}}:{{end()}})"
	#const Range ALL = Range(-1000000000, 2000000000)
func const RangeTo(start: int, end: int) -> Range
	return Range(start, end - start)


class MidiNote as shared
	var range: Range
	var pitch: float
	var volume: float
	var stringno = -1
	var clef_position = -1
	var modifier = 0
	var flags = 0
	func __init__()
	func __init__(r: Range, _pitch: float, _volume: float)
		range = r
		pitch = _pitch
		volume = _volume
	func extern set(mask: int)
	func extern const is(mask: int) -> bool
	func extern const copy(offset: int) -> MidiNote*

class MidiEvent
	var pos: int
	var pitch: float
	var volume: float
	var flags = 0
	var stringno = -1
	var clef_position = -1
	func __init__()
	func __init__(_pos: int, _pitch: float, _volume: float)
		pos = _pos
		pitch = _pitch
		volume = _volume
	func const __str__() -> string
		return "({{pos}}, {{pitch}}, {{volume}})"

class MidiEventBuffer extends MidiEvent[]
	var samples: int
	func extern override __init__()
	func extern const get_notes(r: Range) -> MidiNoteBuffer
	func extern const get_events(r: Range) -> MidiEvent[]
	func extern const get_range() -> Range
	func add_note(n: MidiNote)
		add(MidiEvent(n.range.offset, n.pitch, n.volume))
		add(MidiEvent(n.range.end(), n.pitch, 0))
	func extern add_metronome_click(pos: int, level: int, volume: float)

class MidiNoteBuffer extends MidiNote shared[]
	var samples: int
	func extern override __init__()
	func extern override __delete__()
	#extern selfref MidiNoteBuffer get_notes(Range r)
	func extern selfref get_notes(r: Range) -> MidiNote*[]
	func extern selfref get_events(r: Range) -> MidiEvent[]
	func extern const get_range() -> Range


class ConfigPanel extends Panel
	func extern __init__(c: Module)
	func extern override __delete__()
	func extern virtual update()
	func extern virtual set_large(large: bool)
	func extern changed()
	var c: Module*

class Module as shared extends Object
	var name: string
	var session: Session*
	#var port_out: owned Port[]
	var port_out: Port*[]
	func extern __init__(type: int, sub_type: string)
	func extern override __delete__()
	func __assign__(o: Module)
		pass
	func extern reset_config()
	func extern virtual reset_state()
	func extern changed()
	func extern virtual command(cmd: int, param: int) -> int
	func extern plug_in(in_port: int, source: Module, out_port: int)
	func extern unplug_in(in_port: int)
	func extern subscribe(handler: Object, f: Object->void, message: string)
	func extern unsubscribe(handler: Object)
	func extern const copy() -> Module*
	
	class Port
		func extern __init__()
		func extern virtual __delete__()
		func extern virtual read_audio(out buf: AudioBuffer) -> int
		func extern virtual read_midi(out midi: MidiEventBuffer) -> int
		func extern virtual read_beats(out beats: Beat[], samples: int) -> int
		
	class Config
		func extern __init__()
		func extern virtual __delete__()
		func extern virtual reset()
		func extern const to_string() -> string
		func extern from_string(s: string, session: Session)
		func extern virtual auto_conf(name: string) -> string

	func extern virtual create_panel() -> ConfigPanel*
	func extern virtual on_config()
	func extern virtual get_config() -> Module.Config*
	func extern const config_to_string() -> string
	func extern const config_to_any() -> any
	func extern config_from_string(version: int, s: string)
	func extern config_from_any(version: int, a: any)

	const VERSION_LATEST = -1
	const VERSION_LEGACY = -2

	enum Command
		START
		STOP
		PREPARE_START
		ACCUMULATION_START
		ACCUMULATION_STOP
		ACCUMULATION_CLEAR
		ACCUMULATION_GET_SIZE
		SUCK

	enum Type
		AUDIO_SOURCE
		AUDIO_EFFECT
		MIDI_SOURCE
		MIDI_EFFECT
		SYNTHESIZER
		BEAT_SOURCE
		AUDIO_VISUALIZER
		STREAM
		PITCH_DETECTOR
		PLUMBING
		SIGNAL_CHAIN

class AudioEffect extends Module
	var apply_to_whole_buffer: bool
	var source: Module.Port*
	func extern __init__()
	func extern override __delete__()
	func extern virtual process(out buf: AudioBuffer)
	func extern virtual read(out buf: AudioBuffer) -> int

class MidiEffect extends Module
	func extern __init__()
	func extern override __delete__()
	func extern virtual process(out midi: MidiNoteBuffer)

class AudioVisualizer extends Module
	var chunk_size: int
	var ring_buffer: RingBuffer*
	var next_writing: int
	var current_reading: int
	func extern __init__()
	func extern override __delete__()
	func extern virtual process(out buf: AudioBuffer)
	func extern set_chunk_size(chunk_size: int)
	func extern lock()
	func extern unlock()
	func extern flip()

class AudioBuffer
	var offset, length: int
	var channels: int
	#var l, r: float[]
	var c: float[][]
	var peaks: string[]
	func extern __init__()
	func extern __delete__()
	func extern __assign__(other: AudioBuffer)
	func extern clear()
	func extern const range() -> Range
	func extern resize(length: int)
	func extern set_channels(channels: int)
	func extern set(source: AudioBuffer, target_offset: int, volume: float)
	func extern add(source: AudioBuffer, offset: int, volume: float)
	#extern void mix_stereo(float volume, float panning)
	func extern set_as_ref(source: AudioBuffer, offset: int, length: int)
	func extern selfref __subarray__(start: int, end: int) -> AudioBuffer
	func extern const get_spectrum(out spec_r: complex[], out spec_l: complex[], samples: int)
	func scale(factor: float)
		for cc in c
			cc *= factor
	func __imul__(f: float[])
		for cc in c
			cc *= f
	func auto_generate_channels()
		if channels > 1
			c[1] = c[0]

func extern interpolate_buffer(in: AudioBuffer, out _out: AudioBuffer, method: int)

class RingBuffer
	func extern __init__(size: int)
	func extern const available() -> int
	func extern read(out b: AudioBuffer)
	func extern write(b: AudioBuffer)
	func extern read_ref(out b: AudioBuffer, size: int)
	func extern read_ref_done(b: AudioBuffer)
	func extern peek(out b: AudioBuffer, size: int, mode: int)
	func extern write_ref(b: AudioBuffer, size: int)
	func extern write_ref_done(b: AudioBuffer)
	func extern clear()
	func __assign__(o: RingBuffer)
	enum PeekMode
		FORWARD_REF
		FORWARD_COPY_WRAP
		BACKWARD_REF
		BACKWARD_COPY_WRAP


# general "interface"

class AudioSource extends Module
	func extern __init__()
	func extern override __delete__()
	func extern virtual read(out buf: AudioBuffer) -> int

class MidiProduceData
	var bar: Bar*
	var beat_no: int

class MidiSource extends Module
	func extern __init__()
	func extern override __delete__()
	func extern virtual read(out midi: MidiEventBuffer) -> int
	# crappy experimental note api:
	func extern virtual on_produce(data: MidiProduceData) -> bool
	func extern note(pitch: float, volume: float, beats: int)
	func extern skip(beats: int)
	func extern note_x(pitch: float, volume: float, beats: int, sub_beats: int, beat_partition: int)
	func extern skip_x(beats: int, sub_beats: int, beat_partition: int)
	var bh_midi: MidiEventBuffer*
	#extern void set_beat_source(BeatPort *source)

class PitchDetector extends MidiSource
	var frequency, volume: float
	var pitch: int
	var loud_enough: bool
	func extern override __init__()
	func extern override read(out midi: MidiEventBuffer) -> int
	func extern virtual process(out midi: MidiEventBuffer, buf: AudioBuffer)

class PitchRenderer
	func extern __init__(synth: Synthesizer, pitch: int)
	func extern virtual __delete__()
	func __assign__(o: PitchRenderer)
		pass
	func extern virtual render(out buf: AudioBuffer) -> bool
	#extern virtual void on_event(MidiEvent e)
	func extern virtual on_start(volume: float)
	func extern virtual on_end()
	func extern virtual on_config()
	var pitch: int
	var delta_phi: float
	var synth: Synthesizer*

class Synthesizer extends Module
	var sample_rate: int
	var keep_notes: int
	var freq: float[MAX_PITCH]
	var delta_phi: float[MAX_PITCH]
	var active_pitch: int[]
	var auto_generate_stereo: bool
	var render_by_ref: bool
	var events: MidiEventBuffer
	func extern __init__()
	func extern override __delete__()
	func extern virtual render(out buf: AudioBuffer)
	func extern override on_config()
	func extern override reset_state()
	func extern virtual create_pitch_renderer(pitch: int) -> PitchRenderer*
	func extern set_sample_rate(sample_rate: int)

class DummySynthesizer extends Synthesizer
	func extern override __init__()
	#extern overwrite void __delete__()
	func extern override render(out buf: AudioBuffer)
	func extern override create_pitch_renderer(pitch: int) -> PitchRenderer*

class EnvelopeADSR
	func extern __init__()
	func extern set(t_attack: float, t_decay: float, sustain: float, t_release: float, sample_rate: int)
	func extern set2(initial: float, peak: float)
	func extern reset()
	func extern start(volume: float)
	func extern end()
	func extern get() -> float
	func extern read(n: int) -> float[]
	var just_killed: bool


class BeatSource extends Module
	func extern __init__()
	func extern override __delete__()
	func extern virtual read(out beats: Beat[], samples: int) -> int
	func extern virtual const beats_per_bar() -> int
	func extern virtual const cur_beat() -> int
	func extern virtual const cur_bar() -> int
	func extern virtual const beat_fraction() -> float

class BeatMidifier extends MidiSource
	func extern override __init__()
	#extern override void __delete__()
	func extern override read(out midi: MidiEventBuffer) -> int
	var volume: float

class AudioAccumulator extends Module
	var samples_skipped: int
	var buffer: AudioBuffer

class MidiAccumulator extends Module
	var buffer: MidiEventBuffer

class TrackRenderBuffer
	var dummy: int

class TrackMarker as shared
	func __init__(r: Range, t: string)
		range = r
		text = t
	var range: Range
	var text: string
	var fx: AudioEffect shared[]


#class BarPattern
#	int length
#	int divisor
#	int[] beats

class Bar as shared
	var beats: int[]
	var divisor: int
	var total_sub_beats: int
	var index: int
	var index_text: int
	var length: int
	var offset: int
	func __init__()
	func extern __init__(length: int, beats: int, sub_beats: int)
	func extern const bpm(sample_rate: float) -> float
	func extern const range() -> Range
	enum EditMode
		IGNORE
		INSERT_SILENCE
		STRETCH
		STRETCH_AND_SCALE_AUDIO


class Beat
	var range: Range
	var bar_index: int
	var bar_no = 0
	var beat_no = 0
	var level: int

	func __init__()
	func __init__(_offset: int, _level: int)
		range = Range(_offset, 0)
		level = _level

class BarCollection extends Bar shared[]
	func extern selfref get_bars(r: Range) -> Bar*[]
	func extern selfref get_beats(r: Range, include_hidden: bool, include_sub_beats: bool, sub_beat_partition: int) -> Beat[]
	func extern const get_next_beat(pos: int) -> int
	func extern const get_prev_beat(pos: int) -> int

class TrackLayer as shared
	var type: int
	var track: Track*
	var buffers: AudioBuffer[]
	var midi: MidiNoteBuffer
	var samples: SampleRef shared[]
	var markers: TrackMarker shared[]
	
	func extern get_buffers(out buf: AudioBuffer, r: Range)
	func extern read_buffers(out buf: AudioBuffer, r: Range, allow_ref: bool)
	func extern edit_buffers(out buf: AudioBuffer, r: Range) -> void*
	func extern edit_buffers_finish(a: void*)
	func extern insert_midi_data(offset: int, midi: MidiNoteBuffer)
	func extern add_midi_note(n: MidiNote*)
	#extern void add_midi_notes(MidiNoteBuffer midi)
	func extern delete_midi_note(n: MidiNote*)
	func extern add_sample_ref(pos: int, sample: Sample*) -> SampleRef*
	func extern delete_sample_ref(ref: SampleRef*)
	func extern edit_sample_ref(ref: SampleRef*, volume: float, mute: bool)
	func extern add_marker(m: TrackMarker) -> TrackMarker*
	func extern delete_marker(marker: TrackMarker*)
	func extern edit_marker(marker: TrackMarker*, range: Range, text: string)

class Sample as shared # TODO
	var name: string
	var type: int
	var buf: AudioBuffer*
	var midi: MidiNoteBuffer
	var volume: float
	var uid: int
	var ref_count: int
	var tags: Tag[]
	func extern __init__(name: string, buf: AudioBuffer)
	func extern create_ref() -> SampleRef*
	func extern const get_value(key: string) -> string
	func extern set_value(key: string, value: string)

class SampleRef as shared
	var origin: Sample shared
	func extern __init__(sam: Sample shared)
	func extern virtual __delete__()


enum SignalType
	AUDIO
	TIME
	MIDI
	AUDIO_MONO
	AUDIO_STEREO
	GROUP

class Instrument
	var type: int
	var string_pitch: int[]

class Track as shared
	var type: int
	var name: string
	var layers: TrackLayer shared[]

	var volume, panning: float
	var muted: bool
	
	var fx: AudioEffect shared[]
	var midi_fx: MidiEffect shared[]
	
	var synth: Synthesizer shared
	var instrument: Instrument

	# editing
	var song: Song*
	
	func extern const nice_name() -> string

	#TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	func extern set_name(name: string)
	func extern set_muted(muted: bool)
	func extern set_volume(volume: float)
	func extern set_panning(panning: float)
	func extern add_effect(effect: AudioEffect)
	func extern delete_effect(index: int)
	func extern edit_effect(index: int)
	func extern enable_effect(index: int, enabled: bool)
	func extern set_synthesizer(synth: Synthesizer)

class Tag
	var key, value: string

class Song as shared
	var filename: Path
	var tags: Tag[]
	var sample_rate: int

	var volume: float
	
	var tracks: Track shared[]
	var samples: Sample shared[]
	
	var bars: BarCollection

	var secret_data: any
	
	func extern __init__(session: Session, sample_rate: int)
	func extern virtual __delete__()
	
	func extern const range() -> Range
	func extern selfref time_track() -> Track*
	func extern selfref layers() -> TrackLayer*[]
	
	func extern add_track(type: int, index: int) -> Track*
	func extern delete_track(index: int)
	func extern add_bar(index: int, b: Bar, mode: int)
	func extern add_pause(index: int, length: int, mode: int)
	func extern edit_bar(index: int, b: Bar, mode: int)
	func extern delete_bar(index: int, affect_midi: bool)
	func extern add_sample(s: Sample)
	func extern delete_sample(s: Sample)
	
	func extern undo() -> bool
	func extern redo() -> bool
	func extern reset_history()
	func extern begin_action_group(name: string)
	func extern end_action_group()
	
	func extern const get_time_str(t: int) -> string
	func extern const get_time_str_fuzzy(t: int, dt: float) -> string
	func extern const get_time_str_long(t: int) -> string

class SongSelection
	var range_raw: Range
	func extern const range() -> Range
	func extern const has_track(t: Track) -> bool
	func extern const has_layer(t: TrackLayer) -> bool
	func extern const has_marker(m: TrackMarker) -> bool
	func extern const has_note(n: MidiNote) -> bool
	func extern const has_bar(b: Bar) -> bool

class ColorScheme
	var background: color
	var background_track: color
	var background_track_selected: color
	var text: color
	var text_soft1: color
	var text_soft2: color
	var text_soft3: color
	var grid: color
	var selection: color
	var hover: color
	var blob_bg: color
	var blob_bg_selected: color
	var blob_bg_hidden: color
	var pitch: color[12]
	func extern static pitch_color(p: int) -> color
	func extern const hoverify(c: color) -> color

class SceneGraph
	class Node as shared
		var area: rect

class AudioView extends Object
	class ViewPort
		func extern __init__(view: AudioView*)
		func extern const range() -> Range
		func extern set_range(r: Range)
		func extern sample2screen64(s: float64) -> float64
		func extern sample2screen(s: float) -> float
		func extern screen2sample64(s: float64) -> float64
		func extern screen2sample(s: float) -> float
		var area: rect
	
	class Layer extends SceneGraph.Node
		var layer: TrackLayer*
		
	var sel: SongSelection
	var renderer: SongRenderer*
	var signal_chain: SignalChain*
	var output_stream: AudioOutput*
	var cam: ViewPort
	func extern subscribe(handler: Object, f: Object->void, message: string)
	func extern unsubscribe(handler: Object)
	func extern prepare_playback(r: Range, allow_loop: bool)
	func extern play()
	func extern is_playback_active() -> bool
	func extern is_paused() -> bool
	func extern playback_pos() -> int
	func extern set_playback_pos(pos: int)
	func extern set_playback_loop(loop: bool)
	func extern optimize_view()
	func extern cur_vlayer() -> Layer*
	func extern cur_vtrack() -> void*
	func extern update_selection()

class SongRenderer extends AudioSource
	func extern __init__(s: Song)
	func extern override __delete__()
	func extern render(r: Range, out buf: AudioBuffer)
	func extern set_range(r: Range)
	func extern set_loop(l: bool)
	func extern override read(out b: AudioBuffer) -> int
	#extern override void reset_state()
	func extern const range() -> Range
	func extern const get_pos(delta: int) -> int
	func extern set_pos(pos: int)
	func extern selfref get_beat_source() -> BeatSource*


class AudioOutput extends Module
	func extern __init__(session: Session)
	func extern override __delete__()
	func extern stop()
	func extern start()
	func extern const is_playing() -> bool
	func extern const get_volume() -> float
	func extern set_volume(volume: float)
	func extern const samples_played() -> int

class AudioInput extends Module
	var current_buffer: RingBuffer
	var buffer: AudioBuffer
	func extern __init__(session: Session)
	func extern override __delete__()
	func extern start() -> bool
	func extern stop()
	func extern const is_capturing() -> bool
	func extern const sample_rate() -> int
	func extern const samples_recorded() -> int

class Storage
	func extern load(out s: Song, filename: Path) -> bool
	func extern save(s: Song, filename: Path) -> bool
	func extern save_via_renderer(source: Module.Port, filename: Path, num_samples: int, tags: Tag[]) -> bool
	func extern load_buffer(out buf: AudioBuffer, filename: Path) -> bool
	var current_directory: Path

# create via Session.add_signal_chain()
class SignalChain extends Module
	func extern __init__(session: Session, name: string)
	func extern override __delete__()
	func extern __del_override__()
	func extern override command(cmd: int, param: int) -> int
	func extern override reset_state()
	func extern add(type: int, name: string) -> Module*
	func extern _add(m: Module) -> Module*
	func extern delete(m: Module)
	func extern connect(source: Module, source_port: int, target: Module, target_port: int)
	func extern disconnect(source: Module, source_port: int, target: Module, target_port: int)
	func extern start()
	func extern stop()
	func extern const is_prepared() -> bool
	func extern const is_active() -> bool
	func extern set_update_dt(dt: float)
	func extern set_buffer_size(size: int)

class Session as shared extends Object
	var id: int
	#var win: TsunamiWindow*
	var win: Window*
	var song: Song*
	var view: AudioView*
	var storage: Storage*
	
	func extern const sample_rate() -> int
	
	#DeviceManager* device_manager
	#PluginManager* plugin_manager
	
	func extern const create_child() -> Session*
	func extern create_signal_chain(name: string) -> SignalChain*
	func extern load_signal_chain(filename: Path) -> SignalChain*

	# logging
	func extern const i(msg: string)
	func extern const w(msg: string)
	func extern const e(msg: string)


#class PluginContext
#	Song *song
#	Track *track
#	int track_no
#	int layer
#	Range range

class Slider
	func extern __init__(panel: Panel, id_slider: string, id_edit: string, v_min: float, v_max: float, factor: float, func: Object->void, value: float)
	func extern virtual __delete__()
	func extern get() -> float
	func extern set(f: float)

class TsunamiPlugin extends Module
	func extern __init__()
	func extern override __delete__()
	func extern virtual on_start()
	func extern virtual on_stop()
	func extern virtual on_draw_post(p: Painter)
	func extern stop()
	var args: string[]

class SongPlugin extends Object
	func extern override __init__()
	func extern override __delete__()
	func extern virtual apply()
	var session: Session*
	var song: Song*

#class Progress
#	extern void __init__(string title, Window *parent)
#	virtual extern void __delete__()
#	extern void set(string msg, float progress)
class ProgressX
	func extern __init__(title: string, parent: Window)
	func extern virtual __delete__()
	func extern set(msg: string, progress: float)
	func extern cancel()
	func extern const is_cancelled() -> bool

class Clipboard
	var temp: Song*
	func extern const has_data() -> bool
	func extern prepare_layer_map(view: AudioView, out sources: TrackLayer*[], out targets: TrackLayer*[]) -> bool


enum MidiMode
	MIDI_LINEAR
	TAB
	CLASSICAL
	DRUM
	DONT_CARE

class HoverData
	

class MidiPainter
	#extern void __init__(AudioView* view)
	func extern __init__(song: Song, cam: AudioView.ViewPort, sel: SongSelection*, hover: HoverData*, colors: ColorScheme)
	func extern set_context(area: rect, i: Instrument, playable: bool, mode: int)
	func extern draw(p: Painter, midi: MidiNoteBuffer)
	func extern draw_background(c: Painter)
	var cam: AudioView.ViewPort*

class GridColors
	var bg, bg_sel: color
	var fg, fg_sel: color

class GridPainter
	func extern __init__(song: Song, cam: AudioView.ViewPort, sel: SongSelection*, hover: HoverData*, colors: ColorScheme)
	func extern set_context(area: rect, col: GridColors)
	func extern draw_empty_background(p: Painter)
	func extern draw_bars(p: Painter, partition: int)
	func extern draw_bar_numbers(p: Painter)
	func extern draw_time(p: Painter)
	func extern draw_time_numbers(p: Painter)

class MultiLinePainter
	func extern __init__(song: Song, c: ColorScheme)
	func extern __delete__()
	func extern set_context(conf: any, page_width: float, avg_samples_per_line: float)
	func extern set(conf: any)
	func extern draw_next_line(p: Painter, out offset: int, pos: vec2) -> float
	func extern next_line_samples(offset: int) -> int
	func extern get_line_dy() -> float


#extern PluginContext plugin_context
var extern colors: ColorScheme

var extern clipboard: Clipboard*

func extern db2amp(db: float) -> float
func extern amp2db(amp: float) -> float


func extern fft_c2c(in: complex[], out _out: complex[], inverse: bool)
func extern fft_r2c(in: float[], out _out: complex[])
func extern fft_c2r_inv(in: complex[], out _out: float[])

func extern CreateModule(session: Session, type: int, name: string) -> Module*
func extern CreateSynthesizer(session: Session, name: string) -> Synthesizer*
func extern CreateAudioSource(session: Session, name: string) -> AudioSource*
func extern CreateAudioEffect(session: Session, name: string) -> AudioEffect*
func extern CreateMidiSource(session: Session, name: string) -> MidiSource*
func extern CreateMidiEffect(session: Session, name: string) -> MidiEffect*
func extern CreateBeatMidifier(session: Session) -> BeatMidifier*
func extern CreateBeatSource(session: Session, name: string) -> BeatSource*
func extern SelectSample(session: Session, panel: Panel, old: Sample*) -> Sample*
#extern void SetTempBackupFilename(Path filename)

func extern ChooseModule(parent: Panel, session: Session, type: int, old_name: string) -> string

func extern draw_boxed_str(c: Painter, p: vec2, str: string, col_text: color, col_bg: color)

#extern void get_style_colors(Panel p, string id, color{} colors)
func extern get_style_colors(p: Panel, id: string, colors: (string,color)[])

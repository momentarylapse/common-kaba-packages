use kaba.*
use os
use time
use common.*
use doc
use wiki
use docu

func wiki_upload(name: string, wiki: string)
	os.fs.write_text(name + ".txt", wiki)


func make_documentation()
	wiki_upload("kaba reference", wiki.render_reference())

	for p in default_context.packages
		make_module(p, p.name, "", [])

	let external_packages = find_external()
	for p in external_packages
		for m in p.main
			make_module(m, p.name, "", p.sub_modules)

	let external_libs = find_external_libs()
	for _p in external_libs
		for p in _p
			make_module(p, p.name, "", [])

func get_func_alternatives(all: Function&[], f: Function) -> Function&[]
	return all |> filter(ff => ff.name == f.name)


func make_class(c: Class, ns: string)
	wiki_upload("kaba.{{ns}}.{{c.name}}", wiki.render_class(ns, c))

	let funcs = filter_funcs(c.functions, c)
	for f in funcs
		wiki_upload("kaba.{{ns}}.{{c.name}}.{{f.name}}", wiki.render_func("{{ns}}.{{c.name}}", f, get_func_alternatives(funcs, f)))
	let classes = filter_classes(c.classes)
	for cc in classes
		make_class(cc, "{{ns}}.{{c.name}}")

func make_module(p: Module, name: string, _ns: string, sub_modules: (string,shared[Module])[])
	var ns = name
	if _ns != ""
		ns = "{{_ns}}.{{name}}"
	print("MAKE MOD {{name}}   {{ns}}")
	wiki_upload("kaba.{{ns}}", wiki.render_module(p, name, _ns, sub_modules))

	let classes = filter_classes(p.classes())
	for c in classes
		make_class(c, ns)

	let funcs = filter_funcs(p.functions(), p.base_class())
	for f in funcs
		wiki_upload("kaba.{{ns}}.{{f.name}}", wiki.render_func(ns, f, get_func_alternatives(p.functions(), f)))

	let vars = p.variables()
	for v in vars
		wiki_upload("kaba.{{ns}}.{{v.name}}", wiki.render_var(ns, v))
	
	for m in sub_modules
		for mm in m[1]
			make_module(mm, m[0], ns, [])


func main(arg: string[])
	find_external()
	find_external_libs()
	if len(arg) > 0
		if arg[0] == "prepare"
			docu.report_missing = true
			docu.prepare("doc")
	else
		make_documentation()


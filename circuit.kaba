use linalg


class Node
	float phi
	complex pos
	void __init__(complex p)
		phi = 0
		pos = p

enum
	TYPE_CABLE
	TYPE_SOURCE
	TYPE_RESISTOR
	TYPE_CAPACITOR
	TYPE_INDUCTOR
	TYPE_DIODE
	NUM_TYPES

string edge_name(int t)
	if t == TYPE_CABLE
		return "Cable"
	if t == TYPE_SOURCE
		return "Source"
	if t == TYPE_RESISTOR
		return "Resistor"
	if t == TYPE_CAPACITOR
		return "Capacitor"
	if t == TYPE_INDUCTOR
		return "Inductor"
	if t == TYPE_DIODE
		return "Diode"
	return "???"

int edge_type(string s)
	for i in 0:NUM_TYPES
		if s == edge_name(i)
			return i
	return -1
	

# ARGH
float[] empty()
	float[] r
	return r

class Edge
	int type
	int a, b
	float I, U
	float[4] param
	void __init__(int _type, int[] n, float[] p)
		type = _type
		a = n[0]
		b = n[1]
		for pp,i in p
			param[i] = pp
	void __assign__(Edge o)
		pass
	virtual float g(float dt)
		return 0.0
	virtual float I_off(float dt)
		return 0.0
	virtual void update(Node[] nodes, float dt)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)
	virtual void iterate(float dt)
		pass
	virtual void reset_state()
	virtual string[] param_names()
		string[] r
		return r

class Cable extends Edge
	void __init__(int[] n)
		super.__init__(TYPE_CABLE, n, empty())
	override float g(float dt)
		return 1000
	override void update(Node[] nodes, float dt)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)

class Source extends Edge
	void __init__(int[] n, float i)
		super.__init__(TYPE_SOURCE, n, [i, 10000.0])
	override float g(float dt)
		return 1 / param[1]
	override float I_off(float dt)
		return -param[0]
	override void update(Node[] nodes, float dt)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt) + param[0]
	override string[] param_names()
		return ["I", "R"]

class Resistor extends Edge
	void __init__(int[] n, float R)
		super.__init__(TYPE_RESISTOR, n, [R])
	override float g(float dt)
		return 1 / param[0]
	override void update(Node[] nodes, float dt)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)
	override string[] param_names()
		return ["R"]

class Capacitor extends Edge
	float U_prev
	void __init__(int[] n, float C)
		super.__init__(TYPE_CAPACITOR, n, [C])
		U_prev = 0
	override float g(float dt)
		return param[0] / dt
	override float I_off(float dt)
		return U_prev * param[0] / dt
	override void update(Node[] nodes, float dt)
		U = nodes[a].phi - nodes[b].phi
		I = (U - U_prev) * g(dt)
	override void iterate(float dt)
		U_prev = U
	override string[] param_names()
		return ["C"]
	override void reset_state()
		U_prev = 0

class Inductor extends Edge
	float I_prev
	void __init__(int[] n, float L)
		super.__init__(TYPE_INDUCTOR, n, [L])
		I_prev = 0
	override float g(float dt)
		return dt / param[0]
	override float I_off(float dt)
		return -I_prev
	override void update(Node[] nodes, float dt)
		U = nodes[a].phi - nodes[b].phi
		I = I_prev + U * g(dt)
	override void iterate(float dt)
		I_prev = I
	override string[] param_names()
		return ["L"]
	override void reset_state()
		I_prev = 0

#const float DIODE_DEFAULT_VT = 0.02585
#const float DIODE_DEFAULT_IS = 0.0000000001
const float[] DIODE_DEFAULT_PARAMS = [0.02585, 0.0-23.0258, 1.5]

class Diode extends Edge
	float u_low, u_high
	float i_low, i_high
	float g_low, g_high
	void __init__(int[] n)
		super.__init__(TYPE_DIODE, n, DIODE_DEFAULT_PARAMS)
		U = param[0]
		u_low = -0.5
		u_high = 1
		g_high = (I_sch(u_high+0.01) - I_sch(u_high)) / 0.01
		g_low = (I_sch(u_low+0.1) - I_sch(u_low)) / 0.1
		#0.000001
		i_high = I_sch(u_high) - u_high*g_high
		i_low = I_sch(u_low) - u_low*g_low
	override string[] param_names()
		return ["V_t", "ln(I_s)", "q"]
	float I_sch(float u)
		return exp(param[1]) * (exp(u / param[2] / param[0]) - 1)
	float I_id(float u)
		if u > u_high
			return u*g_high + i_high
		if u < u_low
			return u*g_low + i_low
		return exp(param[1]) * (exp(u / param[2] / param[0]) - 1)
	override float g(float dt)
		if U > u_high
			return g_high
		if U < u_low
			return g_low
		return exp(param[1] + U / param[2] / param[0]) / (param[2]*param[0])
	override float I_off(float dt)
		if U > u_high
			return -i_high
		if U < u_low
			return -i_low
		return g(dt) * U - I_id(U)
	override void update(Node[] nodes, float dt)
		U = nodes[a].phi - nodes[b].phi
		I = I_id(U)

class SimResult
	float[][] U, I
	float[][] phi
	void clear()
		U.clear()
		I.clear()
		phi.clear()

class Circuit
	Node[] nodes
	Edge*[] edges
	int out
	
	void __init__()
		reset_default()
		
	void clear()
		nodes.clear()
		out = 1
		for e in edges
			delete e
		edges.clear()
	
	void reset_default()
		clear()
		nodes.add(Node(complex(0.2, 0.3)))
		nodes.add(Node(complex(0.2, 0.7)))
	
	void reset_state()
		for e in edges
			e.reset_state()
	
	void quick_out()
		string s
		for e in edges
			s += "" + e.U + "\t" + e.I + "\t"
		print(s)

	void create_G(Matrix G, float dt)
		int n = len(nodes)-1
		G.clear(n,n)
		for e in edges
			int a = e.a-1
			int b = e.b-1
			float g = e.g(dt)
			if a >= 0 and b >= 0
				G.add(a, b, -g)
				G.add(b, a, -g)
			if a >= 0
				G.add(a, a, g)
			if b >= 0
				G.add(b, b, g)
	
	void create_I(float[] I, float I_in, float dt)
		int n = nodes.num-1
		I = [I_in]
		I.resize(n)
		for e in edges
			int a = e.a-1
			int b = e.b-1
			float I_off = e.I_off(dt)
			if a >= 0
				I[a] += I_off
			if b >= 0
				I[b] -= I_off

	void optimizer_step(float I_in, float dt)
		int n = nodes.num-1
		Matrix G
		create_G(G, dt)
		#print("G")
		#print(G)
		
		
		float[] I
		create_I(I, I_in, dt)
		#print("I " + I)
	
		# U = R * I
		# I = G * U
		float[] u = G.solve(I)
		#print("u " + u)
		
		# update potentials
		for i in 0:n
			nodes[i+1].phi = u[i]
		# update edges
		for e in edges
			e.update(nodes, dt)
	
	void time_step(float I_in, float dt)
		
		#print("-----")
		for i in 0:15
			optimizer_step(I_in, dt)
		
		# update edges
		for e in edges
			e.iterate(dt)
	
	float get_xxxx()
		float Uin = nodes[1].phi
		float Uout = nodes[out].phi
		float factor = Uout / Uin
		#print(factor)
		return factor
	
	void simulate(float t_max, float dt, float amp, float omega, int type, SimResult res)
		for t in 0:t_max:dt
		
			# input
			float input = amp
			if type == 1
				input = amp * sin(t * omega)
			else if type == 2
				if sin(t * omega) < 0
					input = 0
			else if type == 3
				input = amp * loop(t*omega/2/pi, -1, 1)
			
			
			time_step(input, dt)
			
			# result
			float[] I, U, phi
			for e in edges
				I.add(e.I)
				U.add(e.U)
			for n in nodes
				phi.add(n.phi)
			res.U.add(U)
			res.I.add(I)
			res.phi.add(phi)
	
	string export()
		string s
		for n in nodes
			s += "Node:" + n.pos.x + ":" + n.pos.y + "\n"
		for e in edges
			s += edge_name(e.type) + ":" + e.a + ":" + e.b
			int n = len(e.param_names())
			for i in 0:n
				s += ":" + e.param[i]
			s += "\n"
		s += "Out:" + out + "\n"
		return s
	
	void import(string s)
		clear()
		string[] lines = s.explode("\n")
		for l in lines
			string[] x = l.explode(":")
			if len(x) == 0
				continue
			if x[0] == "Node"
				nodes.add(Node(complex(x[1].float(), x[2].float())))
			else if x[0] == "Out"
				out = x[1].int()
			else
				int t = edge_type(x[0])
				int[] n = [x[1].int(), x[2].int()]
				Edge* e = add_default(n, t)
				for i in 3:len(x)
					e.param[i] = x[i].float()
	
	Edge* add_default(int[]n, int t)
		Edge* e = nil
		if t == TYPE_CABLE
			e = new Cable(n)
		else if t == TYPE_SOURCE
			e = new Source(n, 1)
		else if t == TYPE_RESISTOR
			e = new Resistor(n, 10)
		else if t == TYPE_CAPACITOR
			e = new Capacitor(n, 1)
		else if t == TYPE_INDUCTOR
			e = new Inductor(n, 1)
		else if t == TYPE_DIODE
			e = new Diode(n)
		else
			raise(new Exception("unknown type: " + t))
		edges.add(e)
		return e

void _main()
	Circuit c
	#c.nodes.add(Node(complex(0,0)))
	#c.edges.add(new Diode([0, 2]))
	#c.edges.add(new Resistor([2,1], 1))
	c.edges.add(new Diode([0, 1]))
	SimResult res
	c.simulate(1, 1, 0.1, 1, 0, res)

void __main()
	Diode* d = new Diode([0,0])
	return
	for f in 0.5:1.5:0.01
	#	print(f)
		d.U = f
		print(d.I_id(f))
	
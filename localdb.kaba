use "config.kaba"
use "tag.kaba"

const string NONLOCAL = "nonlocal"
const string CHANGED_FILE = "changed"
const string CHANGED_META = "changed-meta"

class LocalFile
	bool drop_me

	// remote
	string id
	string name
	int remote_mtime
	string remote_path
	// local
	string path
	string hash // can be "" if not local
	int mtime
	int size
	string[] options
	Tag[] tags
	
	void __init__()
		drop_me = false
	
	bool is(string option)
		for o in options
			if o == option
				return true
		return false
	void set(string option)
		if is(option)
			return
		options.add(option)
		db.dirty = true
	void unset(string option)
		for o,i in options
			if o == option
				options.remove(i)
				db.dirty = true
				return
	bool pure_remote()
		return is(NONLOCAL)
	bool pure_local()
		return id.num == 0
	bool in_db()
		return hash.num > 0
	bool changed_file()
		return is(CHANGED_FILE)
	bool changed_meta()
		return is(CHANGED_META)
	bool mergeable(LocalFile* f)
		if size != f.size
			return false
		if id != f.size
			if id.num > 0 and f.id.num > 0
				return false
		return true
	void merge(LocalFile* f)
		for o in f.options
			set(o)
	void sync_tags(Tag[] rtags)
		tags = rtags // TODO
		db.dirty = true
	void tag_add(string key, string value)
		if key == "name"
			name = value
			if conf.verbose
				print("NAME  " + name)
			set(CHANGED_META)
			return
		for t in tags
			if t.key == key and t.value == value
				return
		Tag t
		t.key = key
		t.value = value
		tags.add(t)
		db.dirty = true
		if conf.verbose
			print("TAG ADD  " + t.str())
		set(CHANGED_META)
	void tag_set(string key, string value)
		for t in tags
			if t.key == key
				if t.value == value
					return
				t.value = value
				db.dirty = true
				if conf.verbose
					print("TAG SET  " + t.str())
				set(CHANGED_META)
				return
		tag_add(key, value)
	void tag_rm(string key, string value)
		for t,i in tags
			if t.key == key and t.value == value
				if conf.verbose
					print("TAG RM  " + t.str())
				tags.remove(i)
				db.dirty = true
				set(CHANGED_META)
				return
	string status_str()
		if !in_db()
			return "?   "
		if pure_local()
			return "L   "
		if pure_remote()
			return "R   "
		if changed_file()
			return "**  "
		if changed_meta()
			return "*   "
		return "    "
	void show()
		print(status_str() + rel_path(path))
	void show_info(string l)
		//print(l + "path: " + path)
		print(l + "name:    " + name)
		print(l + "id:      " + id)
		print(l + "hash:    " + hash)
		//print(l + "mtime:   " + mtime)
		//if remote_mtime != 0 and remote_mtime != mtime
		//	s += "\nmtime: " + mtime + " (REMOTE)"
		print(l + "size:    " + size)
		//print(l + "options: " + options)
		for t in tags
			print(l + "  tag:   " + t.key + " = " + t.value)
	string get_tag(string key)
		if key == "name"
			return name
		if key == "ext"
			return path.extension()
		if key == "id"
			return id
		if key == "hash"
			return hash
		for t in tags
			if t.key == key
				return t.value
		return ""
	string apply_structure(string root, string structure)
		if structure == ""
			if path.find(root, 0) == 0
				return path
			else
				return root + path
		string spath = structure
		int p1 = 0
		while true
			int p0 = structure.find("{", p1)
			if p0 < 0
				break
			p1 = structure.find("}", p0)
			if p1 < 0
				break
			string kkey = structure.substr(p0+1,p1-p0-1)
			string[] xkey = kkey.explode(":")
			string val = get_tag(xkey[0])
			if xkey.num > 1
				int n = xkey[1].int()
				while val.num < n
					val = "0" + val
			spath = spath.replace("{" + kkey + "}", val)
		return root + spath

class LocalFileDB
	LocalFile[] files
	bool dirty
	
	void load()
		files.clear()
		dirty = false
		//Timer tt
		string ss = FileRead("db")
		string[] lines = ss.explode("\n")
		int n = lines.num / 10
		for i in 0:n
			LocalFile ff
			int i0 = i*10+1
			ff.id = lines[i0]
			ff.path = lines[i0+1]
			ff.remote_path = lines[i0+2]
			ff.name = lines[i0+3]
			ff.hash = lines[i0+4]
			ff.mtime = lines[i0+5].int()
			ff.remote_mtime = lines[i0+6].int()
			ff.size = lines[i0+7].int()
			ff.options = lines[i0+8].explode(",")
			ff.tags = strh2tags(lines[i0+9])
			ff.unset("")
			if ff.hash == "d41d8cd98f00b204e9800998ecf8427e"
				ff.hash = ""
			if ff.id == "-1"
				ff.id = ""
	
			files.add(ff)
		//print(tt.get())

	void self_check()
		for f in files
			if f.path.num == 0
				print("EMPTY PATH ...")
				f.show_info("    ")
			if f.hash == ""
				if FileExists(f.path)
					print("EMPTY HASH: " + f.path)
					f.hash = FileHash(f.path, "md5")
					dirty = true
				else if f.id == ""
					print("GHOST: " + f.path)
					f.drop_me = true
					dirty = true
				//else
					// hash='', id='', no file
					//print("EMPTY HASH (REMOTE): " + ff.path)
			if f.path.num > 0
				LocalFile *l = find_by_hash(f.hash)
				if l and l != &f
					if f.path == l.path
						print("DUPLICATE: " + f.path)
						if l.mergeable(&f)
							l.merge(&f)
							dirty = true
							f.drop_me = true
						else
							f.show()
							print("   <->")
							l.show()
							print("###################################")
					else
						print("HASH COLLISION: " + f.path + "  <->  " + l.path)

	void drop_selected()
		for i in 0:files.num
			if files[i].drop_me
				print("DROP " + files[i].path)
				files.remove(i)
				db.dirty = true
				i --

	void save()
		File *f = FileCreateText("db")
		f << files.num
		for ff in files
			f << ff.id
			f << ff.path
			f << ff.remote_path
			f << ff.name
			f << ff.hash
			f << ff.mtime
			f << ff.remote_mtime
			f << ff.size
			f << ff.options.join(",")
			f << tags2strh(ff.tags)
		delete(f)
		dirty = false
	
	bool has_id(string id)
		for f in files
			if id == f.id
				return true
		return false

	LocalFile *find_by_id(string id)
		for f in files
			if id == f.id
				return &f
		raise(new Exception("not in db: id=" + id))

	LocalFile *find_by_path(string path)
		for f in files
			if path == f.path
				return &f
		raise(new Exception("not in db: '" + rel_path(path) + "'"))

	bool has_path(string path)
		for f in files
			if path == f.path
				return true
		return false

	LocalFile *find_by_hash(string hash)
		if hash == ""
			raise(new Exception("invalid hash"))
		for f in files
			if hash == f.hash
				return &f
		raise(new Exception("not in db: hash=" + hash))
		
	LocalFile*[] find_by_tags(string str)
		Tag[] tags = str2tags(str)
		LocalFile*[] list
		for f in files
			bool ok = true
			for t in tags
				bool found = false
				for tt in f.tags
					if tt.key == t.key and tt.value == t.value
						found = true
						break
				if !found
					ok = false
					break
			if ok
				list.add(&f)
		sort_list(&list, type(list), "path")
		return list

	LocalFile*[] get_in_dir(string _dir, bool recursive)
		string dir = dir_canonical(_dir)
			
		LocalFile*[] list
		if recursive
			for f in files
				if f.path.head(dir.num) == dir
					if !f.pure_local() and conf.filter_pure_local
						continue
					if !f.pure_remote() and conf.filter_pure_remote
						continue
					list.add(&f)
		else
			for f in files
				if f.path.dirname() == dir
					if !f.pure_local() and conf.filter_pure_local
						continue
					if !f.pure_remote() and conf.filter_pure_remote
						continue
					list.add(&f)
		sort_list(&list, type(list), "path")
		return list

	LocalFile*[] get(string path, bool rec)
		try
			LocalFile*[] files
			files.add(find_by_path(path))
			return files
		except
			return get_in_dir(path, rec)
		
	void rehash()
		for f in files
			if f.pure_remote()
				continue
			print(f.path)
			try
				string h2 = FileHash(f.path, "md5")
				if h2 != f.hash
					print(h2 + " != " + f.hash)
					f.hash = h2
					save()
			except
				pass
	void optimize()
		print("optimizing...")
		sort_list(&files, type(files), "path")
		dirty = true
	
LocalFileDB db

void auto_tag(LocalFile *f)
	if !FileExists(f.path)
		return
	string ext = f.path.extension()
	try
		if ext == "pdf"
			string s = shell_exec("pdfinfo \"" + bash_escape(f.path) + "\" | awk '/Pages/{print $2}'")
			if s.num > 0
				f.tag_set("pages", s.int().str())
		if ext == "jpg" or ext == "png" or ext == "bmp"
			string[] s = shell_exec("identify -format \"%w\n%h\" \"" + bash_escape(f.path) + "\"").explode("\n")
			if s.num >= 2
				f.tag_set("width", s[0].int().str())
				f.tag_set("height", s[1].int().str())
	except Exception as e
		error_out(e)

use "config.kaba"
use "tag.kaba"

class LocalFile
	// remote
	string id
	string name
	int remote_mtime
	string remote_path
	// local
	string path
	string hash // can be "" if not local
	int mtime
	int size
	string[] options
	Tag[] tags
	bool is(string option)
		for o in options
			if o == option
				return true
		return false
	void set(string option)
		if is(option)
			return
		options.add(option)
	void unset(string option)
		for o,i in options
			if o == option
				options.remove(i)
				return
	bool mergeable(LocalFile* f)
		if size != f.size
			return false
		if id != f.size
			if id.num > 0 and f.id.num > 0
				return false
		return true
	void merge(LocalFile* f)
		for o in f.options
			set(o)
	void sync_tags(Tag[] rtags)
		tags = rtags // TODO
	string status_str()
		if id.num > 0
			if is("nonlocal")
				return "R   "
			return "    "
		else
			// only local
			return "L   "
	void show()
		print(status_str() + path)
	void show_info(string l)
		//print(l + "path: " + path)
		print(l + "name:    " + name)
		print(l + "id:      " + id)
		print(l + "hash:    " + hash)
		//print(l + "mtime:   " + mtime)
		//if remote_mtime != 0 and remote_mtime != mtime
		//	s += "\nmtime: " + mtime + " (REMOTE)"
		print(l + "size:    " + size)
		//print(l + "options: " + options)
		for t in tags
			print(l + "  tag:   " + t.key + " = " + t.value)
	string get_tag(string key)
		if key == "name"
			return name
		if key == "ext"
			return path.extension()
		for t in tags
			if t.key == key
				return t.value
		return ""
	string apply_structure(ConfigDir e)
		if e.structure == ""
			if path.find(e.dir, 0) == 0
				return path
			else
				return e.dir + path
		string spath = e.structure
		int p1 = 0
		while true
			int p0 = e.structure.find("{", p1)
			if p0 < 0
				break
			p1 = e.structure.find("}", p0)
			if p1 < 0
				break
			string kkey = e.structure.substr(p0+1,p1-p0-1)
			string[] xkey = kkey.explode(":")
			string val = get_tag(xkey[0])
			if xkey.num > 1
				int n = xkey[1].int()
				while val.num < n
					val = "0" + val
			spath = spath.replace("{" + kkey + "}", val)
		return e.dir + spath


class DBVisitor
	LocalFileDB* db
	string[] paths
	void __init__(LocalFileDB *_db)
		db = _db
				
	bool is_ignored(string path)
		for i in conf.ignore
			if path.match(i)
				return true
		return false

	void find_paths(string _dir)
		string dir = dir_canonical(_dir)
		DirEntry[] list = DirSearch(dir, "*", true)
		for e in list
			if e.is_dir
				if e.name.head(1) != "."
					find_paths(dir + e.name)
			else
				string path = (dir + e.name)
				if !is_ignored(path)
					paths.add(path)
	void sort_paths()
		for i in 0:paths.num
			for j in i+1:paths.num
				if paths[i] > paths[j]
					string t = paths[i]
					paths[i] = paths[j]
					paths[j] = t
	
	void recurse(string dir)
		find_paths(dir)
		LocalFile*[] files = db.get_in_dir(dir, true)
		for f in files
			bool found = false
			for p in paths
				if p == f.path
					found = true
					break
			if !found
				paths.add(f.path)
		sort_paths()
		for p in paths
			visit(p)
		paths.clear()
	void recurse_all()
		for e in conf.dirs
			find_paths(e.dir)
		for f in db.files
			bool found = false
			for p in paths
				if p == f.path
					found = true
					break
			if !found
				paths.add(f.path)
		sort_paths()
		for p in paths
			visit(p)
		paths.clear()
		
	virtual void visit(string path)


// "add"
class DBUpdater extends DBVisitor
	override void __init__(LocalFileDB* _db)
		super.__init__(_db)
	override void visit(string path)
		//print("update " + path)
		LocalFile *f = db.find_by_path(path)
		if f
			if f.is("nonlocal")
				f.unset("nonlocal")
				print("NON-NONLOCAL " + path)
			File* ff = FileOpen(path)
			int mtime = ff.getMDate().time
			if mtime == f.mtime
				if f.id == "" and conf.show_pure_local
					print("ADD  " + path)
				// ok
				if conf.verbose
					print("=  " + path)
			else
				// changed?
				string hash = FileHash(path, "md5")
				if hash == f.hash
					// ok
					f.mtime = mtime
					if conf.verbose
						print("=  " + path)
				else
					print("~  " + path)
					f.hash = hash
					f.mtime = mtime
					f.size = ff.getSize()
					if conf.verbose
						print("     hash: " + f.hash)
						print("     time: " + f.mtime)
						print("     size: " + f.size)
			delete ff
		else
			string hash = FileHash(path, "md5")
			f = db.find_by_hash(hash)
			if f
				//print(" FOUND BY HASH " + f.path)
				// moved
				print("MOVE  " + f.path + " > " + path)
				f.path = path
				// TODO: hash update...
			else
				// new
				print("ADD  " + path)
				LocalFile l
				l.path = path
				l.name = path.basename()
				string ext = path.extension()
				if ext.num > 0
					l.name = l.name.head(l.name.num - ext.num - 1)
				//print(ext)
				//print(l.name)
				l.hash = hash
				l.id = ""
				File* ff = FileOpen(path)
				l.mtime = ff.getMDate().time
				l.size = ff.getSize()
				delete ff
				if conf.verbose
					print("     hash: " + l.hash)
					print("     time: " + l.mtime)
					print("     size: " + l.size)
				db.files.add(l)

class DBStatusReporter extends DBVisitor
	override void __init__(LocalFileDB* _db)
		super.__init__(_db)
	override void visit(string path)
		LocalFile *f = db.find_by_path(path)
		if f
			if f.id.num == 0
				f.show()
			else if f.is("nonlocal")
				f.show()
			else if conf.verbose
				f.show()
			if conf.verbose
				f.show_info("      ")
		else
			print("?   " + path)

class DBLister extends DBVisitor
	override void __init__(LocalFileDB* _db)
		super.__init__(_db)
	override void visit(string path)
		LocalFile *f = db.find_by_path(path)
		if f
			f.show()
			if conf.verbose
				f.show_info("      ")
		else
			print("?   " + path)
		
		
class DBDropper extends DBVisitor
	override void __init__(LocalFileDB* _db)
		super.__init__(_db)
	override void visit(string path)
		LocalFile *f = db.find_by_path(path)
		if f
			db.drop(*f)

class LocalFileDB
	LocalFile[] files
	bool dirty
	
	void load()
		files.clear()
		dirty = false
		File *f = FileOpen("db")
		if !f
			return
		int n
		f >> n
		for i in 0:n
			LocalFile ff
			string temp
			f >> ff.id
			f >> ff.path
			f >> ff.remote_path
			f >> ff.name
			f >> ff.hash
			f >> ff.mtime
			f >> ff.remote_mtime
			f >> ff.size
			f >> temp
			ff.options = temp.explode(",")
			f >> temp
			ff.tags = strh2tags(temp)
			ff.unset("")
			if ff.hash == "d41d8cd98f00b204e9800998ecf8427e"
				ff.hash = ""
			if ff.id == "-1"
				ff.id = ""
				
			if ff.hash == ""
				if FileExists(ff.path)
					print("EMPTY HASH: " + ff.path)
					ff.hash = FileHash(ff.path, "md5")
					dirty = true
				else if ff.id == ""
					print("GHOST: " + ff.path)
					dirty = true
					continue
				//else
					// hash='', id='', no file
					//print("EMPTY HASH (REMOTE): " + ff.path)
			if ff.path.num > 0
				LocalFile *l = find_by_hash(ff.hash)
				if l
					if ff.path == l.path
						print("DUPLICATE: " + ff.path)
						if l.mergeable(&ff)
							l.merge(&ff)
							dirty = true
							continue
						else
							ff.show()
							print("   <->")
							l.show()
							print("###################################")
					else
						print("HASH COLLISION: " + ff.path + "  <->  " + l.path)
				files.add(ff)
		delete(f)
		if dirty
			save()

	void save()
		File *f = FileCreate("db")
		f << files.num
		for ff in files
			f << ff.id
			f << ff.path
			f << ff.remote_path
			f << ff.name
			f << ff.hash
			f << ff.mtime
			f << ff.remote_mtime
			f << ff.size
			f << ff.options.join(",")
			f << tags2str(ff.tags)
		delete(f)
		dirty = false

	LocalFile *find_by_id(string id)
		for f in files
			if id == f.id
				return &f
		return nil

	LocalFile *find_by_path(string path)
		for f in files
			if path == f.path
				return &f
		return nil

	LocalFile *find_by_hash(string hash)
		if hash == ""
			return nil
		for f in files
			if hash == f.hash
				return &f
		return nil
		
	LocalFile*[] find_by_tags(string str)
		Tag[] tags = str2tags(str)
		LocalFile*[] list
		for f in files
			bool ok = true
			for t in tags
				bool found = false
				for tt in f.tags
					if tt.key == t.key and tt.value == t.value
						found = true
						break
				if !found
					ok = false
					break
			if ok
				list.add(&f)
		return list
	
	void drop(LocalFile f)
		for ff,i in files
			if ff.path == f.path and ff.hash == f.hash
				print("DROP " + f.path)
				files.remove(i)
				dirty = true
				return

	LocalFile*[] get_in_dir(string _dir, bool recursive)
		string dir = dir_canonical(_dir)
			
		LocalFile*[] list
		if recursive
			for f in files
				if f.path.head(dir.num) == dir
					list.add(&f)
		else
			for f in files
				if f.path.dirname() == dir
					list.add(&f)
		return list

	// check for local changes
	void update_local(ConfigDir e)
		print("update local " + e.dir)
		
		DBUpdater* up = new DBUpdater(self)
		up.recurse(e.dir)
		delete up
		
		LocalFile*[] dbfiles = get_in_dir(e.dir, true)
		LocalFile[] todrop
		for ff in dbfiles
			if ff.is("nonlocal")
				print("+R " + ff.path)
				continue
					
			if FileExists(ff.path)
				nil
				// already checked...
			else
				print("-  " + ff.path)
				ff.set("deleted")
				
				if conf.drop_deleted
					todrop.add(*ff)
		
		for ff in todrop
			drop(ff)
			
		save()

	// check for local changes
	void add_recursive(string path, bool is_dir)
		if path[path.num-1] == '/'
			is_dir = true
		
		DBUpdater* up = new DBUpdater(self)
		if is_dir
			up.recurse(path)
		else
			up.visit(path)
		delete up
		
		/*LocalFile[] dbfiles = get_in_dir(e.dir, true)
		LocalFile[] todrop
		for ff in dbfiles
			if ff.is("nonlocal")
				print("+R " + ff.path)
				continue
					
			if FileExists(ff.path)
				nil
				// already checked...
			else
				print("-  " + ff.path)
				ff.set("deleted")
				
				if conf.drop_deleted
					todrop.add(ff)
		
		for ff in todrop
			drop(ff)*/
			
		save()

	void rm_recursive(string path, bool is_dir)
		if path[path.num-1] == '/'
			is_dir = true
		
		DBVisitor* vis = new DBDropper(self)
		if is_dir
			vis.recurse(path)
		else
			vis.visit(path)
		delete vis
			
		save()
	
	void rehash()
		for f in files
			print(f.path)
			string h2 = FileHash(f.path, "md5")
			if h2.num == 0
				continue
			if h2 != f.hash
				print(h2 + " != " + f.hash)
				f.hash = h2
				save()
	void cleanup_structure(string _dir)
		string dir = dir_canonical(_dir)
		LocalFile*[] files = db.get_in_dir(dir, true)
		for f in files
			ConfigDir* e = conf.get_cfg(f.path)
			if !e
				continue
			string new_path = f.apply_structure(*e)
			if f.path == new_path
				continue
			print(f.path + " -> " + new_path)
			make_all_dirs(new_path)
			_exec_("mv \"" + bash_escape(f.path) + "\" \"" + bash_escape(new_path) + "\"")
			f.path = new_path
			db.save()

	void info(string path)
		LocalFile* f = db.find_by_path(path)
		if !f
			print("ERROR: not in db")
			return
		f.show()
		f.show_info("      ")

	void list(string dir)
		conf.show_pure_local = true
		DBVisitor* vis = new DBLister(self)
		vis.recurse(dir)
		delete vis

	void show_status()
		if conf.verbose
			conf.show_pure_local = true
		DBVisitor* vis = new DBStatusReporter(self)
		vis.recurse_all()
		delete vis
	
LocalFileDB db

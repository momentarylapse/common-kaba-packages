use os
use localdb
use config
use remote
use tag
use autotag
use dblister





void file_move(out LocalFile f, string new_path)
	if conf.verbosity >= 1
		print("MOVED  {{rel_path(f.path)}} > {{rel_path(new_path)}}")
	f.path = new_path
	db.dirty = true




	
void move_path(string source, string _dest)
	try
		let f = db.find_by_path(source)
		string dest = f.apply_structure(_dest)
		if Filesystem.is_directory(dest)
			dest = dir_canonical(dest) + source.basename()
		print("MOVE  {{rel_path(source)}} -> {{rel_path(dest)}}")
		if Filesystem.exists(dest) or db.has_path(dest)
			raise(new Exception("target already exists"))

		if conf.dry_run
			return
		f.path = dest
		db.save()
		
		if Filesystem.exists(source)
			make_all_dirs(dest)
			Filesystem.rename(source, dest)
	except Exception as e
		error_out(e)

void action_mv(string[] arg)
	for i in 0:arg.num-1
		move_path(absolute_path(arg[i]), absolute_path(arg[len(arg)-1]))


void structure_file(out LocalFile f, string structure)
	string new_path = f.apply_structure(structure)
	if f.path == new_path
		return
	print("MOVE  {{rel_path(f.path)}} -> {{rel_path(new_path)}}")
	if conf.dry_run
		return
	make_all_dirs(new_path)
	try
		if !f.pure_remote()
			Filesystem.rename(f.path, new_path)
		f.path = new_path
		db.save()
	except FileError as e
		error_out(e)

void _action_structure_auto(string _dir)
	set_working_dir(_dir)
	string dir = dir_canonical(_dir)
	let files = db.get_in_dir(dir, conf.recursive)
	for f in files
		let e = conf.get_cfg(f.path)
		if !e
			continue
		structure_file(f, e.dir + e.structure)

void action_structure_auto(string[] arg)
	for a in arg
		_action_structure_auto(absolute_path(a))




void show_rfile_list(RemoteFile[] rfiles)
	for f in rfiles
		f.show()
		if conf.show_meta
			f.show_info("      ")


void action_remote_find(string[] arg)
	for filter in arg
		show_rfile_list(remote_find(filter, conf.default_quality))

#void action_remote_find_hash(string[] hashes)
#	show_rfile_list(remote_find_by_hash(hashes))

#void action_remote_find_id(string[] ids)
#	show_rfile_list(remote_find_by_id(ids, ""))

void action_remote_add(string[] arg) # filter, dir
	remote_sync_by_filter(arg[0], conf.default_quality, conf.default_structure, absolute_path(arg[1]))

void _action_dsync(string dir)
	set_working_dir(dir)
	let e = conf.get_cfg(dir)
	if e
		for s in e.syncs
			remote_sync_by_filter(s.filter, s.quality(), "", dir)
	let files = db.get_in_dir(dir, conf.recursive)
	print("syncing entangled files")
	remote_sync_by_id(files)
	print("matching pure local files by hash")
	remote_sync_pure_locals_by_hash(files)

void action_dsync(string[] arg)
	if len(arg) == 0
		_action_dsync(absolute_path("./"))
	for a in arg
		_action_dsync(absolute_path(a))

void _action_sync(string path)
	set_working_dir(path)
	let files = lister.find(path)
	remote_sync_pure_locals_by_hash(files)
	remote_sync_by_id(files)

void action_sync(string[] arg)
	if len(arg) == 0
		_action_sync(absolute_path("./"))
	for a in arg
		_action_sync(absolute_path(a))


use kaba
//use "@/mongo"

const string SHIFT = "    "

string func_params(Function* f)
	string params
	for p,i in f.param_type
		if params.num > 0
			params += ", "
		params += p.name + " " + f.var[i].name
	return params

string show_func(string ns, Function* f)
	string name = f.name
	if f.class
		name = f.class.name + "." + f.name
	
	string wiki = "== Kaba function " + name + " ==\n\n"
	
	wiki += "=== Syntax ===\n\n"
	wiki += "<syntaxhighlight lang=\"kaba\">\n"
	wiki += f.return_type.name + " " + name + "(" + func_params(f) + ")\n"
	wiki += "</syntaxhighlight>\n\n"
	
	wiki += "=== Parameters ===\n\n"
	for p,i in f.param_type
		wiki += "; <tt>" + p.name + " " + f.var[i].name + "</tt>\n"
		wiki += ": description\n\n"

	wiki += "=== Return ===\n\n"
	wiki += "description\n\n"
	
	return wiki


string class_extension(Class *c)
	if c.parent
		return " extends " + c.parent.name
	return ""

bool func_interesting(Function* f)
	if f.name == "__init__"
		return true
	if f.name[:1] == "_"
		return false
	return true

string show_class(string ns, Class* c)
	string wiki = "== Kaba class " + c.name + " ==\n\n"
	
	wiki += "=== Syntax ===\n\n"
	wiki += "<syntaxhighlight lang=\"kaba\">\n"
	wiki += "class " + c.name + class_extension(c) + "\n"
	for e in c.elements
		wiki += SHIFT + e.type.name + " " + e.name + "\n"
	for f in c.functions
		if func_interesting(f.func)
			wiki += SHIFT + f.func.return_type.name + " " + f.func.name + "(" + func_params(f.func) + ")\n"
	wiki += "</syntaxhighlight>\n\n"
	
	wiki += "\n=== Functions ===\n\n"
	for f in c.functions
		if func_interesting(f.func)
			wiki += "; <tt>" + f.func.return_type.name + " [[kaba." + ns + "." + c.name + "." + f.func.name + "|" + f.func.name + "]](" + func_params(f.func) + ")\n"
			wiki += ": description\n\n"
			wiki_upload("kaba." + ns + "." + c.name + "." + f.func.name, show_func(ns + "." + c.name, f.func))
	wiki += "\n=== Elements ===\n\n"
	for e in c.elements
		wiki += "; <tt>" + e.type.name + " " + e.name + "</tt>\n"
		wiki += ": description\n\n"
	return wiki



string show_package(Package p)
	string wiki = "== Kaba package " + p.name + " ==\n\n"
	if p.used_by_default
		wiki = "== Kaba package " + p.name + " (default) ==\n\n"
		
	wiki += "=== Classes ===\n\n"
	let classes = p.classes()
	for c in classes
		if c.name.find("*", 0) >= 0 or c.name.find("&", 0) >= 0
			continue
		if c.name.find("@", 0) >= 0 or c.name[0] == '-'
			continue
		if c.name.find("[", 0) >= 0 or c.name.find("{", 0) >= 0
			continue
		wiki += "* <tt>class [[kaba." + p.name + "." + c.name + "|" + c.name + "]]" + class_extension(c) + "</tt>\n\n"
		
		wiki_upload("kaba." + p.name + "." + c.name, show_class(p.name, c))

	wiki += "=== Functions ===\n\n"
	let funcs = p.functions()
	for f in funcs
		if f.name.find("@", 0) >= 0 or f.name[0] == '-' or f.name[0] == '_'
			continue
		if f.class
			continue
		wiki += "* <tt>" + f.return_type.name + " [[kaba." + p.name + "." + f.name + "|" + f.name + "]](" + func_params(f) + ")\n\n"
		
		wiki_upload("kaba." + p.name + "." + f.name, show_func(p.name, f))

	wiki += "=== Variables ===\n\n"
	let vars = p.variables()
	for v in vars
		wiki += "* <tt>" + v.type.name + " [[kaba." + p.name + "." + v.name + "|" + v.name + "]]</tt>\n\n"
	let consts = p.constants()
	for c in consts
		wiki += "* <tt>const " + c.type.name + " " + c.name + "</tt>\n\n"
	return wiki


string make_reference()
	string wiki = "== Kaba reference ==\n\n"
	wiki += "=== Packages ===\n\n"
	for p in packages
		wiki += "* <tt>[[kaba." + p.name + "|" + p.name + "]]</tt>\n"
	return wiki

void wiki_upload(string name, string wiki)
	let f = FileCreateText(name + ".txt")
	f << wiki
	delete f
	

void main()
	wiki_upload("kaba.reference", make_reference())
	for p in packages
		wiki_upload("kaba." + p.name, show_package(p))

use hui
use config
use localdb
use tag


const int CHUNK_SIZE = 128

string scp_escape(string s)
	string r = s
	r = r.replace("(", "\\\\\\(")
	r = r.replace(")", "\\\\\\)")
	r = r.replace("'", "\\\\\\'")
	r = r.replace(" ", "\\\\\\ ")
	return r

string ssh_escape(string s)
	string r = s
	r = r.replace(" ", "\\\\ ")
	r = r.replace("(", "\\\\(")
	r = r.replace(")", "\\\\)")
	r = r.replace("'", "\\\\'")
	return r

void scp_download(string source, string dest)
	string cmd = "scp -p"
	string rp = scp_escape(source)
	cmd += " " + SERVER + ":" + rp
	cmd += " \"" + bash_escape(dest) + "\""
	if conf.verbosity >= 2
		print(cmd)
	shell_execute(cmd)

void scp_upload(string source, string dest)
	string cmd = "scp -p"
	string rp = scp_escape(dest)
	cmd += " \"" + bash_escape(source) + "\""
	cmd += " " + SERVER + ":" + rp
	if conf.verbosity >= 2
		print(cmd)
	shell_execute(cmd)

string remote_interface(string action, string[] params)
	string cmd = "ssh " + SERVER + " python3 "
	
	cmd += " /home/michi/Tools/alex/if-" +  action + ".py"
	for p in params
		cmd += " \\\"" + ssh_escape(p) + "\\\""
	//cmd += ""
	if conf.verbosity >= 2
		print(cmd)
	return shell_exec(cmd).trim()

string yii(string action, string[] params)
	string cmd = "ssh " + SERVER + " "
	
	cmd += CMD + " " + action
	for p in params
		//cmd += " \\\"" + ssh_escape(p) + "\\\""
		cmd += " " + ssh_escape(p)
	//cmd += ""
	if conf.verbosity >= 2
		print(cmd)
	return shell_exec(cmd).trim()

class RemoteFile extends LocalFile

RemoteFile[] remote_parse(string r)
	RemoteFile[] rfiles
	let list = r.explode("\n")
	for l in list
		let parts = l.explode("\t")
		if parts.num < 7
			continue
		RemoteFile rf
		rf.id = parts[0]
		rf.mtime = parts[1].int()
		rf.size = parts[2].int()
		rf.hash = parts[3]
		rf.remote_path = parts[4]
		rf.name = parts[5]
		string extension = parts[6]
		rf.path = rf.name + "." + extension // temporary
		for i in 8:parts.num
			rf.tags.add(strh2tag(parts[i]))
		if parts[7] == "m"
			rf.set("quality=medium")
		rf.set(NONLOCAL)
		rfiles.add(rf)
	return rfiles

RemoteFile[] remote_find(string filter, string quality)
	string r = yii("find", [filter, quality])
	return remote_parse(r)

RemoteFile[] remote_find_by_hash_chunk(string[] hashes)
	string r = yii("by-hash", hashes)
	return remote_parse(r)

RemoteFile[] remote_find_by_id_chunk(string[] ids, string quality)	
	string r = yii("by-id", ids)//[ids, quality])
	return remote_parse(r)

RemoteFile[] remote_find_by_hash(string[] hashes)
	RemoteFile[] rr
	int done = 0
	while done < hashes.num
		int ee = min(done + CHUNK_SIZE, hashes.num)
		if conf.verbosity >= 2
			print("hash... " + done + ":" + ee + " of " + hashes.num)
		let r = remote_find_by_hash_chunk(hashes[done:ee])
		for x in r
			rr.add(x)
		done = ee
	return rr

RemoteFile[] remote_find_by_id(string[] ids, string quality)
	RemoteFile[] rr
	int done = 0
	while done < ids.num
		int ee = min(done + CHUNK_SIZE, ids.num)
		if conf.verbosity >= 2
			print("ids... " + done + ":" + ee + " of " + ids.num)
		let r = remote_find_by_id_chunk(ids[done:ee], quality)
		for x in r
			rr.add(x)
		done = ee
	return rr



void sync_add_pure_remote(RemoteFile rf, string root, string structure)
	if !db.has_id(rf.id)
		//string rel_name = sync.guess_dir(["parts"]) + rf.rel_name.replace("/", " - ")
		try
			LocalFile* lf = db.by_hash(rf.hash)
			if lf.id.num > 0
				print("HASH COLLISION  " + rel_path(lf.path) + "  <->  " + "REMOTE...")
			lf.id = rf.id
			//if conf.verbose
			print("RELINK  " + rel_path(lf.path))// + "  ->  " + rf.id)
			lf.sync_tags(rf.tags)
			lf.name = rf.name
			return
		except
			// new remote file
			LocalFile ll = rf
			ll.path = ll.apply_structure(root, structure)
			ll.set(NONLOCAL)
			db.files.add(ll)
			print("ADD PURE REMOTE  " + rel_path(ll.path))
		
			if conf.show_meta or conf.verbosity >= 2
				ll.show_info("      ")


void remote_sync_by_filter(string filter, string quality, string structure, string dir)
	let rfiles = remote_find(filter, quality)
	for rf in rfiles
		try
			LocalFile *lf = db.find_by_id(rf.id)
			sync_file(rf, lf)
		except
			sync_add_pure_remote(rf, dir, structure)
	db.save()

void remote_download(LocalFile* f)
	if !f.in_db()
		print("ERROR: not in db")
		return

	if !f.pure_remote() and !f.is(CHANGED_FILE)
		print("ERROR: neither pure remote nor changed")
		return
	if f.remote_path.num == 0
		print("ERROR: no remote path")
		return
	
	make_all_dirs(f.path)
	scp_download(f.remote_path, f.path)

	File *ff = FileOpen(f.path)
	if ff
		f.size = ff.get_size()
		f.mtime = ff.get_date().time
		f.hash = FileHash(f.path, "md5")
		f.unset(NONLOCAL)
		f.unset(CHANGED_FILE)
		db.save()
		delete ff
		return
	print("---ERROR---")


void remote_upload(LocalFile* f)
	
	if !f.pure_local()
		print("ERROR: not pure local")
		return
	
	if f.path.extension() == ""
		print("ERROR: remote does not like files without extension: " + rel_path(f.path))
		return
	
	f.remote_path = ALEX_IN + f.hash + "." + f.path.extension()
	
	scp_upload(f.path, f.remote_path)
	
	string r = remote_interface("add", [f.remote_path])
	if r[:2] != "ok"
		print("ERROR: upload..." + r)
		return
	int nnn = r[3:].find("\n", 0)
	if nnn >= 0
		print("REMOTE WARNING: " + r[4+nnn:])
	f.id = r[3:].explode("\n")[0]
	db.save()

	//string tagsh = tags2strh(f.tags)
		
	//string r = yii("upload", [f.remote_path, f.name.hex(false), f.hash, f.mtime.str(), tagsh])
	//print("answer: " + r)
	
	/*string[] p = r.explode("\t")
	if p.num >= 2
		if p[0] == "ok"
			f.id = p[1]
			db.save()
			return
		if p[0] == "duplicate"
			print("hash already in db  -> RELINK")
			f.id = p[1]
			db.save()
			return
		if p[0] == "bad hash"
			print("ERROR: upload failed?")
			return
	print("ERROR: ????")*/


void remote_upload_meta(LocalFile* f)
	
	if f.pure_local()
		print("ERROR: pure local")
		return

	string tags = tags2strh(f.tags)	
	
	string r = remote_interface("override-meta", [f.id, f.name.hex(false), tags])
	
	if r.tail(2) == "ok"
		if conf.verbosity >= 2
			print("yay")
		f.unset(CHANGED_META)
		db.save()
		return
	if r == "not found"
		print("ERROR: remote did not find")
		return
	print(r)
	print("ERROR: ????")


RemoteFile[] remote_get_meta(LocalFile*[] files)

	string[] ids_perfect
	string[] ids_medium
	for f in files
		if f.is("quality=medium")
			ids_medium.add(f.id)
		else
			ids_perfect.add(f.id)
	RemoteFile[] rfiles, rfiles_medium
	if ids_perfect.num > 0
		rfiles = remote_find_by_id(ids_perfect, PERFECT)
	if ids_medium.num > 0
		rfiles_medium = remote_find_by_id(ids_medium, MEDIUM)
	for rf in rfiles_medium
		rfiles.add(rf)
	return rfiles

void remote_download_meta(LocalFile*[] files)
	let rfiles = remote_get_meta(files)
	for rf in rfiles
		for lf in files
			if rf.id == lf.id
				print("META  " + rel_path(lf.path))
				if conf.pull_tags_only_add
					for t in rf.tags
						if tag_multi(t.key)
							lf.tag_add(t)
						else
							lf.tag_set(t)
				else
					lf.name = rf.name
					lf.tags = rf.tags
					lf.unset(CHANGED_META)
				db.dirty = true

void remote_sync_by_id(LocalFile*[] files)
	LocalFile*[] files_wanted
	for f in files
		if !f.pure_remote() and !f.pure_local()
			files_wanted.add(f)
	let rfiles = remote_get_meta(files_wanted)
	for rf in rfiles
		for lf in files
			if lf.id == rf.id
				sync_file(rf, lf)

void sync_file(RemoteFile rf, LocalFile* lf)
	if conf.verbosity >= 2
		print("sync " + lf.path)
	lf.unset(CHANGED_FILE)
	lf.unset(CHANGED_META)
	lf.remote_path = rf.remote_path
	db.dirty = true
	if rf.is("quality=medium")
		lf.set("quality=medium")
	if lf.pure_local()
		if conf.verbosity >= 1
			print("RELINK  " + rel_path(lf.path))
		lf.id = rf.id
		//db.dirty = true
	if lf.hash != rf.hash
		if conf.verbosity >= 1
			print("CHANGED HASH  " + rel_path(lf.path))
		if conf.verbosity >= 2
			print(lf.hash)
			print(rf.hash)
		lf.set(CHANGED_FILE)
		//db.dirty = true
	if lf.name != rf.name
		if conf.verbosity >= 1
			print("CHANGED NAME  " + rel_path(lf.path))
		if conf.verbosity >= 2
			print(lf.name + " <-> " + rf.name)
		lf.set(CHANGED_META)
		//db.dirty = true
	if !tags_equal(lf.tags, rf.tags)
		if conf.verbosity >= 1
			print("CHANGED TAGS  " + rel_path(lf.path))
		if conf.verbosity >= 2
			print(tags2str(tags_sort(lf.tags)))
			print(tags2str(tags_sort(rf.tags)))
		lf.set(CHANGED_META)
		//db.dirty = true


void remote_sync_pure_locals_by_hash(LocalFile*[] files)
	string[] hashes
	for f in files
		if f.pure_local()
			hashes.add(f.hash)
	if hashes.num == 0
		return
	let rfiles = remote_find_by_hash(hashes)
	for rf in rfiles
		if conf.verbosity >= 2
			print(rf.hash)
		for lf in files
			if lf.hash == rf.hash
				sync_file(rf, lf)


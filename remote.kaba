use os
use hui
use config
use localdb
use tag


const int CHUNK_SIZE = 128

string scp_escape(string s)
	string r = s
	r = r.replace("(", "\\\\\\(")
	r = r.replace(")", "\\\\\\)")
	r = r.replace("'", "\\\\\\'")
	r = r.replace(" ", "\\\\\\ ")
	return r

string ssh_escape(string s)
	string r = s
	r = r.replace(" ", "\\\\ ")
	r = r.replace("(", "\\\\(")
	r = r.replace(")", "\\\\)")
	r = r.replace("'", "\\\\'")
	return r

void scp_download(string source, string dest)
	string cmd = "scp -Tp"
	cmd += " {{conf.server}}:\"'{{bash_escape2(source)}}'\" \"{{bash_escape(dest)}}\""
	if conf.verbosity >= 2
		print(cmd)
	shell_execute(cmd)

void scp_upload(string source, string dest)
	string cmd = "scp -Tp \"{{bash_escape(source)}}\" {{conf.server}}:{{scp_escape(dest)}}"
	if conf.verbosity >= 2
		print(cmd)
	shell_execute(cmd)

string remote_interface(string action, string[] params)
	string cmd = "ssh {{conf.server}} python3 /home/michi/Tools/alex/if-{{action}}.py"
	for p in params
		cmd += " \\\"{{ssh_escape(p)}}\\\""
	#cmd += ""
	if conf.verbosity >= 2
		print(cmd)
	return shell_exec(cmd).trim()

string call_alex(string action, string[] params)
	string cmd = "ssh {{conf.server}} {{CMD}} {{action}}"
	for p in params
		#cmd += " \\\"" + ssh_escape(p) + "\\\""
		cmd += " " + ssh_escape(p)
	#cmd += ""
	if conf.verbosity >= 2
		print(cmd)
	return shell_exec(cmd).trim()

class RemoteFile extends LocalFile

RemoteFile[] remote_parse(string r)
	if conf.verbosity > 3
		print(r)
	RemoteFile[] rfiles
	let list = r.explode("\n")
	for l in list
		let parts = l.explode("\t")
		if len(parts) < 7
			continue
		RemoteFile rf
		rf.id = parts[0]
		rf.mtime = int(parts[1])
		rf.size = int(parts[2])
		rf.hash = parts[3]
		#rf.remote_path = parts[4]
		rf.name = parts[5]
		string extension = parts[6]
		rf.path = "{{rf.name}}.{{extension}}" # temporary
		rf.path = absolute_path(rf.apply_structure(conf.default_structure))
		for p in parts[8:]
			rf.tags.add(alex2tag(p))
		if parts[7] == "m"
			rf.set("quality=medium")
		rf.set(NONLOCAL)
		rfiles.add(rf)
	return rfiles

RemoteFile[] remote_find(string filter, string quality)
	string r = call_alex("find", [filter, "--{{quality}}"])
	return remote_parse(r)

RemoteFile[] remote_find_by_hash_chunk(string[] hashes)
	string r = call_alex("sp by-hash", hashes)
	return remote_parse(r)

RemoteFile[] remote_find_by_id_chunk(string[] ids, string quality)
	string cmd = "sp by-id"
	if quality == MEDIUM
		cmd = "sp by-id-medium"
	string r = call_alex(cmd, ids)
	return remote_parse(r)

RemoteFile[] remote_find_by_hash(string[] hashes)
	RemoteFile[] rr
	int done = 0
	while done < len(hashes)
		int ee = min(done + CHUNK_SIZE, len(hashes))
		if conf.verbosity >= 2
			print("hash... {{done}}:{{ee}} of {{len(hashes)}}")
		let r = remote_find_by_hash_chunk(hashes[done:ee])
		for x in r
			rr.add(x)
		done = ee
	return rr

RemoteFile[] remote_find_by_id(string[] ids, string quality)
	RemoteFile[] rr
	int done = 0
	while done < len(ids)
		int ee = min(done + CHUNK_SIZE, len(ids))
		if conf.verbosity >= 2
			print("ids... {{done}}:{{ee}} of {{len(ids)}}")
		let r = remote_find_by_id_chunk(ids[done:ee], quality)
		for x in r
			rr.add(x)
		done = ee
	return rr



void sync_add_pure_remote(RemoteFile rf, string root, string structure)
	if !db.has_id(rf.id)
		#string rel_name = sync.guess_dir(["parts"]) + rf.rel_name.replace("/", " - ")
		try
			LocalFile* lf = db.by_hash(rf.hash)
			if len(lf.id) > 0
				print("HASH COLLISION  {{rel_path(lf.path)}}  <->  REMOTE...")
			lf.id = rf.id
			#if conf.verbose
			print("RELINK  {{rel_path(lf.path)}}") # + "  ->  " + rf.id)
			lf.sync_tags(rf.tags)
			lf.name = rf.name
			return
		except
			# new remote file
			LocalFile ll = rf
			ll.path = root + ll.apply_structure(structure)
			ll.set(NONLOCAL)
			db.files.add(ll)
			print("ADD PURE REMOTE  {{rel_path(ll.path)}}")
		
			if conf.show_meta or conf.verbosity >= 2
				ll.show_info("      ")


void remote_sync_by_filter(string filter, string quality, string structure, string dir)
	let rfiles = remote_find(filter, quality)
	for rf in rfiles
		try
			LocalFile *lf = db.find_by_id(rf.id)
			sync_file(rf, lf)
		except
			sync_add_pure_remote(rf, dir, structure)
	db.save()

void remote_download(out LocalFile f)
	print("DOWNLOADING  {{rel_path(f.path)}}")
	if !f.in_db()
		print("ERROR: not in db")
		return

	if !f.pure_remote() and !f.is(CHANGED_FILE)
		print("ERROR: neither pure remote nor changed")
		return
	
	make_all_dirs(f.path)
	scp_download(f.remote_path(), f.path)

	f.size = Filesystem.size(f.path)
	f.mtime = Filesystem.mtime(f.path).time
	f.hash = Filesystem.hash(f.path, "md5")
	f.unset(NONLOCAL)
	f.unset(CHANGED_FILE)
	db.save()


void remote_upload(out LocalFile f)
	print("UPLOADING  {{rel_path(f.path)}}")
	
	if !f.pure_local() and !f.is(CHANGED_FILE)
		print("ERROR: no need to push")
		return
	
	if Filesystem.extension(f.path) == ""
		print("ERROR: remote does not like files without extension: {{rel_path(f.path)}}")
		return
	
	string _remote_path = ALEX_IN + "{{f.hash}}.{{Filesystem.extension(f.path)}}"
	
	scp_upload(f.path, _remote_path)
	
	if !f.pure_local()
		print("TODO: upload edited file")
		return
	
	string r = remote_interface("add", [_remote_path])
	if r[:2] != "ok"
		print("ERROR: upload... {{r}}")
		return
	int nnn = r[3:].find("\n", 0)
	if nnn >= 0
		print("REMOTE WARNING: {{r[4+nnn:]}}")
	f.id = r[3:].explode("\n")[0]
	if conf.verbosity >= 2
		print("ID: {{f.id}}")
	db.save()

	#string tagsh = tags2strh(f.tags)
		
	#string r = yii("upload", [f.remote_path, f.name.hex(), f.hash, f.mtime.str(), tagsh])
	#print("answer: " + r)
	
	#string[] p = r.explode("\t")
#	if len(p) >= 2
#		if p[0] == "ok"
#			f.id = p[1]
#			db.save()
#			return
#		if p[0] == "duplicate"
#			print("hash already in db  -> RELINK")
#			f.id = p[1]
#			db.save()
#			return
#		if p[0] == "bad hash"
#			print("ERROR: upload failed?")
#			return
#	print("ERROR: ????")


void remote_upload_meta(out LocalFile f)
	
	if f.pure_local()
		print("ERROR: pure local")
		return

	string tags = tags2strh(f.tags)	
	
	string r = remote_interface("override-meta", [f.id, f.name.hex(), tags])
	
	if r.tail(2) == "ok"
		if conf.verbosity >= 2
			print("yay")
		f.unset(CHANGED_META)
		db.save()
		return
	if r == "not found"
		print("ERROR: remote did not find")
		return
	print(r)
	print("ERROR: ????")


RemoteFile[] remote_get_meta(LocalFile*[] files)
	string[] ids_perfect
	string[] ids_medium
	for f in files
		if f.is("quality=medium")
			ids_medium.add(f.id)
		else
			ids_perfect.add(f.id)
	RemoteFile[] rfiles, rfiles_medium
	if len(ids_perfect) > 0
		rfiles = remote_find_by_id(ids_perfect, PERFECT)
	if len(ids_medium) > 0
		rfiles_medium = remote_find_by_id(ids_medium, MEDIUM)
	for rf in rfiles_medium
		rfiles.add(rf)
	return rfiles

void remote_download_meta(out LocalFile*[] files)
	let rfiles = remote_get_meta(files)
	for rf in rfiles
		for lf in files
			if rf.id == lf.id
				print("META  {{rel_path(lf.path)}}")
				if conf.pull_tags_only_add
					for t in rf.tags
						if tag_multi(t.key)
							lf.tag_add(t)
						else
							lf.tag_set(t)
				else
					lf.name = rf.name
					lf.tags = rf.tags
					lf.unset(CHANGED_META)
				db.dirty = true

void remote_sync_by_id(out LocalFile*[] files)
	LocalFile*[] files_wanted
	for f in files
		if !f.pure_remote() and !f.pure_local()
			files_wanted.add(f)
	let rfiles = remote_get_meta(files_wanted)
	for rf in rfiles
		for lf in files
			if lf.id == rf.id
				sync_file(rf, lf)

void sync_file(RemoteFile rf, out LocalFile* lf)
	if conf.verbosity >= 2
		print("sync {{lf.path}}")
	lf.unset(CHANGED_FILE)
	lf.unset(CHANGED_META)
	db.dirty = true
	if rf.is("quality=medium")
		lf.set("quality=medium")
	if lf.pure_local()
		if conf.verbosity >= 1
			print("RELINK  {{rel_path(lf.path)}}")
		lf.id = rf.id
		#db.dirty = true
	if lf.hash != rf.hash
		if conf.verbosity >= 1
			print("CHANGED HASH  {{rel_path(lf.path)}}")
		if conf.verbosity >= 2
			print("{{lf.hash}} <-> {{rf.hash}}")
		lf.set(CHANGED_FILE)
		#db.dirty = true
	if lf.name != rf.name
		if conf.verbosity >= 1
			print("CHANGED NAME  {{rel_path(lf.path)}}")
		if conf.verbosity >= 2
			print("{{lf.name}} <-> {{rf.name}}")
		lf.set(CHANGED_META)
		#db.dirty = true
	if !tags_equal(lf.tags, rf.tags)
		if conf.verbosity >= 1
			print("CHANGED TAGS  {{rel_path(lf.path)}}")
		if conf.verbosity >= 2
			print(tags2str(tags_sort(lf.tags)))
			print(tags2str(tags_sort(rf.tags)))
		lf.set(CHANGED_META)
		#db.dirty = true


void remote_sync_pure_locals_by_hash(out LocalFile*[] files)
	string[] hashes
	for f in files
		if f.pure_local()
			hashes.add(f.hash)
	if len(hashes) == 0
		return
	let rfiles = remote_find_by_hash(hashes)
	for rf in rfiles
		if conf.verbosity >= 2
			print(rf.hash)
		for lf in files
			if lf.hash == rf.hash
				sync_file(rf, lf)


use "config.kaba"
use "localdb.kaba"


string scp_escape(string s)
	string r = s
	r = r.replace("(", "\\\\\\(")
	r = r.replace(")", "\\\\\\)")
	r = r.replace("'", "\\\\\\'")
	r = r.replace(" ", "\\\\\\ ")
	return r

string ssh_escape(string s)
	string r = s
	r = r.replace(" ", "\\\\ ")
	r = r.replace("(", "\\\\(")
	r = r.replace(")", "\\\\)")
	r = r.replace("'", "\\\\'")
	return r


class RemoteFile extends LocalFile
	string rel_name
	override void show()
		if conf.verbose
			print("")
		print(path)
		if conf.verbose
			print("hash: " + hash)
			print("id:   " + id)
			print("size: " + size)
			//print(tags2str(tags))
			for t in tags
				print(t.str())

RemoteFile[] remote_parse(string r)
	RemoteFile[] rfiles
	string[] list = r.explode("\n")
	for l in list
		string[] parts = l.explode("\t")
		if parts.num < 6
			continue
		RemoteFile rf
		rf.id = parts[0]
		rf.mtime = parts[1].int()
		rf.size = parts[2].int()
		rf.hash = parts[3]
		rf.path = parts[4]
		rf.rel_name = parts[5]
		for i in 6:parts.num
			rf.tags.add(str2tag(parts[i]))
		rfiles.add(rf)
	return rfiles

RemoteFile[] remote_find(string filter, string options)
	string cmd = "ssh " + SERVER + " command=\""
	
	string quality = "perfect"
	if options.find("quality=medium", 0) >= 0
		quality = "medium"
	cmd += "php " + YII + " file/find-sisyphos \\\"" + ssh_escape(filter) + "\\\" " + quality + "; "
	cmd += "\""
	print(cmd)
	_exec_(cmd + " > " + TEMP_OUT)
		
	//tocopy.clear()
	//copysize = 0
	
	string r = FileRead(TEMP_OUT).trim()
	return remote_parse(r)
	//string[] rs = r.explode("-=-=-=-=-=\n")
	//return rs


void remote_sync_file(RemoteFile rf, ConfigDirSync sync)
	LocalFile *lf = db.find_by_id(rf.id)
	if lf
		if conf.pull_tags
			lf.sync_tags(rf.tags)
		
		// equal?
		if lf.hash == rf.hash
			if conf.verbose
				print("==  " + lf.path)
			return
		
		print("CHANGED  " + lf.path)
		/*if lf.is("nonlocal")
			FileToCopy ff
			ff.id = rf.id
			ff.remotepath = rf.path
			tocopy.add(ff)
			copysize += lf.size / 1024
			continue*/
				
		// ok... but should check for changes
	else
		string rel_name = sync.guess_dir(["parts"]) + rf.rel_name.replace("/", " - ")
		lf = db.find_by_hash(rf.hash)
		if lf
			if lf.id.num > 0
				print("HASH COLLISION  " + lf.path + "  <->  " + "REMOTE...")
			lf.id = rf.id
			//if conf.verbose
			print("RELINK  " + lf.path)// + "  ->  " + rf.id)
			lf.sync_tags(rf.tags)
			return
	
		// new remote file
		print("+R  " + rf.rel_name)
		LocalFile ll = rf
		ll.path = sync.dir + "/" + rf.rel_name
		ll.set("nonlocal")
		db.files.add(ll)
		
		if conf.verbose
			print("    id:   " + ll.id)
			print("    hash: " + ll.hash)
			print("    time: " + ll.mtime)
			print("    size: " + ll.size)

void remote_sync()
	for e in conf.dirs
		for s in e.syncs
			RemoteFile[] rfiles = remote_find(s.filter, s.options)
			for f in rfiles
				remote_sync_file(f, s)
			db.save()

use "config.kaba"
use "language.kaba"

class Resource
	string type
	string id
	string title
	string tooltip
	string[] options
	bool enabled
	int x, y, w, h
	int page
	string image
	Resource[] children
	//void reset()
	extern void show(int indent)
	extern string str(int indent)
	
extern Resource ParseResource(string buffer, bool literally)

Resource[] resources

class DemoDialog extends Dialog
	void __init__(string source)
		super.__init__("", 100, 100, nil, false)
		setBorderWidth(10)
		fromSource(source)
		event("close", &destroy)

void show(string filename)
	string source = FileRead(filename)
	//print(source)
	Resource r = ParseResource(source, true)
	//r.show(0)
	print(r.str(0))
	
	if r.type == "Dialog"
		Dialog* dlg = new DemoDialog(source)
		dlg.run()
	else
		print("don't know how to show a " + r.type)


	

void get_ids(Language l, Resource r, string ns)
	lang_id_add(l.ids, r.id, r.title, r.tooltip, ns)
	
	for c in r.children
		get_ids(l, c, ns)


Resource[] load_all_huis(bool literally)
	Resource[] res
	DirEntry[] files = DirSearch(conf.dir, "*.hui", false)
	for f in files
		string source = FileRead(conf.dir + f.name)
		Resource r = ParseResource(source, literally)
		if r.type == "Dialog" or r.type == "Menu" or r.type == "Toolbar"
			res.add(r)
		else
			print(" UNKNOWN TYPE " + f.name + ": " + r.type)
	return res
		

void find_all_ids(Language lang, Resource[] res)
	for r in res
		get_ids(lang, r, r.id)
	
//	lang.show()


Language load_own_lang(bool literally)
	Language own
	own.name = conf.own_lang_name
	
	print("loading own language: " + own.name)
	resources = load_all_huis(literally)
	find_all_ids(own, resources)
	
	parse_source_code_dir(conf.source_code_dir, own)
	own.sort()
	print("    " + own.ids.num + " ids, " + own.texts.num + " texts")
	
	return own

bool check_lang(Language l, Language own, bool create_file)
	print("checking " + l.name)
	int nerrors = 0
	
	File *f
	if create_file
		f = FileCreateText(conf.dir + "TRANS")
	
	// check ids
	for i in own.ids
		
		bool found_title = false
		bool found_tooltip = false
		for j in l.ids
			if j.id == i.id
				found_title = (j.title.num > 0)
				found_tooltip = (j.tooltip.num > 0)
				break
		if i.title.num > 0 and !found_title
			if create_file
				f << "# id:" + i.id
				f << i.title.escape()
				f << ""
			//print("    MISSING title for " + i.id)
			nerrors ++
		if i.tooltip.num > 0 and !found_tooltip
			if create_file
				f << "# tooltip:" + i.id
				f << i.tooltip.escape()
				f << ""
			//print("    MISSING tooltip for " + i.id)
			nerrors ++
	
	// check texts
	for t in own.texts
		bool found = false
		for tt in l.texts
			if t.orig == tt.orig
				found = (tt.trans.num > 0)
				break
		if !found
			if create_file
				f << "# text"
				f << t.orig.escape()
				f << ""
			//print("    MISSING text: " + t.orig)
			nerrors ++
	
	if nerrors == 0
		print("    ok, good translation!")
	else
		print("    " + nerrors + " missing translations")

	if create_file
		delete f
	return nerrors == 0

void parse_source_code(string source, Language l)
	int pos0 = 0
	while true
		int pos = source.find("_(\"", pos0)
		if pos < 0
			break
		pos += 3
		int length = 0
		for i in 0:1024
			if source[pos + i] == '\'
				i ++
				continue
			if source[pos + i] == '"'     // "
				length = i
				break
		
		LangText t
		t.orig = str_m2utf8(source.substr(pos, length)).unescape()
		
		if t.orig.num > 0
			bool found = false
			for tt in l.texts
				if tt.orig == t.orig
					found = true
					break
			if !found
				l.texts.add(t)
		//print("    " + source.substr(pos, length))
		pos0 = pos + length

void parse_source_code_dir(string dir, Language l)
	DirEntry[] files = DirSearch(dir, "*.cpp", true)
	for f in files
		if f.is_dir
			parse_source_code_dir(dir + f.name + "/", l)
		else
			//print(dir + f.name)
			string source = FileRead(dir + f.name)
			parse_source_code(source, l)




void write_resource(File *f, Resource r)
	f << r.type
	if r.id.head(1) == "/"
		f << r.id.substr(1, -1)
	else
		f << r.id
	f << r.options.join(",")
	f << r.image
	f << r.enabled
	f << r.x
	f << r.y
	f << r.w
	f << r.h
	f << r.page
	f << r.children.num
	for c in r.children
		write_resource(f, c)


void write_language(File *f, Language l)
	LangID[] ids = l.get_useful_ids()
	LangText[] texts = l.get_useful_texts()

	f << "// Language"
	f << l.name
	f << "// Number Of IDs"
	f << ids.num
	f << "// Text"
	for i in ids
		f << i.id
		f << i.title.escape()
		f << i.tooltip.escape()
	f << "// Num Language Strings"
	f << texts.num
	f << "// Text"
	for t in texts
		f << t.orig.escape()
		f << t.trans.escape()

void export_resources(Resource[] res, Language own, Language[] langs)
	File *f = FileCreateText(conf.export_dir + "hui_resources.txt")
	f << "t5"
	f << "// Number Of Resources"
	f << res.num
	for r in res
		f << "// Resource"
		write_resource(f, r)
	f << "// Number Of Languages"
	f << (langs.num + 1)
	write_language(f, own)
	for l in langs
		write_language(f, l)


void action_export(string dir)
	conf.set_dir(dir)
	conf.load()
	
	Language own = load_own_lang(true)//false)
	
	Language[] langs = load_prelangs()
	
	export_resources(resources, own, langs)
	
void action_check(string dir)
	conf.set_dir(dir)
	conf.load()
	
	Language own = load_own_lang(true)
	
	Language[] langs = load_prelangs()
	
	for l in langs
		check_lang(l, own, false)

void patch_language(Language l, Language own, string filename)
	try
		string ttt = FileRead(filename)
		string[] lines = ttt.explode("\n")
		for i in 0:lines.num/3
			string a = lines[i*3]
			string b = lines[i*3+1]
			string c = lines[i*3+2]
			if c == ""
				continue
			if a.head(5) == "# id:"
				l.add_id(a.substr(5, -1), c.unescape(), "")
			if a.head(10) == "# tooltip:"
				l.add_id(a.substr(10, -1), "", c.unescape())
			if a == "# text"
				l.add_text(b.unescape(), c.unescape())
	except
		nil

void action_translate(string filename)
	conf.set_dir(filename.dirname())
	conf.load()
	
	Language own = load_own_lang(true)
	
	Language l = load_prelang(filename)
	if check_lang(l, own, true)
		return
	
	try
		shell_execute("sgribthmaker \"" + conf.dir + "TRANS\"")
		patch_language(l, own, conf.dir + "TRANS")
		check_lang(l, own, false)
		l.save()
	except
		nil
	try
		FileDelete(conf.dir + "TRANS")
	except
		nil

void action_add(string filename, string name)
	conf.set_dir(filename.dirname())
	conf.load()
	
	Language l
	l.name = name
	l.filename = filename
	
	l.save()

void main(string[] arg)

	if arg.num > 0
		if arg[0] == "check" and arg.num >= 2
			action_check(arg[1])
		else if arg[0] == "export" and arg.num >= 2
			action_export(arg[1])
		else if arg[0] == "translate" and arg.num >= 2
			action_translate(arg[1])
		else if arg[0] == "add" and arg.num >= 3
			action_add(arg[1], arg[2])
		else if arg[0] == "demo" and arg.num >= 2
			show(arg[1])
		else
			print("???")
			print("check <DIR>")
			print("export <DIR>")
			print("translate <PRELANG-FILE>")
			print("add <PRELANG-FILE> <LANGUAGE-NAME>")
			print("demo <HUI-FILE>")

use os
use config
use language
use resource
use source
use demo
use export
	

void get_ids(Language l, Resource r, string ns)
	lang_id_add(l.ids, r.id, r.title, r.tooltip, ns)
	
	for c in r.children
		get_ids(l, c, ns)


void find_all_ids(Language lang, Resource[] res)
	for r in res
		get_ids(lang, r, r.id)
	
#	lang.show()


Language load_own_lang(bool literally)
	Language own
	own.name = conf.own_lang_name
	
	print("loading own language: {{own.name}}")
	resources = load_all_huis(literally)
	find_all_ids(own, resources)
	
	parse_source_code_dir(conf.source_code_dir, own)
	own.sort()
	print("    {{len(own.ids)}} ids, {{len(own.texts)}} texts")
	
	return own

	
void action_check(string dir)
	conf.set_dir(dir)
	conf.load()
	
	Language own = load_own_lang(true)
	
	Language[] langs = load_prelangs()
	
	for l in langs
		check_lang(l, own, false)

void action_export(string dir)
	conf.set_dir(dir)
	conf.load()
	
	Language own = load_own_lang(true)#false)
	
	Language[] langs = load_prelangs()
	
	export_resources(resources, own, langs)

void patch_language(Language l, Language own, string filename)
	try
		string ttt = Filesystem.read(filename)
		string[] lines = ttt.explode("\n")
		for i in 0:lines.num/3
			string a = lines[i*3]
			string b = lines[i*3+1]
			string c = lines[i*3+2]
			if c == ""
				continue
			if a.head(5) == "# id:"
				l.add_id(a[5:], c.unescape(), "")
			if a.head(10) == "# tooltip:"
				l.add_id(a[10:], "", c.unescape())
			if a == "# text"
				l.add_text(b.unescape(), c.unescape())
	except
		pass

void action_translate(string filename)
	conf.set_dir(filename.dirname())
	conf.load()
	
	Language own = load_own_lang(true)
	
	Language l = load_prelang(filename)
	if check_lang(l, own, true)
		return
	
	try
		shell_execute("sgribthmaker \"{{conf.dir}}TRANS\"")
		patch_language(l, own, conf.dir + "TRANS")
		check_lang(l, own, false)
		l.save()
	except
		pass
	try
		Filesystem.delete(conf.dir + "TRANS")
	except
		pass

void action_add(string filename, string name)
	conf.set_dir(filename.dirname())
	conf.load()
	
	Language l
	l.name = name
	l.filename = filename
	
	l.save()


void swap_translate_lang(Language own, Language l, string target)
	# own.ids are ok
	# own.texts need ...
	for t in own.texts
		t.trans = t.orig
		t.orig = ""
		for tt in l.texts
			if tt.orig == t.trans
				t.orig = tt.trans
				break
	own.filename = target
	own.save()

void swap_translate_gui(Resource r, Language l, string ns)
	for i in l.ids
		if i.id == r.id or i.id == ns + "/" + r.id
			r.title = i.title
			r.tooltip = i.tooltip
	for c in r.children
		swap_translate_gui(c, l, ns)

void swap_translate_guis(Language l)
	for r,i in resources
		print("----------")
		print(resource_files[i])
		print(r.str(0))
		swap_translate_gui(r, l, r.id)
		print(r.str(0))
		File* f = Filesystem.create(resource_files[i])
		f.write(r.str(0))
		delete f

void action_swap(string source, string target)
	conf.set_dir(source.dirname())
	conf.load()
	
	Language own = load_own_lang(true)
	
	Language l = load_prelang(source)
	if !check_lang(l, own, true)
		print("ERROR: missing translations")
		return
	
	swap_translate_lang(own, l, target)
	
	swap_translate_guis(l)
	
	swap_translate_source(conf.source_code_dir, l)
	
	# should also translate other languages... but... screw it

void show_help()
	print("check <DIR>")
	print("export/x <DIR>")
	print("translate/t <PRELANG-FILE>")
	print("add <PRELANG-FILE> <LANGUAGE-NAME>")
	print("swap <PRELANG-FILE> <NEW-PRELANG-FILE>")
	print("demo <HUI-FILE>")
	

void main(string[] arg)

	if arg.num > 0
		if arg[0] == "check" and arg.num >= 2
			action_check(arg[1])
		else if arg[0] == "export" or arg[0] == "x"
			if arg.num >= 2
				action_export(arg[1])
			else
				action_export("./")
		else if (arg[0] == "translate" or arg[0] == "t") and arg.num >= 2
			action_translate(arg[1])
		else if arg[0] == "add" and arg.num >= 3
			action_add(arg[1], arg[2])
		else if arg[0] == "swap" and arg.num >= 3
			action_swap(arg[1], arg[2])
		else if arg[0] == "demo" and arg.num >= 2
			action_demo(arg[1])
		else
			print("???")
			show_help()
	else
		show_help()

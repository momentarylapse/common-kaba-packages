use "config.kaba"

class Resource
	string type
	string id
	string title
	string tooltip
	string[] options
	bool enabled
	int x, y, w, h
	int page
	string image
	Resource[] children
	//void reset()
	extern void show(int indent)
	extern string str(int indent)
	
extern Resource ParseResource(string buffer, bool literally)

class DemoDialog extends Dialog
	void __init__(string source)
		super.__init__("", 100, 100, nil, false)
		setBorderWidth(10)
		fromSource(source)
		event("close", &destroy)

void show(string filename)
	string source = FileRead(filename)
	//print(source)
	Resource r = ParseResource(source, true)
	//r.show(0)
	//print(r.str(0))
	
	if r.type == "Dialog"
		Dialog* dlg = new DemoDialog(source)
		dlg.run()
	else if r.type == "Menu"
		print("don't know how to show a menu")
	else
		print("don't know how to show a " + r.type)



class LangID
	string id
	string title
	string tooltip

class LangText
	string orig
	string trans

class Language
	string filename
	string name
	LangID[] ids
	LangText[] texts
	void show()
		print(name)
		for i in ids
			print(i.id)
			print("\t" + i.title)
			print("\t" + i.tooltip)
			
		for t in texts
			print(t.orig)
			print("\t" + t.trans)
	void add_id(string id, string title, string tooltip)
		for i in ids
			if i.id == id
				if title.num > 0
					i.title = title
				if tooltip.num > 0
					i.tooltip = tooltip
				return
		LangID i
		i.id = id
		i.title = title
		i.tooltip = tooltip
		ids.add(i)
	void add_text(string orig, string trans)
		for t in texts
			if t.orig == orig
				if trans.num > 0
					t.trans = trans
				return
		LangText t
		t.orig = orig
		t.trans = trans
		texts.add(t)
		
	void save()
		File* f = FileCreateText(filename)
		f << "// Language"
		f << name
		f << "// Num IDs"
		f << ids.num
		f << "// Data (ID,Text,Tooltip)"
		for i in ids
			f << i.id
			f << i.title
			f << i.tooltip
		f << "// Num Language Strings"
		f << texts.num
		f << "// Data (ID,Text)"
		for t in texts
			f << t.orig
			f << t.trans
		delete f


void lang_id_add(LangID[] ids, string id, string title, string tooltip, string ns)
	if id == "?" or id == ""
		return
	string cid = id
	if cid.find("/", 0) < 0
		//if ns != id
		cid = ns + "/" + id
	for i in ids
		if i.id == cid
			return
	LangID a
	a.id = cid
	a.title = title
	a.tooltip = tooltip
	ids.add(a)
	

void get_ids(Resource r, LangID[] ids, string ns)
	lang_id_add(ids, r.id, r.title, r.tooltip, ns)
	
	for c in r.children
		get_ids(c, ids, ns)

void sort_ids(LangID[] ids)
	for i in 0:ids.num
		for j in i+1:ids.num
			if ids[i].id > ids[j].id
				LangID t = ids[i]
				ids[i] = ids[j]
				ids[j] = t

void sort_texts(LangText[] texts)
	for i in 0:texts.num
		for j in i+1:texts.num
			if texts[i].orig > texts[j].orig
				LangText t = texts[i]
				texts[i] = texts[j]
				texts[j] = t

void find_all_ids(Language lang)
	DirEntry[] files = DirSearch(conf.dir, "*.hui", false)
	for f in files
		string source = FileRead(conf.dir + f.name)
		Resource r = ParseResource(source, true)
		//print(r.str(0))
		
		get_ids(r, lang.ids, r.id)
	
	sort_ids(lang.ids)
	
//	lang.show()


Language load_own_lang()
	Language own
	own.name = conf.own_lang_name
	
	print("loading own language: " + own.name)
	find_all_ids(own)
	
	parse_source_code_dir(conf.source_code_dir, own)
	sort_texts(own.texts)
	print("    " + own.ids.num + " ids, " + own.texts.num + " texts")
	
	return own

Language load_prelang(string filename)
	Language l
	l.filename = filename
	//try
		File* f = FileOpenText(filename)
		string t
		int n
		f >> t
		f >> l.name
		f >> t
		f >> n
		f >> t
		for i in 0:n
			LangID id
			f >> id.id
			f >> id.title
			f >> id.tooltip
			l.ids.add(id)
		f >> t
		f >> n
		f >> t
		for i in 0:n
			LangText tt
			f >> tt.orig
			f >> tt.trans
			l.texts.add(tt)
		delete f
		//l.show()
		return l
	//except Exception as e
	//	print("ERROR: " + e.message())

bool check_lang(Language l, Language own, bool create_file)
	print("checking " + l.name)
	int nerrors = 0
	
	File *f
	if create_file
		f = FileCreateText(conf.dir + "TRANS")
	
	// check ids
	for i in own.ids
		
		bool found_title = false
		bool found_tooltip = false
		for j in l.ids
			if j.id == i.id
				found_title = (j.title.num > 0)
				found_tooltip = (j.tooltip.num > 0)
				break
		if i.title.num > 0 and !found_title
			if create_file
				f << "# id:" + i.id
				f << i.title
				f << ""
			//print("    MISSING title for " + i.id)
			nerrors ++
		if i.tooltip.num > 0 and !found_tooltip
			if create_file
				f << "# tooltip:" + i.id
				f << i.tooltip
				f << ""
			//print("    MISSING tooltip for " + i.id)
			nerrors ++
	
	// check texts
	for t in own.texts
		bool found = false
		for tt in l.texts
			if t.orig == tt.orig
				found = (tt.trans.num > 0)
				break
		if !found
			if create_file
				f << "# text"
				f << t.orig
				f << ""
			//print("    MISSING text: " + t.orig)
			nerrors ++
	
	if nerrors == 0
		print("    ok, good translation!")
	else
		print("    " + nerrors + " missing translations")

	if create_file
		delete f
	return nerrors == 0

Language[] load_prelangs()
	Language[] langs
	DirEntry[] files = DirSearch(conf.dir, "*.prelang", false)
	for f in files
		Language l = load_prelang(conf.dir + f.name)
		langs.add(l)
	return langs

void parse_source_code(string source, Language l)
	int pos0 = 0
	while true
		int pos = source.find("_(\"", pos0)
		if pos < 0
			break
		pos += 3
		int length = 0
		for i in 0:1024
			if source[pos + i] == '\'
				i ++
				continue
			if source[pos + i] == '"'     // "
				length = i
				break
		
		LangText t
		t.orig = str_m2utf8(source.substr(pos, length)).replace("\t", "\\t")
		
		if t.orig.num > 0
			bool found = false
			for tt in l.texts
				if tt.orig == t.orig
					found = true
					break
			if !found
				l.texts.add(t)
		//print("    " + source.substr(pos, length))
		pos0 = pos + length

void parse_source_code_dir(string dir, Language l)
	DirEntry[] files = DirSearch(dir, "*.cpp", true)
	for f in files
		if f.is_dir
			parse_source_code_dir(dir + f.name + "/", l)
		else
			//print(dir + f.name)
			string source = FileRead(dir + f.name)
			parse_source_code(source, l)
		
		

void action_export(string dir)
	conf.set_dir(dir)
	conf.load()
	
	Language own = load_own_lang()
	
	Language[] langs = load_prelangs()
	
void action_check(string dir)
	conf.set_dir(dir)
	conf.load()
	
	Language own = load_own_lang()
	
	Language[] langs = load_prelangs()
	
	for l in langs
		check_lang(l, own, false)

void patch_language(Language l, Language own, string filename)
	try
		string ttt = FileRead(filename)
		string[] lines = ttt.explode("\n")
		for i in 0:lines.num/3
			string a = lines[i*3]
			string b = lines[i*3+1]
			string c = lines[i*3+2]
			if c == ""
				continue
			if a.head(5) == "# id:"
				l.add_id(a.substr(5, -1), c, "")
			if a.head(10) == "# tooltip:"
				l.add_id(a.substr(5, -1), "", c)
			if a == "# text"
				l.add_text(b, c)
	except
		nil

void action_translate(string filename)
	conf.set_dir(filename.dirname())
	conf.load()
	
	Language own = load_own_lang()
	
	Language l = load_prelang(filename)
	if check_lang(l, own, true)
		return
	
	try
		shell_execute("sgribthmaker \"" + conf.dir + "TRANS\"")
		patch_language(l, own, conf.dir + "TRANS")
		check_lang(l, own, false)
		l.save()
	except
		nil
	try
		FileDelete(conf.dir + "TRANS")
	except
		nil

void action_add(string filename, string name)
	conf.set_dir(filename.dirname())
	conf.load()
	
	Language l
	l.name = name
	l.filename = filename
	
	l.save()

void main(string[] arg)

	if arg.num > 0
		if arg[0] == "check" and arg.num >= 2
			action_check(arg[1])
		else if arg[0] == "export" and arg.num >= 2
			action_export(arg[1])
		else if arg[0] == "translate" and arg.num >= 2
			action_translate(arg[1])
		else if arg[0] == "add" and arg.num >= 3
			action_add(arg[1], arg[2])
		else if arg[0] == "demo" and arg.num >= 2
			show(arg[1])
		else
			print("???")
			print("check <DIR>")
			print("export <DIR>")
			print("translate <PRELANG-FILE>")
			print("add <PRELANG-FILE> <LANGUAGE-NAME>")
			print("demo <HUI-FILE>")

use os
use hui
use circuit
use panel

class EditorPanel extends CircuitPanel
	CircuitEditor* ed
	void __init__(CircuitEditor e)
		super.__init__(e.c)
		ed = &e
	override void on_selection_change()
		ed.load_from_part(nil)
		if sel.type == SEL_TYPE_EDGE
			ed.load_from_part(ed.c.edges[sel.index])

class CircuitEditor extends Window
	Circuit c
	CircuitPanel* panel
	
	
	void __init__(string[] arg)
		super.__init__("Circuit Editor", 800, 600)
		from_source("
Grid root ''
	.
	Grid ? '' width=250 vertical noexpandx
		Group ? 'Add'
			ListView add-type 'what' nobar height=200 noexpandy
		Group ? 'Part'
			ListView params 'name\\\\value' nobar format=tT height=120 noexpandy expandx
		Group ? 'Simulation'
			Grid ? '' vertical
				Grid ? ''
					Text ? 'time'
					SpinButton t '5.0' range=0:100:0.1 expandx
					---|
					Text ? 'dt'
					SpinButton dt '0.01' range=0:1:0.001
					---|
					Text ? 'I input'
					SpinButton input-amp '1' range=0:100:0.001
					---|
					Text ? 'f input'
					SpinButton input-freq '1' range=0:100:0.001
					---|
					Text ? 'type'
					ComboBox input-type '⎻\\\\∿\\\\⎍\\\\◢'
				Button simulate 'Run' expandx")
		panel = new EditorPanel(self)
		embed(panel, "root", 0,0)
		toolbar(0).from_source("
Toolbar toolbar ''
	Item new 'New' image=hui:new
	Item open 'Open' image=hui:open
	Item save 'Save' image=hui:save
	Separator
	Item simulate 'Run' image=hui:media-play")
		
		set_maximized(true)
		
		for t in 0:NUM_TYPES
			set_string("add-type", edge_name(t))
		set_string("add-type", "Node")
		
		if len(arg) > 0
			c.import(Filesystem.read_text(arg[0]))
		
		event("new", on_new)
		event("open", on_open)
		event("save", on_save)
		event("simulate", on_simulate)
		event("add-type", on_add_type)
		event_x("params", "hui:change", on_param)
		load_from_part(nil)
	
	void on_new()
		panel.res.clear()
		c.reset_default()
		panel.redraw()
	
	void on_save()
		if FileDialogSave(self, "Save the circuit", "", "*.circuit", "*.circuit")
			Filesystem.write_text(HuiFilename, c.export())
	
	void on_open()
		if FileDialogOpen(self, "Load the circuit", "", "*.circuit", "*.circuit")
			c.import(Filesystem.read_text(HuiFilename))
	
	void on_param()
		int row = GetEvent().row
		string p = get_cell("params", row, 1)
		if panel.sel.type == SEL_TYPE_EDGE
			c.edges[panel.sel.index].param[row] = float(p)
	
	void load_from_part(Edge *e)
		reset("params")
		if !e
			return
		let names = e.param_names()
		for n,i in names
			add_string("params", n + "\\" + e.param[i])
			
		

		
	void on_simulate()
		float duration = get_float("t")
		float dt = get_float("dt")
		float I = get_float("input-amp")
		float f = get_float("input-freq")
		int type = get_int("input-type")
		panel.res.clear()
		c.reset_state()
		c.simulate(duration, dt, I, f*2*pi, type, panel.res)
		panel.auto_scale()
		panel.redraw()
	
	
	void on_add_type()
		int t = get_int("")
		panel.first_node = -1
		if t == NUM_TYPES
			panel.mode = MODE_ADD_NODE
		else if t >= 0
			panel.mode = MODE_ADD_EDGE
			panel.add_type = t
		panel.redraw()

void main(string[] arg)
	Window* w = new CircuitEditor(arg)
	w.run()

use hui
use gl
use os
use image.Image
use cloud
use cloud.pcd
use visualization
use visualization.cloud_renderer

func large_num(i: int) -> string
	let s = str(i)
	if len(s) > 6
		return s[:-6] + "," + s[-6:-3] + "," + s[-3:]
	if len(s) > 3
		return s[:-3] + "," + s[-3:]
	return s

func is_cloud_file(f: os.Path) -> bool
	return f.extension() in ["pcd", "ply"]

class MyWindow extends visualization.RenderWindow
	var cloud_renderer: cloud_renderer.PointCloudRenderer
	var points: cloud.Point[]
	
	var current: int[]

	func __init__()
		super.__init__("Cloud explorer")
		set_options("", "headerbar")
		set_title("Cloud explorer") # hui bug :P
		
	#	set_target(":header:")
		
		set_target("side-panel")
		set_options("side-panel", "visible=true")
		add_grid("!epandy", 0, 0, "side-panel-grid")
		set_target("side-panel-grid")
		add_list_view("!nobar,width=250,expandy,selectmulti,format=m\\files", 0, 0, "list")
		for f in cfg.files
			if f.extension() == "ply" and os.Path(f.basename_no_ext() + ".pcd") in cfg.files
				add_string("list", "<span size='x-small' alpha='50%'>" + str(f) + "</span>")
			else
				add_string("list", "<span size='x-small'>" + str(f) + "</span>")
		event_x("list", "hui:select", on_list)
			
		load([cfg.initial_file], true)
		
		cloud_renderer.set_good_camera(self, cloud.get_points(points))
		#cam_pos = [170.03, 48.2536, -2.75144]
		
		on_post_init(init_data)
	
	func override mut draw_content()
		draw_magic_grid([0.5,0.5,0.5, 1])
		cloud_renderer.draw()
		
		set_mode_2d()
		set_font(14, false, false)
		gl.set_material(Color.BLACK, 0, 0, Color.WHITE)
		draw_str([0,0], "{{large_num(len(points))}} points  {{len(current)}} files")
		gl.set_material(Color.BLACK, 0, 0, Color.GRAY)
		set_font(10, false, false)
		draw_str([0,20], "cam: {{cam_pos}}")
			
	func mut init_data()
		print("main.init_data")
		for c in ctx
			cloud_renderer.init_data(c)
			update_cloud_renderer()
	
	func override mut on_key_down_x(k: int)
		if k == hui.KEY_PAGE_DOWN
			load([loop(current[0]+1, 0, len(cfg.files))], true)
		if k == hui.KEY_PAGE_UP
			load([loop(current[0]-1, 0, len(cfg.files))], true)
		if k == hui.KEY_CONTROL + hui.KEY_B
			cloud_renderer.R = loop(cloud_renderer.R+1, 1.0, 4.0)
		if k == hui.KEY_CONTROL + hui.KEY_E
			export_cloud()
		if k == hui.KEY_C
			cam_pos = cloud.center_of_mass(cloud.get_points(points))
			set_message("jump to center")
		if k == hui.KEY_1
			cloud_renderer.color_mode = cloud_renderer.ColorMode.AUTO
			set_message("color mode: auto")
		if k == hui.KEY_2
			cloud_renderer.color_mode = cloud_renderer.ColorMode.INTENSITY
			set_message("color mode: intensity")
		
	
	func mut load(i: int[], update_ui: bool)
		current = i
		
		points.clear()
		for c in current
			cloud.append(points, pcd.load(pcd.quick_file(cfg.dir | cfg.files[c])))
	#	print(points |> (func(p: cloud.Point) p.intensity))
		update_cloud_renderer()
		if update_ui
			set_selection("list", current)
		force_redraw()
	
	func mut update_cloud_renderer()
		cloud_renderer.set_points(points)
	
	func mut set_points(p: cloud.Point[])
		points = p
		update_cloud_renderer()

	func mut on_list()
		load(get_selection(""), false)
	
	func export_cloud()
		let f = func(filename: os.Path)
			pcd.save(points, filename)
		hui.file_dialog_save(&self, "export cloud", "./", ["filter=*.pcd"]).then(f)

class Config
	var dir: os.Path
	var files: os.Path[]
	var initial_file = 0
var cfg: Config

func explore(arg: string[])
	let path: os.Path = arg[0]
	if os.fs.is_directory(path)
		cfg.dir = path
	else
		cfg.dir = path.parent()
		
	cfg.files = os.fs.search(cfg.dir, "*", "f")
		|> filter(f => is_cloud_file(f))
		
	if len(cfg.files) == 0
		raise(new Exception("no cloud files in {{cfg.dir}}"))
		
	if not os.fs.is_directory(path)
		let bn = path.basename()
		for i=>f in cfg.files
			if f == bn
				cfg.initial_file = i
		
	var w: shared[MyWindow] = new MyWindow()
	hui.fly_and_wait(w)

func main(arg: string[])

	var p = new os.CommandLineParser()
	p.info("explore", "gallery of cloud data sets")
##	p.cmd("-h/--help", "", "show help", func(a: string[]) p.show()) # FIXME kaba
	p.cmd("", "FILE_OR_DIR", "show all cloud files in a directory", func(a: string[]) explore(a))
	p.parse(arg)
	

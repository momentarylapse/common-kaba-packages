

struct Point
	pos: vec3
	intensity: f32

func get_points(cloud: Point[]) -> vec3[]
	return cloud |> (func(p: Point) p.pos)

func from_points(points: vec3[]) -> Point[]
	return points |> (func(p: vec3) Point(p, 1.0))


func append(out A: vec3[], B: vec3[])
	# since vec3[].append() is missing :(
	let n0 = len(A)
	A.resize(len(A) + len(B))
	as_binary(&A[n0], len(B) * sizeof(vec3)) = as_binary(&B[0], len(B) * sizeof(vec3))


func append(out A: Point[], B: Point[])
	# since vec3[].append() is missing :(
	let n0 = len(A)
	A.resize(len(A) + len(B))
	as_binary(&A[n0], len(B) * sizeof(Point)) = as_binary(&B[0], len(B) * sizeof(Point))

func random_sample(points: vec3[], n: int) -> vec3[]
	if len(points) == 0
		return points
	return [for i in 0:n points[rand(len(points))]]

func random_sample(points: Point[], n: i32) -> Point[]
	if len(points) == 0
		return points
	return [for i in 0:n points[rand(len(points))]]

func center_of_mass(points: vec3[]) -> vec3
	return sum(points) / len(points)

struct Box
	vmin, vmax: vec3
	
	func center() -> vec3
		return (vmin + vmax) / 2
	
	func size() -> vec3
		return vmax - vmin
	
	func inside(p: vec3) -> bool
		if p.x < vmin.x or p.x > vmax.x
			return false
		if p.y < vmin.y or p.y > vmax.y
			return false
		if p.z < vmin.z or p.z > vmax.z
			return false
		return true
	
	func map_rel(p: vec3, nx: i32, ny: i32, nz: i32) -> (i32,i32,i32)
		return [(p.x - vmin.x) / (vmax.x - vmin.x) * nx,
			(p.y - vmin.y) / (vmax.y - vmin.y) * ny,
			(p.z - vmin.z) / (vmax.z - vmin.z) * nz]
	
	func map_abs(i: (i32,i32,i32), nx: i32, ny: i32, nz: i32) -> vec3
		return vmin + [f32(i.e0) * (vmax.x - vmin.x) / f32(nx),
		               f32(i.e1) * (vmax.y - vmin.y) / f32(ny),
		               f32(i.e2) * (vmax.z - vmin.z) / f32(nz)]
	
	func map_abs(p: vec3) -> vec3
		return vmin + [p.x * (vmax.x - vmin.x),
		               p.y * (vmax.y - vmin.y),
		               p.z * (vmax.z - vmin.z)]

func bounding_box(points: vec3[]) -> Box
	if len(points) == 0
		return (vec3.0, vec3.0)
	var vmin = points[0]
	var vmax = points[0]
	for v in points
		vmin.x = min(vmin.x, v.x)
		vmin.y = min(vmin.y, v.y)
		vmin.z = min(vmin.z, v.z)
		vmax.x = max(vmax.x, v.x)
		vmax.y = max(vmax.y, v.y)
		vmax.z = max(vmax.z, v.z)
	return (vmin, vmax)

func moment2(points: vec3[], p0: vec3) -> mat3
	var m = mat3.0
	for p in points
		let q = p - p0
		m.e[0][0] += q.x^2
		m.e[1][1] += q.y^2
		m.e[2][2] += q.z^2
		m.e[0][1] += q.x*q.y
		m.e[0][2] += q.x*q.z
		m.e[1][2] += q.y*q.z
	m.e[1][0] = m.e[0][1]
	m.e[2][0] = m.e[0][2]
	m.e[2][1] = m.e[1][2]
	return m

func filter_box(points: vec3[], box: Box) -> vec3[]
	return points
		|> filter(p => box.inside(p))

func filter_box(points: Point[], box: Box) -> Point[]
	return points
		|> filter(p => box.inside(p.pos))

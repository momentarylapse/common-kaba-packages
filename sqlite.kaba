const string KABA_LINK = "/usr/lib/libsqlite3.so
	_sqlite3_open:sqlite3_open
	_sqlite3_close:sqlite3_close
	sqlite3_libversion_number:sqlite3_libversion_number
	_sqlite3_prepare:sqlite3_prepare
	_sqlite3_step:sqlite3_step
	_sqlite3_finalize:sqlite3_finalize
	_sqlite3_column_count:sqlite3_column_count
	_sqlite3_column_text:sqlite3_column_text
"

extern int sqlite3_libversion_number()
extern int _sqlite3_open(char *fn, void *db)
extern int _sqlite3_close(void *db)
extern int _sqlite3_finalize(void *r)
extern int _sqlite3_prepare(void *db, char *sql, int len, void *res, void *zzz)
extern int _sqlite3_column_count(void *r)
extern char* _sqlite3_column_text(void *r, int c)
extern int _sqlite3_step(void *r)

class Database
	void *db
	void __init__()
		db = nil
	void __delete__()
		_sqlite3_close(db)
		
	Result* prepare(string sql)
		string s = sql
		s.add(0)
		Result *r = new Result
		_sqlite3_prepare(db, &s[0], sql.num, &r.res, nil)
		return r

class Result
	void *res
	int step_result
	bool needs_step
	void __init__()
		res = nil
		needs_step = true
	void __delete__()
		_sqlite3_finalize(res)
	
	bool has_more()
		if needs_step
			step_result = _sqlite3_step(res)
			needs_step = false
		return step_result == 100
	
	string[] get_column()
		string[] r
		if !has_more()
			return r
		int n = _sqlite3_column_count(res)
		for i in 0:n
			string t
			char[0]* tt = _sqlite3_column_text(res, i)
			for j in 0:10000
				if tt[j] == 0
					break
				t.add(tt[j])
			r.add(t)
		needs_step = true
		return r
		

Database* sqlite_open(string filename)
	string f = filename
	f.add(0)
	Database *db = new Database
	_sqlite3_open(&f[0], &db.db)
	if !db.db
		raise(new Exception("can't open database " + filename))
	return db

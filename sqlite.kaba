const string KABA_LINK = "/usr/lib64/libsqlite3.so
	_sqlite3_open_v2:sqlite3_open_v2
	_sqlite3_close:sqlite3_close
	sqlite3_libversion_number:sqlite3_libversion_number
	_sqlite3_prepare:sqlite3_prepare
	_sqlite3_step:sqlite3_step
	_sqlite3_finalize:sqlite3_finalize
	_sqlite3_column_count:sqlite3_column_count
	_sqlite3_column_text:sqlite3_column_text
	_sqlite3_column_int:sqlite3_column_int
	_sqlite3_column_double:sqlite3_column_double
	_sqlite3_errmsg:sqlite3_errmsg
	_sqlite3_column_name:sqlite3_column_name
	_sqlite3_column_type:sqlite3_column_type
"

const int SQLITE_OPEN_READWRITE = 2
const int SQLITE_OPEN_CREATE = 4

extern int sqlite3_libversion_number()
extern int _sqlite3_open_v2(char *fn, void *db, int flags, void *zzz)
extern int _sqlite3_close(void *db)
extern int _sqlite3_finalize(void *r)
extern int _sqlite3_prepare(void *db, char *sql, int len, void *res, void *zzz)
extern int _sqlite3_column_count(void *r)
extern char[0]* _sqlite3_column_text(void *r, int c)
extern int _sqlite3_column_int(void *r, int c)
extern float64 _sqlite3_column_double(void *r, int c)
extern int _sqlite3_step(void *r)
extern char[0]* _sqlite3_errmsg(void *db)
extern char[0]* _sqlite3_column_name(void* r, int c)
extern int _sqlite3_column_type(void* r, int c)

string cstr2str(char[0]* cs)
	string s
	for j in 0:10000
		if cs[j] == 0
			break
		s.add(cs[j])
	return s

class Database
	void *db
	void __init__()
		db = nil
	void __delete__()
		_sqlite3_close(db)

	string error()
		return cstr2str(_sqlite3_errmsg(db))
		
	Query* query(string sql)
		string s = sql
		s.add(0)
		let q = new Query()
		if _sqlite3_prepare(db, &s[0], sql.num, &q.res, nil) != 0
			raise(new Exception("sql query failed: " + error()))
		return q

	void run(string sql)
		let q = query(sql)
		q.step()
		del q
	
	any load_doc(string table, any id)
		let sql = "select * from {{table}} where id = {{id}}"
		print(sql)
		let q = query(sql)
		if !q.has_more()
			raise(new Exception("{{id}} not found in {{table}}"))
		any r = q.get_column()
		del q
		return r
	
	#any save_doc(string table, any id)
	#	let q = query("select * from " + table + " where id = " + str(id))
	#	if !q.has_more()
	#		raise(new Exception(str(id) + " not found in " + table))
	#	any r = q.get_column()
	#	del q
	#	return r

class Query
	void *res
	int step_result
	bool needs_step
	void __init__()
		res = nil
		needs_step = true
	void __delete__()
		_sqlite3_finalize(res)

	void step()
		step_result = _sqlite3_step(res)
	
	bool has_more()
		if needs_step
			step()
			needs_step = false
		return step_result == 100
	
	string[] get_column_text()
		string[] r
		if !has_more()
			return r
		int n = _sqlite3_column_count(res)
		for i in 0:n
			r.add(cstr2str(_sqlite3_column_text(res, i)))
		needs_step = true
		return r

	any get_column()
		any r
		if !has_more()
			return r
		int n = _sqlite3_column_count(res)
		for i in 0:n
			string key = cstr2str(_sqlite3_column_name(res, i))
			int t = _sqlite3_column_type(res, i)
			if t == 1 # int
				r.set(key, _sqlite3_column_int(res, i))
			else if t == 2 # double
				r.set(key, float(_sqlite3_column_double(res, i)))
			else if t == 3 # text
				r.set(key, cstr2str(_sqlite3_column_text(res, i)))
		needs_step = true
		return r


	string[] column_names()
		string[] r
		int n = _sqlite3_column_count(res)
		for i in 0:n
			r.add(cstr2str(_sqlite3_column_name(res, i)))
		return r
		

Database* sqlite_open(string filename)
	string f = filename
	f.add(0)
	Database *db = new Database()
	_sqlite3_open_v2(&f[0], &db.db, SQLITE_OPEN_READWRITE, nil)
	if !db.db
		raise(new Exception("can't open database {{filename}}"))
	return db

Database* sqlite_create(string filename)
	string f = filename
	f.add(0)
	Database *db = new Database()
	_sqlite3_open_v2(&f[0], &db.db, SQLITE_OPEN_READWRITE + SQLITE_OPEN_CREATE, nil)
	if !db.db
		raise(new Exception("can't create database {{filename}}"))
	return db


void __main()
	let db = sqlite_create("test.sqlite3")
	db.run("create table michi (id text, a integer, b text)")
	db.run("insert into michi (id,a,b) values ('1001',13,'xxx')")
	db.run("insert into michi (id,a,b) values ('1002',14,'yyy')")
	db.run("insert into michi (id,a,b) values ('1003',15,'zzz')")
	del db

void main()
	let db = sqlite_open("test.sqlite3")
	let q = db.query("select * from michi")
#	let q = db.query("SELECT * FROM sqlite_master where type='table'")
#	print(q.column_names())
	while q.has_more()
		print(q.get_column())
	del q
	#print(db.load_doc("michi", "1002"))
	del db


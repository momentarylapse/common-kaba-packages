use os
use hui
use config
use tag
use file

func common_head(a: string, b: string) -> string
	for i in 0:len(a)
		let n = len(a) - i
		if a[:n] == b[:n]
			return a[:n]
	return ""

func common_tail(a: string, b: string) -> string
	for i in 0:len(a)
		let n = len(a) - i
		if a.tail(n) == b.tail(n)
			return a.tail(n)
	return ""

func path_diff(a: Path, b: Path) -> string
	let sa = str(a)
	let sb = str(b)
	let h = common_head(sa, sb)
	let t = common_tail(sa[len(h):], sb[len(h):])
	
	#return "{{h}}  [{{sa[len(h):-len(t)]}}  <->  {{sb[len(h):-len(t)]}}]  {{t}}"
	return "{{h}}{{terminal.RED}}{{sa[len(h):-len(t)]}}{{terminal.END}}{{t}}  <->  {{h}}{{terminal.GREEN}}{{sb[len(h):-len(t)]}}{{terminal.END}}{{t}}"

class LocalFileDB
	var files: LocalFile[]
	
	func mut load()
		files.clear()
		#Timer tt
		var ss = fs.read(hui.app_directory | "sisyphos/db")
		var lines = ss.explode("\n")
		if lines[0] == "version=2"
			load_v2(lines)
		else if lines[0] == "version=1"
			load_v1(lines[1:])
		else
			load_v1(lines)
		
	func mut load_v2(lines: string[])
		
	func mut load_v1(lines: string[])
		var n = len(lines) / 10
		for i in 0:n
			var ff: LocalFile
			var i0 = i*10+1
			ff.local_id = i
			ff.id = lines[i0]
			ff.path = Path(lines[i0+1])
			#ff.remote_path = lines[i0+2]
			ff.name = lines[i0+3]
			ff.hash = lines[i0+4]
			ff.mtime = int(lines[i0+5])
			ff.remote_mtime = int(lines[i0+6])
			ff.size = int(lines[i0+7])
			ff.options = lines[i0+8].explode(",")
			ff.tags = strh2tags(lines[i0+9])
			ff.unset("")
			if ff.hash == "d41d8cd98f00b204e9800998ecf8427e"
				ff.hash = ""
			if ff.id == "-1"
				ff.id = ""
	
			files.add(ff)
		#print(tt.get())

	func mut self_check()
		check_empty_paths()
		check_directories()
		check_empty_hashes()
		check_missing()
		check_hash_collisions()
		check_duplicate_paths()
	
	func mut check_empty_paths()
		print("checking empty paths")
		for f in files
			if f.path.is_empty()
				log_error("empty path", "...")
				f.show_info("    ")
	
	func mut check_directories()
		print("checking directories")
		for f in files
			if fs.exists(f.path) and fs.is_directory(f.path)
				log_error("directory", str(f.path))
				delete(f)
	
	func mut check_missing()
		print("checking missing")
		for f in files
			if not fs.exists(f.path)
				log_error("missing", str(f.path))

	func mut check_empty_hashes()
		print("checking empty hashes")
		for f in files
			if f.hash == ""
				if fs.exists(f.path)
					log_error("empty hash", str(f.path))
					f.hash = fs.hash(f.path, "md5")
					save([f])
				else if f.id == ""
					log_error("ghost", str(f.path))
					delete(f)
				#else
					# hash='', id='', no file
					#print("EMPTY HASH (REMOTE): " + ff.path)
	func mut check_hash_collisions()
		print("checking hash collisions")
		for f in files
			if f.path.is_empty()
				continue
			var l = by_hash(f.hash)
			if l.local_id == f.local_id
				continue
			if f.path == l.path
				log_error("duplicate", str(f.path))
				if l.mergeable(f)
					l.merge(f)
					save([f])
					delete(f)
				else
					print("   {{rel_path(f.path)}}   <->   {{rel_path(l.path)}}")
					print("###################################")
			else
				log_warn("hash collision", path_diff(f.path, l.path))

	func mut check_duplicate_paths()
		print("checking duplicate paths")
		for f in files
			if f.path.is_empty()
				continue
			let l = find_by_path(f.path)
			if l.local_id == f.local_id
				continue
			log_error("path collision", str(f.path))
			let new_path = unique_path(f)
			
			log_warn("move", "{{rel_path(f.path)}} > {{rel_path(new_path)}}")
			f.path = new_path
			save([f])

#	func mut drop_selected()
#		for i in 0:len(files)
#			if files[i].drop_me
#				log_warn("drop", files[i].path)
#				files.remove(i)
#				db.dirty = true
#				i --

	## TODO....
	func selfref _find_by_local_id(id: int) -> LocalFile*
		if id < 0
			return nil
		for f in files
			if f.local_id == id
				return &f
		return nil
		

	func mut save(_files: LocalFile[])
		for f in _files
			var _f = _find_by_local_id(f.local_id)
			if _f
				*_f = f
			else
				files.add(f)
		save_all()
	
	func mut delete(f: LocalFile)
		for i=>_f in files
			if f.local_id == _f.local_id
				files.remove(i)
		save_all()

	func mut save_all()
		make_all_dirs(hui.app_directory | "sisyphos")
		var f = new TextLinesFormatter(fs.open(hui.app_directory | "sisyphos/db", "wt"))
		f << "version=1"
		f << len(files)
		for ff in files
			f << ff.id
			f << str(ff.path)
			f << "" # ff.remote_path
			f << ff.name
			f << ff.hash
			f << ff.mtime
			f << ff.remote_mtime
			f << ff.size
			f << ff.options.join(",")
			f << tags2strh(ff.tags)
	
	func has_id(id: string) -> bool
		for f in files
			if id == f.id
				return true
		return false

	func find_by_id(id: string) -> LocalFile
		for f in files
			if id == f.id
				return f
		raise(new Exception("not in db: id={{id}}"))

	func find_by_path(path: Path) -> LocalFile
		for f in files
			if path == f.path
				return f
		raise(new Exception("not in db: '{{rel_path(path)}}'"))

	func has_path(path: Path) -> bool
		for f in files
			if path == f.path
				return true
		return false

	func by_hash(hash: string) -> LocalFile
		if hash == ""
			raise(new Exception("empty hash"))
		for f in files
			if hash == f.hash
				return f
		raise(new Exception("not in db: hash={{hash}}"))

	#LocalFile *find_by_hash(string hash)
#		if hash == ""
#			raise(new Exception("invalid hash"))
#		for f in files
#			if hash == f.hash
#				return &f
#		raise(new Exception("not in db: hash=" + hash))
		
	func find_by_tags(filter: string) -> LocalFile[]
		var tags = str2tags(filter)
		var list: LocalFile[]
		for f in files
			if f.match(tags)
				list.add(f)
		return list |> sort("path")

	func get_in_dir(dir: Path, recursive: bool) -> LocalFile[]
		var list: LocalFile[]
		if recursive
			for f in files
				if f.path in dir
					if not f.pure_local() and conf.filter_pure_local
						continue
					if not f.pure_remote() and conf.filter_pure_remote
						continue
					list.add(f)
		else
			for f in files
				if f.path.parent() == dir
					if not f.pure_local() and conf.filter_pure_local
						continue
					if not f.pure_remote() and conf.filter_pure_remote
						continue
					list.add(f)
		return list |> sort("path")

	func get(path: Path, rec: bool) -> LocalFile[]
		if fs.is_directory(path)
			return get_in_dir(path, rec)
		var files: LocalFile[]
		try
			files.add(find_by_path(path))
		except
			pass
		return files
		
	func mut rehash()
		for f in files
			if f.pure_remote()
				continue
			print(f.path)
			try
				var h2 = fs.hash(f.path, "md5")
				if h2 != f.hash
					print("{{h2}} != {{f.hash}}")
					f.hash = h2
					save_all()
			except
				pass
	func mut optimize()
		print("optimizing...")
		files = files |> sort("path")
		save_all()
	
	func mut manual_init()
		print("initializing")
		save_all()
		conf.save()
	
var db: LocalFileDB



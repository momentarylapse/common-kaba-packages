use os.*
use localdb.*
use file.*
use config.*
use autotag.*
use dblister.*



func file_check(out f: LocalFile)
	# suddenly appearing?!?
	if f.pure_remote()
		if fs.exists(f.path)
			f.unset(NONLOCAL)
			if conf.verbosity >= 1
				log_warn("non-nonlocal", rel_path(f.path))
			db.save([f])
			return
	
	# lost?
	if not fs.exists(f.path)
		if not f.pure_remote()
			f.set(NONLOCAL)
			if conf.verbosity >= 1
				log_error("lost", rel_path(f.path))
			db.save([f])
		return
	
	# time
	let mtime = fs.mtime(f.path).time
	if mtime == f.mtime
		if conf.verbosity >= 2
			log_ok("=", rel_path(f.path))
	else
		# changed?
		try
			let hash = fs.hash(f.path, "md5")
			if hash == f.hash
				if conf.verbosity >= 1
					log_warn("touched", rel_path(f.path))
				# ok
				f.mtime = mtime
			else
				if conf.verbosity >= 1
					log_warn("edited", rel_path(f.path))
				f.set(CHANGED_FILE)
				f.hash = hash
				f.mtime = mtime
				f.size = fs.size(f.path)
				if conf.verbosity >= 2 or conf.show_meta
					f.show_info("      ")
			db.save([f])
		except Exception as e
			error_out(e)
			return

# "add"
func file_add(out f: LocalFile)
	if f.in_db()
		file_check(f)
	else
		# new file
		var hash: string
		try
			hash = fs.hash(f.path, "md5")
		except Exception as e
			error_out(e)
			return
#		try
#			LocalFile* ff = db.by_hash(hash)
#			# hash already in db?
#			if Filesystem.exists(ff.path)
#				if conf.verbosity >= 1
#					print("DUPLICATE  {{rel_path(f.path)}} <-> {{rel_path(ff.path)}}")
#				file_add_new(f, hash)
#			else
#				file_move(ff, f.path)
#		except
			# new
		file_add_new(f, hash)


func file_add_new(out f: LocalFile, hash: string)
	log_ok("add", rel_path(f.path))
	f.name = f.path.basename()
	let ext = f.path.extension()
	if len(ext) > 0
		f.name = f.name.head(len(f.name) - len(ext) - 1)
	#print(ext)
	#print(f.name)
	f.hash = hash
	f.mtime = fs.mtime(f.path).time
	f.size = fs.size(f.path)
	auto_tag(f)
	if conf.show_meta or conf.verbosity >= 2
		f.show_info("      ")
	#db.files.add(f)
	db.save([f])





# check for local changes
func add_by_path(path: Path)
	set_working_dir(path)
	var files = lister.find(path)
	for f in files
		if not f.is_dir
			file_add(f)
			
	#db.save(files)

func action_add(arg: string[])
	if len(arg) == 0
		add_by_path(make_path("./"))
	for a in arg
		add_by_path(make_path(a))


use os
use localdb
use config
use tag
use actions
use action_add
use action_delete
use action_list
use action_transmit
use action_tag
use action_remote


func main(arg: string[])
	var p: CommandLineParser
	p.info("sisyphos", "synchronize your files")
	
	p.option("--verbose/-v", "", lambda() conf.verbosity = 5)
	p.option("--silent/-s", "", lambda() conf.verbosity = 0)
	p.option("--drop-deleted/...", "", lambda() conf.drop_deleted = true)
	p.option("--show-meta/--meta/-m", "", lambda() conf.show_meta = true)
	p.option("--show-meta-light/-l", "", lambda() conf.show_meta_small = true)
	p.option("--recursive/-r", "", lambda() conf.recursive = true)
	p.option("--pure-local/--local/-L", "", lambda() conf.filter_pure_local = true)
	p.option("--pure-remote/--remote/-R", "", lambda() conf.filter_pure_remote = true)
	p.option("--not-in-db", "show files that are not in the database (default)", lambda() conf.show_not_in_db = true)
	p.option("--only-in-db", "", lambda() conf.show_not_in_db = false)
	p.option("--pull-tags", "", lambda() conf.pull_tags = true)
	p.option("--pull-tags-only-add", "", lambda() conf.pull_tags_only_add = true)
	p.option("--medium", "", lambda() conf.default_quality = MEDIUM)
	p.option("--dry", "(some commands...)", lambda() conf.dry_run = true)
#	p.opta(["--structure"], "[STRUCTURE]", "a filename pattern with tags... ('{artist} - {year}-{month|02}.ogg')", lambda(string arg) conf.default_structure = arg)
	
	p.cmd("find", "FILTER", "find files by filter ('hash=...' or 'artist=The Beetles')", action_find)
	p.cmd("ls", "[PATH] ...", "show files", action_list)
	p.cmd("status", "[PATH] ...", "show files with issues", action_status)
	p.cmd("add", "[PATH] ...", "update/add to local database", action_add)
	p.cmd("unadd", "[PATH] ...", "remote from local database (without deleting)", action_unadd)
	p.cmd("rm", "PATH_OR_FILTER ...", "delete files", action_rm)
	p.cmd("mv", "SOURCE ... DEST", "move files (dest can contain tags 'aa{artist}.ogg')", action_mv)
	
	p.cmd("pull", "[PATH] ...", "overwrite with changes from host", action_pull)
	p.cmd("push", "[PATH] ...", "send changes to host", action_push)
	p.cmd("sync", "[PATH] ...", "link files with remote db", action_sync)
#	p.cmd("dsync", "<PATH> ...", "also sync...", action_dsync)
	p.cmd("get", "FILTER [DEST]", "add remote files to the local db (without downloading), DEST can contain tags", action_get)
	p.cmd("tag get", "KEY [PATH] ...", "show tags", action_tag_get)
	p.cmd("tag set", "KEY=VALUE [PATH] ...", "set tags", action_tag_set)
	p.cmd("tag add", "KEY=VALUE [PATH] ...", "add tags (artist, genre, etc)", action_tag_add)
	p.cmd("tag rm", "KEY=VALUE [PATH] ...", "remove tags", action_tag_rm)
	p.cmd("tag auto", "PATH ...", "guess tags", action_tag_auto)
	p.cmd("tag diff", "PATH ...", "show meta difference between local/remote", action_tag_diff)

	#p.cmd("structure auto", "<PATH> ...", "rename files by tags", action_structure_auto)
	
	p.cmd("remote find", "FILTER", "find files on host", action_remote_find)
	p.cmd("remote tag list", "KEY", "list all values of a tag key", action_remote_tag_list)
#	p.cmd("remote add", "<FILTER> <DIR>", "???", action_remote_add)

	p.cmd("db init", "", "init", lambda(_arg: string[]) db.manual_init())
	p.cmd("db check", "", "self test", lambda(_arg: string[]) db.self_check())
	p.cmd("db rehash", "", "rebuild hashes", lambda(_arg: string[]) db.rehash())
	p.cmd("db optimize", "", "", lambda(_arg: string[]) db.optimize())
	
	
	
	try
		conf.load()
	except Exception as e
		error_out(e)
	try
		db.load()
	except Exception as e
		error_out(e)
	
	set_working_dir(make_path("./"))
	
	p.parse(arg)

	db.drop_selected()	
	if db.dirty
		db.save()

	

func run_command(arg: string[])
	if arg[0] == "filter"
		if len(arg) < 2
			conf.show()
			return
		if arg[1] == "add"
			if len(arg) < 4
				log_error("error", "filter add <DIR> <FILTER>")
				return
			conf.add_filter(make_path(arg[2]), arg[3], "")
			conf.save()
		else if arg[1] == "rm"
			if len(arg) == 4
				conf.rm_filter(make_path(arg[2]), arg[3])
				conf.save()
			else if len(arg) == 3
				conf.rm_dir(make_path(arg[2]))
				conf.save()
			else
				log_error("error", "filter rm <DIR> [<FILTER>]")
				return
		if arg[1] == "sync"
			if len(arg) < 3
				log_error("error", "filter sync <DIR>")
				return
			#remote_sync_by_filter(arg[2])
	else if arg[0] == "ignore"
		if len(arg) < 2
			for i in conf.ignore
				print(i)
		if arg[1] == "add"
			if len(arg) < 3
				log_error("error", "ignore add <PATH>")
				return
			conf.ignore.add(make_path(arg[2]))
			conf.save()
		else if arg[1] == "rm"
			if len(arg) < 3
				log_error("error", "ignore rm <PATH>")
				return
			for i=>ig in conf.ignore
				if ig == arg[2]
					conf.ignore.remove(i)
					break
			conf.save()
	else if arg[0] == "db"
		if arg[1] == "init"
			conf.save()
			db.dirty = true

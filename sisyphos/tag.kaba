use config

class Tag
	var key: string
	var value: string
	func const __str__() -> string
		return "{{key}}='{{bash_escape(value)}}'"
	func const strh() -> string
		return key + "=" + value.hex()
	func const __lt__(o: Tag) -> bool
		if key == o.key
			return value < o.value
		return key < o.key
	func const match(filter: Tag) -> bool
		return key == filter.key and value.match(filter.value)

func tags_sort(tags: Tag[]) -> Tag[]
	var r = tags
	for i in 0:len(r)
		for j in i+1:len(r)
			if r[j] < r[i]
				var t = r[i]
				r[i] = r[j]
				r[j] = t
	return r

func tags_equal(a: Tag[], b: Tag[]) -> bool
	return tags2str(tags_sort(a)) == tags2str(tags_sort(b))

func tags2str(tags: Tag[]) -> string
	var r: string
	for i=>t in tags
		if i > 0
			r += ","
		r += str(t)
	return r

func tags2strh(tags: Tag[]) -> string
	var r: string
	for i=>t in tags
		if i > 0
			r += ","
		r += t.strh()
	return r

func str2tag(s: string) -> Tag
	let a = s.explode("=")
	return Tag(a[0], a[1])

func strh2tag(s: string) -> Tag
	let a = s.explode("=")
	return Tag(a[0], a[1].unhex())

func alex2tag(s: string) -> Tag
	let a = s.explode("=")
	var t: Tag
	t.key = a[0]
	t.value = a[1].replace("\\t", "\t").replace("\\n", "\n").replace("\\\\", "\\")
	return t


func strh2tags(s: string) -> Tag[]
	var tags: Tag[]
	var a = s.explode(",")
	for b in a
		tags.add(strh2tag(b))
	return tags


func str2tags(s: string) -> Tag[]
	var tags: Tag[]
	let a = s.explode(",")
	for b in a
		tags.add(str2tag(b))
	return tags

func tag_multi(key: string) -> bool
	return key in ["artist", "author", "category", "genre"]

func tags_has(tags: Tag[], t: Tag) -> bool
	for tt in tags
		if tt.key == t.key and tt.value == t.value
			return true
	return false

func tags_diff(a: Tag[], b: Tag[])
	for ta in a
		if !tags_has(b, ta)
			print("+  {{ta}}")
#		else
#			print("=  {{ta}}")
	for tb in b
		if !tags_has(a, tb)
			print("-  {{tb}}")

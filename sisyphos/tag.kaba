

class Tag
	string key
	string value
	func const __str__() -> string
		return "{{key}}={{value}}"
	func const strh() -> string
		return key + "=" + value.hex()
	func const __lt__(o: Tag) -> bool
		if key == o.key
			return value < o.value
		return key < o.key
	func const match(filter: Tag) -> bool
		return key == filter.key and value.match(filter.value)

Tag[] tags_sort(Tag[] tags)
	Tag[] r = tags
	for i in 0:len(r)
		for j in i+1:len(r)
			if r[j] < r[i]
				Tag t = r[i]
				r[i] = r[j]
				r[j] = t
	return r

bool tags_equal(Tag[] a, Tag[] b)
	return tags2str(tags_sort(a)) == tags2str(tags_sort(b))

string tags2str(Tag[] tags)
	string r
	for t,i in tags
		if i > 0
			r += ","
		r += str(t)
	return r

string tags2strh(Tag[] tags)
	string r
	for t,i in tags
		if i > 0
			r += ","
		r += t.strh()
	return r

Tag str2tag(string s)
	var a = s.explode("=")
	return Tag(a[0], a[1])

Tag strh2tag(string s)
	var a = s.explode("=")
	return Tag(a[0], a[1].unhex())

Tag alex2tag(string s)
	var a = s.explode("=")
	Tag t
	t.key = a[0]
	t.value = a[1].replace("\\t", "\t").replace("\\n", "\n").replace("\\\\", "\\")
	return t


Tag[] strh2tags(string s)
	Tag[] tags
	var a = s.explode(",")
	for b in a
		tags.add(strh2tag(b))
	return tags


Tag[] str2tags(string s)
	Tag[] tags
	string[] a = s.explode(",")
	for b in a
		tags.add(str2tag(b))
	return tags

bool tag_multi(string key)
	return key in ["artist", "author", "category", "genre"]

bool tags_has(Tag[] tags, Tag t)
	for tt in tags
		if tt.key == t.key and tt.value == t.value
			return true
	return false

void tags_diff(Tag[] a, Tag[] b)
	for ta in a
		if !tags_has(b, ta)
			print("+  {{ta}}")
#		else
#			print("=  {{ta}}")
	for tb in b
		if !tags_has(a, tb)
			print("-  {{tb}}")

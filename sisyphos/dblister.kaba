use localdb
use config
use os

# mix db files with "real" files
class DBLister
	func is_ignored(path: Path) -> bool
		for i in conf.ignore
			if str(path).match(i)
				return true
		return false

	func mut find_paths(dir: Path, recursive: bool) -> Path[]
		var paths: Path[]
		var options = "f"
		if recursive
			options += "r"
		let list = fs.search(dir, "*", options)
		for e in list
			let path = dir << e
			if not is_ignored(path)
				paths.add(path)
		return paths
	
	func mut find(dir: Path) -> LocalFile[]
		if fs.is_directory(dir)
			return find_in_dir(dir)
		return find_file(dir)
		
		
	func mut find_file(path: Path) -> LocalFile[]
		try
			# in DB?
			return [db.find_by_path(path)]
		except
			if fs.exists(path)
				# FIXME this looks like a memory bug... fake_files[] resize
				var ff: LocalFile
				ff.path = path
				return [ff]
			else
				log_error("error", "can't find '{{path}}'")
		return []
		
		
	func mut mix(files: LocalFile[], paths: Path[]) -> LocalFile[]
		var fake_files: LocalFile[]
		var r: LocalFile[]
		var i = 0
		for f in files
			if i < len(paths)
				while paths[i] < f.path and i < len(paths)
					var ff: LocalFile
					ff.path = paths[i]
					fake_files.add(ff)
					i ++
				
			r.add(f)
			if i < len(paths)
				if f.path == paths[i]
					i ++
		while i < len(paths)
			var ff: LocalFile
			ff.path = paths[i]
			fake_files.add(ff)
			i ++
				
		for f in fake_files
			r.add(f)
		return r
		
	func mut find_in_dir(dir: Path) -> LocalFile[]

		var files = db.get_in_dir(dir, conf.recursive)
			|> sort("path")
		
		var paths = find_paths(dir, conf.recursive)
		#paths = sorted(paths, "")
		files = mix(files, paths)
		return files |> sort("path")

var lister: DBLister




func is_filter(s: string) -> bool
	return s.find("=", 0) > 0

func find_by_path_or_filter(arg: string) -> LocalFile[]
	if is_filter(arg)
		return db.find_by_tags(arg)
	else
		return lister.find(Path(arg).absolute())

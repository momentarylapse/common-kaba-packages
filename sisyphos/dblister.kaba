use localdb
use config
use os

# mix db files with "real" files
class DBLister
	var fake_files: LocalFile[]
	
	func is_ignored(path: Path) -> bool
		for i in conf.ignore
			if str(path).match(i)
				return true
		return false

	func mut find_paths(dir: Path, recursive: bool) -> Path[]
		var paths: Path[]
		var options = "f"
		if recursive
			options += "r"
		var list = fs.search(dir, "*", options)
		for e in list
			var path = dir << e
			if !is_ignored(path)
				paths.add(path)
		return paths
	
	func mut find(dir: Path) -> LocalFile*[]
		if fs.is_directory(dir)
			return find_in_dir(dir)
		return find_file(dir)
		
		
	func mut find_file(path: Path) -> LocalFile*[]
		var files: LocalFile*[]
		fake_files.clear()
		
		try
			# in DB?
			return [db.find_by_path(path)]
		except
			if fs.exists(path)
				LocalFile ff
				ff.path = path
				fake_files.add(ff)
				return [&fake_files[0]]
			else
				log_error("error", "can't find '{{path}}'")
		return files
		
		
	func mut mix(_files: LocalFile*[], paths: Path[]) -> LocalFile*[]
		fake_files.clear()
		var files = _files

		for p in paths
			bool found = false
			for f in files
				if f.path == p
					found = true
					break
			if not found
				LocalFile f
				f.path = p
				fake_files.add(f)
		for f in fake_files
			files.add(&f)
		return files
		
	func mut find_in_dir(dir: Path) -> LocalFile*[]

		print("find...db")
		var files = db.get_in_dir(dir, conf.recursive)
		
		print("find...")
		var paths = find_paths(dir, conf.recursive)
		print("find...mix")
		files = mix(files, paths)
		print("find...return")
		return sorted(files, "path")

var lister: DBLister




func is_filter(s: string) -> bool
	return s.find("=", 0) > 0

func find_by_path_or_filter(arg: string) -> LocalFile*[]
	if is_filter(arg)
		return db.find_by_tags(arg)
	else
		return lister.find(Path(arg).absolute())

use os
use hui

#const string SERVER = "michi.is-a-geek.org"
#const string SERVER = "myu"
const CMD = "kaba alex -S"
const ALEX_DIR = "/media/300/temp/alexandria-cache/"
const ALEX_IN = ALEX_DIR + "in/"

const MEDIUM = "medium"
const PERFECT = "perfect"

func _is_canonical_dir(dir: string) -> bool
	if len(dir) == 0
		return false
	return dir[len(dir) - 1] == '/'

func _dir_canonical(dir: string) -> string
	if _is_canonical_dir(dir)
		return dir
	return dir + "/"

func _canonify(path: string) -> string
	var xx = path.explode("/")
	for i in 0:len(xx)
		if xx[i] == "."
			xx.remove(i)
			i -= 1
		else if xx[i] == ".." and i > 1
			xx.remove(i-1)
			xx.remove(i-1)
			i -= 2
	return xx.join("/")

func absolute_path(path: Path) -> Path
	return path.absolute().canonical()
	#if len(path) == 0
	#	return path
	#if path[0] == '/'
	#	return canonify(path)
	#return canonify(Filesystem.current_directory() << path)

func make_path(p: string) -> Path
	return Path(p).absolute().canonical()

var working_dir: Path
func set_working_dir(path: Path)
	if Filesystem.is_directory(path)
		working_dir = path.canonical()
	else
		working_dir = path.parent().canonical()

func rel_path(path: Path) -> Path
	if path in working_dir
		return path.relative_to(working_dir)
#		return str(path)[len(str(working_dir)):]
	return path


# needs to be surrounded by "..."
func bash_escape(s: string) -> string
	var r = s
	r = r.replace("\\", "\\\\")
	r = r.replace("\"", "\\\"")
	r = r.replace("`", "\\`")
	return r

# needs to be surrounded by '...'
func bash_escape2(s: string) -> string
	var r = s
	r = r.replace("\\", "\\\\")
	r = r.replace("\"", "\\\"")
	r = r.replace("'", "\\'")
	r = r.replace("`", "\\`")
	return r

func make_all_dirs(path: Path)
#	var parents = path.all_parents()
	var parts = str(path).explode("/")
	string dir
	for p,i in parts
		if i == len(parts) - 1
			break
		if i > 0
			dir += "/"
		dir += p
		if i > 0
			if Filesystem.exists(Path(dir))
				continue
			try
				Filesystem.create_directory(Path(dir))
			except Exception as e
				error_out(e)
				return


	
func get_tag(parts: string[], key: string) -> string
	for p in parts
		if p.find("=", 0) < 0
			continue
		var kv = p.explode("=")
		if kv[0] == key
			return kv[1]
	return ""


class Term
	const RED = "\x1b[0;31m"
	const GREEN = "\x1b[0;32m"
	const YELLOW = "\x1b[0;33m"
	const BLUE = "\x1b[0;34m"
	const BLUE2 = "\x1b[0;36m"
	const VIOLET = "\x1b[0;35m"
	const BOLD = "\x1b[1m"
	const END = "\x1b[0m"

func log_ok(op: string, msg: string)
	print("{{Term.YELLOW}}{{Term.BOLD}}{{op.upper()}}{{Term.END}}  {{msg}}")

func log_warn(op: string, msg: string)
	print("{{Term.BLUE2}}{{Term.BOLD}}{{op.upper()}}{{Term.END}}  {{msg}}")

func log_error(op: string, msg: string)
	print("{{Term.RED}}{{Term.BOLD}}{{op.upper()}}{{Term.END}}  {{msg}}")

func error_out(e: Exception)
	log_error("error", str(e))

func shell_exec(cmd: string) -> string
	#if conf.verbose
	#	print(cmd)
	return shell_execute(cmd).trim()

class ConfigDir
	var dir: Path
	var syncs: ConfigDirSync[]
	var structure: string
	
	func add_sync(filter: string, options: string)
		ConfigDirSync s
		s.dir = dir
		s.filter = filter
		s.options = options
		syncs.add(s)

class ConfigDirSync
	# from ConfigDir
	var dir: Path
	var structure: string
	
	var filter: string
	var options: string
	


	func const get_structure() -> string[]
		var oo = options.explode(";")
		for o in oo
			if o[:10] == "structure="
				return o[10:].explode("/")
	func const quality() -> string
		if options.find("quality=medium", 0) >= 0
			return MEDIUM
		return PERFECT

	func const guess_dir(parts: string[]) -> Path
		var structure = get_structure()
		Path dir
		for s in structure
			string v = get_tag(parts, s)
			if len(v) > 0
				dir = dir << v
		return dir


class Config
		
	var dirs: ConfigDir[]
	var ignore: string[]
	var server = "michi.is-a-geek.org"
	
	# runtime
	var verbosity = 1
	var show_meta = false
	var show_meta_small = false
	var recursive = false
	var filter_pure_local = false
	var filter_pure_remote = false
	var show_pure_local = false
	var show_perfectly_fine = true
	var show_not_in_db = false
	var drop_deleted = false
	var pull_tags = false
	var pull_tags_only_add = false
	var dry_run = false
	var default_quality = "perfect"
	var default_structure = "{name}.{ext}"

	func load()
		var f = Filesystem.open_text(hui.app_directory << "sisyphos/config")
		int n, m
		f >> n
		for i in 0:n
			string t
			ConfigDir e
			f >> t
			e.dir = Path(t)
			f >> e.structure
			f >> m
			for j in 0:m
				ConfigDirSync s
				s.dir = e.dir
				s.structure = e.structure
				f >> s.filter
				f >> s.options
				e.syncs.add(s)
			dirs.add(e)
		f >> n
		for i in 0:n
			string ig
			f >> ig
			ignore.add(ig)
		del f
	func const save()
		make_all_dirs(hui.app_directory << "sisyphos")
		var f = Filesystem.create_text(hui.app_directory << "sisyphos/config")
		f << len(dirs)
		for e in dirs
			f << str(e.dir)
			f << e.structure
			f << len(e.syncs)
			for s in e.syncs
				f << s.filter
				f << s.options
		f << len(ignore)
		for i in ignore
			f << i
		f << server
		del f

	func const show()
		for e in conf.dirs
			print(e.dir)
			print("structure: {{e.structure}}")
			for s in e.syncs
				print("  filter: {{s.filter}}")
				print("    options: {{s.options}}")

	func add_filter(dir: Path, filter: string, _options: string)
		var options = _options
		if default_quality == MEDIUM and options == ""
			options = "quality=medium"
		for e in dirs
			if e.dir == dir
				e.add_sync(filter, options)
				return
		ConfigDir e
		e.dir = dir
		e.add_sync(filter, options)
		dirs.add(e)
	
	func selfref get_cfg(dir: Path) -> ConfigDir*
		for e in dirs
			if e.dir == dir
				return &e
		#raise(new Exception("not found"))
		return nil

	func const dir_is_in_db(_dir: Path) -> bool
		return get_cfg(_dir)

	func rm_filter(dir: Path, filter: string)
		for e in dirs
			if e.dir == dir
				for s,i in e.syncs
					if s.filter == filter
						e.syncs.remove(i)
						return
		print("NOT FOUND...")

	func rm_dir(dir: Path)
		for e,i in dirs
			if e.dir == dir
				dirs.remove(i)
				return
		print("NOT FOUND...")

var conf: Config

use os
use localdb
use config
use remote
use tag
use autotag
use dblister





func file_move(out f: LocalFile, new_path: Path)
	if conf.verbosity >= 1
		print("MOVED  {{rel_path(f.path)}} > {{rel_path(new_path)}}")
	f.path = new_path
	db.dirty = true




	
func move_path(source: Path, _dest: Path)
	try
		var f = db.find_by_path(source)
		var dest = Path(f.apply_structure(_dest))
		if Filesystem.is_directory(dest)
			dest = dest.canonical() << source.basename()
		log_warn("move", "{{rel_path(source)}} -> {{rel_path(dest)}}")
		if Filesystem.exists(dest) or db.has_path(dest)
			raise(new Exception("target already exists"))

		if conf.dry_run
			return
		f.path = dest
		db.save()
		
		if Filesystem.exists(source)
			make_all_dirs(dest)
			Filesystem.rename(source, dest)
	except Exception as e
		error_out(e)

func action_mv(arg: string[])
	for i in 0:len(arg)-1
		move_path(make_path(arg[i]), make_path(arg[len(arg)-1]))


func structure_file(out f: LocalFile, structure: string)
	var new_path = Path(f.apply_structure(structure))
	if f.path == new_path
		return
	log_warn("move", "{{rel_path(f.path)}} -> {{rel_path(new_path)}}")
	if conf.dry_run
		return
	make_all_dirs(new_path)
	try
		if !f.pure_remote()
			Filesystem.rename(f.path, new_path)
		f.path = new_path
		db.save()
	except FileError as e
		error_out(e)

func _action_structure_auto(dir: Path)
	set_working_dir(dir)
	var files = db.get_in_dir(dir, conf.recursive)
	for f in files
		var e = conf.get_cfg(f.path)
		if !e
			continue
		structure_file(f, e.dir << e.structure)

func action_structure_auto(arg: string[])
	for a in arg
		_action_structure_auto(make_path(a))




func _action_dsync(dir: Path)
	set_working_dir(dir)
	var e = conf.get_cfg(dir)
	if e
		for s in e.syncs
			remote_sync_by_filter(s.filter, s.quality(), "", dir)
	var files = db.get_in_dir(dir, conf.recursive)
	print("syncing entangled files")
	remote_sync_by_id(files)
	print("matching pure local files by hash")
	remote_sync_pure_locals_by_hash(files)

func action_dsync(arg: string[])
	if len(arg) == 0
		_action_dsync(make_path("./"))
	for a in arg
		_action_dsync(make_path(a))

func _action_sync(path: Path)
	set_working_dir(path)
	var files = lister.find(path)
	remote_sync_pure_locals_by_hash(files)
	remote_sync_by_id(files)

func action_sync(arg: string[])
	if len(arg) == 0
		_action_sync(make_path("./"))
	for a in arg
		_action_sync(make_path(a))


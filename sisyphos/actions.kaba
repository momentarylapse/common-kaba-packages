use os
use localdb
use file
use config
use remote
use tag
use autotag
use dblister




# deprecated
func ______file_move(out f: LocalFile, new_path: Path)
	if conf.verbosity >= 1
		print("MOVED  {{rel_path(f.path)}} > {{rel_path(new_path)}}")
	f.path = new_path
	db.save([f])




func move_path(source: Path, dest: Path)
	if fs.is_directory(source)
		move_dir_by_path(source, dest)
	else
		move_file_by_path(source, dest)
	
func move_file_by_path(source: Path, _dest: Path)
	try
		var f = db.find_by_path(source)
		var dest = Path(f.apply_structure(str(_dest)))
		if fs.is_directory(dest)
			dest = dest.canonical() << source.basename()
		log_warn("move", "{{rel_path(source)}} -> {{rel_path(dest)}}")
		if fs.exists(dest) or db.has_path(dest)
			raise(new Exception("target already exists"))
		
		if not fs.exists(source)
			raise(new Exception("file not found in filesystem???"))

		if conf.dry_run
			return
		
		var _source = source # since source might be a ref to f.path...
		f.path = dest
		db.save([f])
			
		make_all_dirs(dest)
		fs.rename(_source, dest)
	except Exception as e
		error_out(e)
	
func move_dir_by_path(source: Path, dest: Path)
	conf.recursive = true
	try
		var source_ref = source.parent()
		if fs.exists(dest)
			if not fs.is_directory(dest)
				raise(new Exception("target or its parent needs to be a directory, when moving directories"))
		else
			if fs.is_directory(dest.parent())
				source_ref = source
			else
				raise(new Exception("target or its parent needs to be a directory, when moving directories"))
			
			
		var files = lister.find(source)
		for f in files
			#print()
			move_file_by_path(f.path, dest << f.path.relative_to(source_ref))
	except Exception as e
		error_out(e)

func action_mv(arg: string[])
	for i in 0:len(arg)-1
		move_path(make_path(arg[i]), make_path(arg[len(arg)-1]))


func structure_file(out f: LocalFile, structure: string)
	var new_path = Path(f.apply_structure(structure))
	if f.path == new_path
		return
	log_warn("move", "{{rel_path(f.path)}} -> {{rel_path(new_path)}}")
	if conf.dry_run
		return
	make_all_dirs(new_path)
	try
		if not f.pure_remote()
			fs.rename(f.path, new_path)
		f.path = new_path
		db.save([f])
	except FileError as e
		error_out(e)

func _action_structure_auto(dir: Path)
	set_working_dir(dir)
	var files = db.get_in_dir(dir, conf.recursive)
	for f in files
		let e = conf.get_cfg(f.path)
		if !e
			continue
		structure_file(f, str(e.dir << e.structure))

func action_structure_auto(arg: string[])
	for a in arg
		_action_structure_auto(make_path(a))




func _action_dsync(dir: Path)
	set_working_dir(dir)
	let e = conf.get_cfg(dir)
	if e
		for s in e.syncs
			remote_sync_by_filter(s.filter, s.quality(), "", dir)
	var files = db.get_in_dir(dir, conf.recursive)
	print("syncing entangled files")
	remote_sync_by_id(files)
	print("matching pure local files by hash")
	remote_sync_pure_locals_by_hash(files)

func action_dsync(arg: string[])
	if len(arg) == 0
		_action_dsync(make_path("./"))
	for a in arg
		_action_dsync(make_path(a))

func _action_sync(path: Path)
	set_working_dir(path)
	var files = lister.find(path)
	remote_sync_pure_locals_by_hash(files)
	remote_sync_by_id(files)

func action_sync(arg: string[])
	if len(arg) == 0
		_action_sync(make_path("./"))
	for a in arg
		_action_sync(make_path(a))


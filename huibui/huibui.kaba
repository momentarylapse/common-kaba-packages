use os
use config
use language
use resource
use source
use demo
use export
	

func get_ids(out l: Language, r: Resource, ns: string)
	lang_id_add(l.ids, r.id, r.title, r.tooltip, ns)
	
	for c in r.children
		get_ids(l, c, ns)


func find_all_ids(out lang: Language, res: Resource[])
	for r in res
		get_ids(lang, r, r.id)
	
#	lang.show()


func load_own_lang(literally: bool) -> Language
	var own: Language
	own.name = conf.own_lang_name
	
	print("loading own language: {{own.name}}")
	resources = load_all_huis(literally)
	find_all_ids(own, resources)
	
	parse_source_code_dir(conf.source_code_dir, own)
	own.sort()
	print("    {{len(own.ids)}} ids, {{len(own.texts)}} texts")
	
	return own

	
func action_check(arg: string[])
	var dir = Path(arg[0])
	conf.set_dir(dir)
	conf.load()
	
	var own = load_own_lang(true)
	
	var langs = load_prelangs()
	
	for l in langs
		check_lang(l, own, false)

func action_export(arg: string[])

	var dir = Path("./")
	if len(arg) >= 1
		dir = Path(arg[0])
	conf.set_dir(dir)
	conf.load()
	
	var own = load_own_lang(true)#false)
	
	var langs = load_prelangs()
	
	export_resources(resources, own, langs)

func patch_language(out l: Language, own: Language, filename: Path)
	try
		var ttt = fs.read_text(filename)
		var lines = ttt.explode("\n")
		for i in 0:len(lines)/3
			var a = lines[i*3]
			var b = lines[i*3+1]
			var c = lines[i*3+2]
			if c == ""
				continue
			if a.head(5) == "# id:"
				l.add_id(a[5:], c.unescape(), "")
			if a.head(10) == "# tooltip:"
				l.add_id(a[10:], "", c.unescape())
			if a == "# text"
				l.add_text(b.unescape(), c.unescape())
	except
		pass

func action_translate(arg: string[])
	var filename = Path(arg[0])
	conf.set_dir(filename.parent())
	conf.load()
	
	var own = load_own_lang(true)
	
	var l = load_prelang(filename)
	if check_lang(l, own, true)
		return
	
	var path = conf.dir | "TRANS"
	try
		shell_execute("sgribthmaker \"{{path}}\"")
		patch_language(l, own, path)
		check_lang(l, own, false)
		l.save()
	except
		pass
	try
		fs.delete(path)
	except
		pass

func action_add(arg: string[])
	var filename = Path(arg[0])
	var name = arg[1]
	conf.set_dir(filename.parent())
	conf.load()
	
	var l: Language
	l.name = name
	l.filename = filename
	
	l.save()


func swap_translate_lang(out own: Language, l: Language, target: Path)
	# own.ids are ok
	# own.texts need ...
	for t in own.texts
		t.trans = t.orig
		t.orig = ""
		for tt in l.texts
			if tt.orig == t.trans
				t.orig = tt.trans
				break
	own.filename = target
	own.save()

func swap_translate_gui(out r: Resource, l: Language, ns: string)
	for i in l.ids
		if i.id == r.id or i.id == "{{ns}}/{{r.id}}"
			r.title = i.title
			r.tooltip = i.tooltip
	for c in r.children
		swap_translate_gui(c, l, ns)

func swap_translate_guis(l: Language)
	for i=>r in resources
		print("----------")
		print(resource_files[i])
		print(r.str(0))
		swap_translate_gui(r, l, r.id)
		print(r.str(0))
		fs.write_text(resource_files[i], r.str(0))

func action_swap(arg: string[])
	var source = Path(arg[0])
	var target = Path(arg[1])
	conf.set_dir(source.parent())
	conf.load()
	
	var own = load_own_lang(true)
	
	var l = load_prelang(source)
	if !check_lang(l, own, true)
		print("ERROR: missing translations")
		return
	
	swap_translate_lang(own, l, target)
	
	swap_translate_guis(l)
	
	swap_translate_source(conf.source_code_dir, l)
	
	# should also translate other languages... but... screw it

	

func main(arg: string[])
	var p: CommandLineParser
	p.info("huibui", "hui gui builder...")
	p.cmd("check", "<HUI-FILE>", "just check ...", action_check)
	p.cmd("demo", "<HUI-FILE>", "show ...", action_demo)
	p.cmd("x", "[DIR]", "export...", action_export)
	p.cmd("t", "<PRELANG-FILE>", "translate...", action_translate)
	p.cmd("add", "<PRELANG-FILE> <LANGUAGE-NAME>", "add", action_add)
	p.cmd("swap", "<PRELANG-FILE> <LANGUAGE-NAME>", "swap languages", action_swap)
	p.parse(arg)

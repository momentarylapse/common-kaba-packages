use os
use os.Path
use config.*
use language.*

class SourceParser
	var source: string
	func mut parse()
		var pos0 = 0
		while true
			var pos = source.find("_(\"", pos0)
			if pos < 0
				break
			pos += 3
			var length = 0
			for i in 0:1024
				if source[pos + i] == '\\'
					i ++
					continue
				if source[pos + i] == '"'     # "
					length = i
					break
			handle(pos, length)
			#print("    " + source.substr(pos, length))
			pos0 = pos + length


	func mut parse_source_code_dir(dir: Path)
		var files = os.fs.search(dir, "*.cpp", "fd")
		for f in files
			if os.fs.is_directory(dir | f)
				parse_source_code_dir(dir | f)
			else
				source = os.fs.read(dir | f)
				begin()
				parse()
				end(dir | f)

	func virtual mut handle(pos: int, length: int)
	func virtual mut begin()
	func virtual mut end(filename: Path)

class SourceLanguageFinder extends SourceParser
	var l: Language&
	func override mut handle(pos: int, length: int)
		var t: LangText
		t.orig = str_m2utf8(source[pos:pos+length]).unescape()
		
		if len(t.orig) > 0
			var found = false
			for tt in l.texts
				if tt.orig == t.orig
					found = true
					break
			if !found
				l.texts.add(t)

class SourceSwapper extends SourceParser
	var l: Language&
	var source_new: string
	var changed: bool
	var delta: int
	func override mut begin()
		source_new = source
		changed = false
		delta = 0
	func override mut handle(pos: int, length: int)
		var orig = str_m2utf8(source[pos:pos+length]).unescape()
		
		for t in l.texts
			if orig == t.orig
				var r = t.trans.escape()
				print("REPLACE {{orig}}    ->   {{r}}")
				
				var ppos = pos + delta
				source_new = source_new.head(ppos) + r + source_new[ppos+length:]
				
				delta += len(r) - length
				
				changed = true
	func override end(filename: Path)
		if !changed
			return
		#print(">>>>>>>>>>>")
		os.fs.write_text(filename, source_new)
				


func parse_source_code_dir(dir: Path, l: Language)
	var p: SourceLanguageFinder
	p.l := &l
	p.parse_source_code_dir(dir)


func swap_translate_source(dir: Path, l: Language)
	var p: SourceSwapper
	p.l := &l
	p.parse_source_code_dir(dir)


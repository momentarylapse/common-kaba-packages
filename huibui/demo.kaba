use os
use os.Path
use hui
use config.*
use resource.*

class DemoDialog extends hui.Window
	func __init__(source: string)
		super.__init__("", 100, 100)
		set_border_width(10)
		from_source(source)
		event("close", on_close)
		event("ok", on_close)
		event("cancel", on_close)
	func mut on_close()
		destroy()

class ToolbarDemoDialog extends hui.Window
	func __init__(source: string)
		super.__init__("Toolbar demo", 800, 300)
		for t in toolbar(0)
			t.from_source(source)

class MenuDemoDialog extends hui.Window
	func __init__(source: string)
		super.__init__("Menu demo", 800, 300)
		var m = hui.create_menu_from_source(source, &self)
		set_menu(give(m))

func action_demo(arg: string[])
	var filename = Path(arg[0])
	conf.set_dir(filename.parent())
	conf.load()
	
	var source = os.fs.read_text(filename)
	#print(source)
	var r = hui.parse_resource(source, true)
	#r.show(0)
	#print(r.str(0))
	
	if r.type in ["Dialog", "Window"]
		var dlg: shared![DemoDialog] = new DemoDialog(source)
		hui.fly_and_wait(dlg)
	else if r.type == "Toolbar"
		var dlg: shared![ToolbarDemoDialog] = new ToolbarDemoDialog(source)
		hui.fly_and_wait(dlg)
	else if r.type == "Menu"
		var dlg: shared![MenuDemoDialog] = new MenuDemoDialog(source)
		hui.fly_and_wait(dlg)
	else
		print("don't know how to show a {{r.type}}")



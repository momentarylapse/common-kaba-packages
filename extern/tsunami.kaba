#----------------------------------------------------------------------#
#                                                                      #
# header for Tsunami plugin api                                        #
#                                                                      #
#    (c) by MichiSoft TM 2010                                          #
#                                                                      #
# Don't even think of changing anything within this file!              #
#    (unless you dare dying a cruel death)                             #
#                                                                      #
#----------------------------------------------------------------------#

use hui
use kaba

const int NUM_PEAK_LEVELS = 24

const int DEFAULT_SAMPLE_RATE = 44100

const int MAX_PITCH = 128

class Range
	int offset, length
	void __init__(int _offset, int _length)
		offset = _offset
		length = _length
	extern int start()
	extern int end()
	bool inside(int pos)
		return pos >= offset and pos < offset + length
	extern bool overlaps(Range o)
	extern bool covers(Range o)
	extern Range __and__(Range o)
	extern string str()
	#	return "({{offset}}:{{end()}})"
	#const Range ALL = Range(-1000000000, 2000000000)
Range RangeTo(int start, int end)
	return Range(start, end - start)


class MidiNote
	Range range
	float pitch
	float volume
	int stringno, clef_position, modifier
	int flags
	void __init__()
	void __init__(Range r, float _pitch, float _volume)
		range = r
		pitch = _pitch
		volume = _volume
		stringno = -1
		clef_position = -1
		modifier = 0
		flags = 0
	extern void set(int mask)
	extern bool is(int mask)
	extern MidiNote* copy()

class MidiEvent
	int pos
	float pitch
	float volume
	int flags
	int stringno, clef_position
	void __init__(int _pos, float _pitch, float _volume)
		pos = _pos
		pitch = _pitch
		volume = _volume
		flags = 0
		stringno = -1
		clef_position = -1
	string str()
		return "({{pos}}, {{pitch}}, {{volume}})"

class MidiEventBuffer extends MidiEvent[]
	int samples
	extern override void __init__()
	extern MidiNote[] get_notes(Range r)
	extern MidiEvent[] get_events(Range r)
	extern Range get_range()
	void add_note(MidiNote n)
		add(MidiEvent(n.range.offset, n.pitch, n.volume))
		add(MidiEvent(n.range.end(), n.pitch, 0))
	extern void add_metronome_click(int pos, int level, float volume)

class MidiNoteBuffer extends MidiNote*[]
	int samples
	extern override void __init__()
	extern override void __delete__()
	extern void deep_clear()
	extern MidiNote*[] get_notes(Range r)
	extern MidiEvent[] get_events(Range r)
	extern Range get_range()


class ConfigPanel extends Panel
	extern void __init__(Module c)
	extern override void __delete__()
	extern virtual void update()
	extern virtual void set_large(bool large)
	extern void changed()
	Module *c

class Module extends Object
	string name
	Session* session
	extern void __init__(int type, string sub_type)
	extern override void __delete__()
	void __assign__(Module o)
		pass
	extern void reset_config()
	extern virtual void reset_state()
	extern void changed()
	extern virtual int command(int cmd, int param)
	extern void plug_in(int in_port, Module source, int out_port)
	extern void unplug_in(int in_port)
	extern void subscribe(Object handler, Function f, string message)
	extern void unsubscribe(Object handler)
	extern Module* copy()
	
	class Port
		extern void __init__()
		extern virtual void __delete__()
		extern virtual int read_audio(AudioBuffer buf)
		extern virtual int read_midi(MidiEventBuffer midi)
		extern virtual int read_beats(Beat[] beats, int samples)
		
	class Config
		extern void __init__()
		extern virtual void __delete__()
		extern virtual void reset()
		extern virtual string to_string()
		extern virtual void from_string(string s, Session session)
		extern virtual string auto_conf(string name)

	extern virtual ConfigPanel *create_panel()
	extern virtual void on_config()
	extern virtual Module.Config* get_config()
	extern string config_to_string()
	extern void config_from_string(string s)


	enum
		COMMAND_START
		COMMAND_STOP
		COMMAND_PREPARE_START
		COMMAND_ACCUMULATION_START
		COMMAND_ACCUMULATION_STOP
		COMMAND_ACCUMULATION_CLEAR
		COMMAND_ACCUMULATION_GET_SIZE
		COMMAND_SUCK

	enum
		AUDIO_SOURCE
		AUDIO_EFFECT
		MIDI_SOURCE
		MIDI_EFFECT
		SYNTHESIZER
		BEAT_SOURCE
		AUDIO_VISUALIZER
		STREAM
		PITCH_DETECTOR
		PLUMBING
		SIGNAL_CHAIN

class AudioEffect extends Module
	Module.Port *out
	Module.Port *source
	extern void __init__()
	extern override void __delete__()
	extern virtual void process(AudioBuffer buf)
	extern virtual int read(AudioBuffer buf)

class MidiEffect extends Module
	Module.Port *out
	extern void __init__()
	extern override void __delete__()
	extern virtual void process(MidiNoteBuffer midi)

class AudioVisualizer extends Module
	Module.Port *out
	int chunk_size
	extern void __init__()
	extern override void __delete__()
	extern virtual void process(AudioBuffer buf)
	extern void set_chunk_size(int chunk_size)

class AudioBuffer
	int offset, length
	int channels
	float[] l, r
	string[] peaks
	extern void __init__()
	extern void __delete__()
	extern void __assign__(AudioBuffer other)
	extern void clear()
	extern Range range()
	extern void resize(int length)
	extern void set(AudioBuffer b, int offset, float volume)
	extern void add(AudioBuffer b, int offset, float volume)
	#extern void mix_stereo(float volume, float panning)
	extern void set_as_ref(AudioBuffer source, int offset, int length)
	extern AudioBuffer __subarray__(int start, int end)
	extern void get_spectrum(complex[] spec_r, complex[] spec_l, int samples)
	void scale(float factor)
		l *= factor
		if channels > 1
			r *= factor
	void auto_generate_channels()
		if channels > 1
			r = l

extern void interpolate_buffer(AudioBuffer in, AudioBuffer out, int method)

class RingBuffer
	extern void __init__(int size)
	extern int available()
	extern void read(AudioBuffer b)
	extern void write(AudioBuffer b)
	extern void read_ref(AudioBuffer b, int size)
	extern void read_ref_done(AudioBuffer b)
	extern void peek_ref(AudioBuffer b, int size)
	extern void write_ref(AudioBuffer b, int size)
	extern void write_ref_done(AudioBuffer b)
	#extern void move_read_pos(int delta)
	#extern void move_write_pos(int delta)
	extern void clear()
	void __assign__(RingBuffer o)


# general "interface"

class AudioSource extends Module
	extern void __init__()
	extern override void __delete__()
	extern virtual int read(AudioBuffer buf)
	Module.Port *out

class MidiProduceData
	Bar* bar
	int beat_no

class MidiSource extends Module
	extern void __init__()
	extern override void __delete__()
	extern virtual int read(MidiEventBuffer midi)
	# crappy experimental note api:
	extern virtual bool on_produce(MidiProduceData data)
	extern void note(float pitch, float volume, int beats)
	extern void skip(int beats)
	extern void note_x(float pitch, float volume, int beats, int sub_beats, int beat_partition)
	extern void skip_x(int beats, int sub_beats, int beat_partition)
	MidiEventBuffer* bh_midi
	#extern void set_beat_source(BeatPort *source)

class PitchDetector extends MidiSource
	float frequency, volume
	int pitch
	bool loud_enough
	extern override void __init__()
	extern override int read(MidiEventBuffer midi)
	extern virtual void process(MidiEventBuffer midi, AudioBuffer buf)

class PitchRenderer
	extern void __init__(Synthesizer synth, int pitch)
	extern virtual void __delete__()
	void __assign__(PitchRenderer o)
		pass
	extern virtual bool render(AudioBuffer buf) # return: keep alive
	#extern virtual void on_event(MidiEvent e)
	extern virtual void on_start(float volume)
	extern virtual void on_end()
	extern virtual void on_config()
	int pitch
	float delta_phi
	Synthesizer *synth

class Synthesizer extends Module
	int sample_rate
	int keep_notes
	float[MAX_PITCH] freq
	float[MAX_PITCH] delta_phi
	int[] active_pitch
	bool auto_generate_stereo
	MidiEventBuffer events
	Module.Port *out
	extern void __init__()
	extern override void __delete__()
	extern virtual void render(AudioBuffer buf)
	extern override void on_config()
	extern override void reset_state()
	extern virtual PitchRenderer* create_pitch_renderer(int pitch)
	extern void set_sample_rate(int sample_rate)

class DummySynthesizer extends Synthesizer
	extern override void __init__()
	#extern overwrite void __delete__()
	extern override void render(AudioBuffer buf)
	extern override PitchRenderer *create_pitch_renderer(int pitch)

class EnvelopeADSR
	#extern void __init__()
	extern void set(float t_attack, float t_decay, float sustain, float t_release, int sample_rate)
	extern void set2(float initial, float peak)
	extern void reset()
	extern void start(float volume)
	extern void end()
	extern float get()
	extern float[] read(int n)
	bool just_killed


class BeatSource extends Module
	extern void __init__()
	extern override void __delete__()
	extern virtual int read(Beat[] beats, int samples)
	extern virtual int beats_per_bar()
	extern virtual int cur_beat()
	extern virtual int cur_bar()
	extern virtual float beat_fraction()

class BeatMidifier extends MidiSource
	extern override void __init__()
	#extern override void __delete__()
	extern override int read(MidiEventBuffer midi)
	float volume

class AudioRecorder extends Module
	int samples_skipped
	AudioBuffer buffer

class MidiRecorder extends Module
	MidiEventBuffer buffer

class TrackRenderBuffer
	int dummy

class TrackMarker
	Range range
	string text
	AudioEffect*[] fx
	
class Bar
	int[] beats
	int divisor
	int index
	int index_text
	int length
	int offset
	extern float bpm(float sample_rate)
	extern Range range()


class Beat
	Range range
	int bar_index
	int bar_no
	int beat_no
	int level

	void __init__()
	void __init__(int _offset, int _level)
		range = Range(_offset, 0)
		level = _level
		bar_no = 0
		beat_no = 0

class BarCollection extends Bar*[]
	extern Bar*[] get_bars(Range r)
	extern Beat[] get_beats(Range r, bool include_hidden, bool include_sub_beats, int sub_beat_partition)
	extern int get_next_beat(int pos)
	extern int get_prev_beat(int pos)

class TrackLayer
	int type
	Track *track
	AudioBuffer[] buffers
	MidiNoteBuffer midi
	SampleRef*[] samples
	TrackMarker*[] markers
	
	extern void get_buffers(AudioBuffer buf, Range r)
	extern void read_buffers(AudioBuffer buf, Range r, bool allow_ref)
	extern void *edit_buffers(AudioBuffer buf, Range r)
	extern void edit_buffers_finish(void *a)
	extern void insert_midi_data(int offset, MidiNoteBuffer midi)
	extern void add_midi_note(MidiNote *n)
	#extern void add_midi_notes(MidiNoteBuffer midi)
	extern void delete_midi_note(MidiNote *n)
	extern SampleRef* add_sample_ref(int pos, Sample* sample)
	extern void delete_sample_ref(SampleRef *ref)
	extern void edit_sample_ref(SampleRef *ref, float volume, bool mute)
	extern TrackMarker* add_marker(Range range, string text)
	extern void delete_marker(TrackMarker *marker)
	extern void edit_marker(TrackMarker *marker, Range range, string text)

class Sample # TODO
	string name
	int type
	AudioBuffer* buf
	MidiNoteBuffer midi
	float volume
	int uid
	Tag[] tags
	extern SampleRef* create_ref()
	extern string get_value(string key)
	extern void set_value(string key, string value)

class SampleRef # TODO
	Sample* origin
	extern void __init__(Sample* sam)
	extern virtual void __delete__()


enum
	TYPE_AUDIO
	TYPE_TIME
	TYPE_MIDI
	TYPE_AUDIO_MONO
	TYPE_AUDIO_STEREO
	TYPE_GROUP

class Instrument
	int type
	int[] string_pitch

class Track
	int type
	string name
	TrackLayer*[] layers

	float volume, panning
	bool muted
	
	AudioEffect*[] fx
	MidiEffect*[] midi_fx
	
	Synthesizer *synth
	Instrument instrument

	# editing
	Song *song
	
	extern string nice_name()

	#TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	extern void set_name(string name)
	extern void set_muted(bool muted)
	extern void set_volume(float volume)
	extern void set_panning(float panning)
	extern void add_effect(AudioEffect effect)
	extern void delete_effect(int index)
	extern void edit_effect(int index, string param_old)
	extern void enable_effect(int index, bool enabled)
	extern void set_synthesizer(Synthesizer synth)

class Tag
	string key, value
	void __init__()
	void __init__(string _key, string _value)
		key = _key
		value = _value

class Song
	string filename
	Tag[] tags
	int sample_rate

	float volume
	
	Track*[] tracks
	Sample*[] samples
	
	BarCollection bars
	
	extern void __init__(Session session, int sample_rate)
	extern virtual void __delete__()
	
	extern Range range()
	extern Track* time_track()
	extern TrackLayer*[] layers()
	
	extern Track* add_track(int type, int index)
	extern void delete_track(int index)
	extern void add_bar(int index, float bpm, int beats, bool affect_midi)
	extern void add_pause(int index, float time, bool affect_midi)
	#extern void edit_bar(int index, BarPattern p, bool affect_midi)
	extern void delete_bar(int index, bool affect_midi)
	extern Sample* add_sample(string name, AudioBuffer buf)
	extern void delete_sample(Sample sample)
	
	extern void begin_action_group()
	extern void end_action_group()
	
	extern string get_time_str(int t)
	extern string get_time_str_fuzzy(int t, float dt)
	extern string get_time_str_long(int t)

class SongSelection
	Range range_raw
	extern Range range()
	extern bool has_track(Track t)
	extern bool has_layer(TrackLayer t)
	extern bool has_marker(TrackMarker m)
	extern bool has_note(MidiNote n)
	extern bool has_bar(Bar b)

class ColorScheme
	color background
	color background_track
	color background_track_selected
	color text
	color text_soft1
	color text_soft2
	color text_soft3
	color grid
	color selection
	color hover
	color blob_bg
	color blob_bg_selected
	color blob_bg_hidden
	extern color hoverify(color c)

class ViewPort
	extern void __init__(AudioView* view)
	extern Range range()
	extern void set_range(Range r)
	rect area
	

class AudioView extends Object
	SongSelection sel
	SongRenderer* renderer
	SignalChain* signal_chain
	AudioOutput* output_stream
	ViewPort* cam
	extern void subscribe(Object handler, Function f, string message)
	extern void unsubscribe(Object handler)
	extern void play()
	extern void set_playback_loop(bool loop)
	extern void optimize_view()

class SongRenderer extends AudioSource
	extern void __init__(Song s)
	extern override void __delete__()
	extern void render(Range r, AudioBuffer buf)
	extern void set_range(Range r)
	extern void set_loop(bool l)
	extern override int read(AudioBuffer b)
	#extern override void reset_state()
	extern Range range()
	extern int get_pos()
	extern void set_pos(int pos)
	extern BeatSource* get_beat_source()


class AudioOutput extends Module
	extern void __init__(Session session)
	extern override void __delete__()
	extern void stop()
	extern void start()
	extern bool is_playing()
	extern float get_volume()
	extern void set_volume(float volume)
	extern int samples_played()

class AudioInput extends Module
	RingBuffer current_buffer
	AudioBuffer buffer
	extern void __init__(Session session)
	extern override void __delete__()
	extern bool start()
	extern void stop()
	extern bool is_capturing()
	extern int sample_rate()
	extern int samples_recorded()

class Storage
	extern bool load(Song s, string filename)
	extern bool save(Song s, string filename)
	extern bool save_via_renderer(Module.Port source, string filename, int num_samples, Tag[] tags)
	extern bool load_buffer(AudioBuffer buf, string filename)
	string current_directory

# create via Session.add_signal_chain()
class SignalChain extends Module
	extern void __init__(Session session, string name)
	extern override void __delete__()
	extern override int command(int cmd, int param)
	extern override void reset_state()
	extern Module* add(int type, string name)
	extern Module* _add(Module m)
	extern void delete(Module m)
	extern void connect(Module source, int source_port, Module target, int target_port)
	extern void disconnect(Module source, int source_port, Module target, int target_port)
	extern void start()
	extern void stop()
	extern bool is_paused()
	extern bool is_active()
	extern void set_update_dt(float dt)
	extern void set_buffer_size(int size)

class Session extends Object
	int id
	#TsunamiWindow* win
	Window* win
	Song* song
	AudioView* view
	Storage* storage
	
	extern int sample_rate()
	
	#DeviceManager* device_manager
	#PluginManager* plugin_manager
	
	extern Session* create_child()
	extern SignalChain* create_signal_chain(string name)
	extern SignalChain* load_signal_chain(string filename)

	# logging
	extern void i(string msg)
	extern void w(string msg)
	extern void e(string msg)


#class PluginContext
#	Song *song
#	Track *track
#	int track_no
#	int layer
#	Range range

class Slider
	extern void __init__(Panel panel, string id_slider, string id_edit, float v_min, float v_max, float factor, Function func, float value)
	extern virtual void __delete__()
	extern float get()
	extern void set(float f)

class TsunamiPlugin extends Module
	extern void __init__()
	extern override void __delete__()
	extern virtual void on_start()
	extern virtual void on_stop()
	extern void stop()
	string[] args

class SongPlugin extends Object
	extern override void __init__()
	extern override void __delete__()
	extern virtual void apply()
	Session* session
	Song* song

#class Progress
#	extern void __init__(string title, Window *parent)
#	virtual extern void __delete__()
#	extern void set(string msg, float progress)
class ProgressX
	extern void __init__(string title, Window parent)
	extern virtual void __delete__()
	extern void set(string msg, float progress)
	extern void cancel()
	extern bool is_cancelled()

class Clipboard
	Song* temp
	extern bool has_data()
	extern bool prepare_layer_map(AudioView view, TrackLayer*[] sources, TrackLayer*[] targets)


class MidiMode
	enum
		MIDI_LINEAR
		TAB
		CLASSICAL
		DRUM
		DONT_CARE

class HoverData
	

class MidiPainter
	#extern void __init__(AudioView* view)
	extern void __init__(Song song, ViewPort cam, SongSelection* sel, HoverData* hover, ColorScheme colors)
	extern void set_context(rect area, Instrument i, bool playable, int mode)
	extern void draw(Painter p, MidiNoteBuffer midi)
	extern void draw_background(Painter c)
	ViewPort* cam

class GridColors
	color bg, bg_sel
	color fg, fg_sel

class GridPainter
	extern void __init__(Song song, ViewPort cam, SongSelection* sel, HoverData* hover, ColorScheme colors)
	extern void set_context(rect area, GridColors col)
	extern void draw_empty_background(Painter p)
	extern void draw_bars(Painter p, int partition)
	extern void draw_bar_numbers(Painter p)
	extern void draw_time(Painter p)
	extern void draw_time_numbers(Painter p)


#extern PluginContext plugin_context
extern ColorScheme colors

extern Clipboard* clipboard

extern float db2amp(float db)
extern float amp2db(float amp)


extern void fft_c2c(complex[] in, complex[] out, bool inverse)
extern void fft_r2c(float[] in, complex[] out)
extern void fft_c2r_inv(complex[] in, float[] out)

extern Module* CreateModule(Session session, int type, string name)
extern Synthesizer* CreateSynthesizer(Session session, string name)
extern AudioSource* CreateAudioSource(Session session, string name)
extern AudioEffect* CreateAudioEffect(Session session, string name)
extern MidiSource* CreateMidiSource(Session session, string name)
extern MidiEffect* CreateMidiEffect(Session session, string name)
extern BeatMidifier* CreateBeatMidifier(Session session)
extern BeatSource* CreateBeatSource(Session session, string name)
extern Sample* SelectSample(Session session, Panel panel, Sample* old)
#extern void SetTempBackupFilename(string filename)

extern string ChooseModule(Panel parent, Session session, int type, string old_name)

extern void draw_boxed_str(Painter c, float x, float y, string str, color col_text, color col_bg)

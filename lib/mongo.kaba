const string KABA_LINK = "/usr/lib64/libmongoc-1.0.so
	_mongoc_init:mongoc_init
	_mongoc_cleanup:mongoc_cleanup
	_mongoc_client_new:mongoc_client_new
	_mongoc_client_get_collection:mongoc_client_get_collection
	_mongoc_collection_find_with_opts:mongoc_collection_find_with_opts
	_mongoc_collection_aggregate:mongoc_collection_aggregate
	_mongoc_collection_insert_one:mongoc_collection_insert_one
	_mongoc_collection_replace_one:mongoc_collection_replace_one
	_mongoc_collection_delete_one:mongoc_collection_delete_one
	_mongoc_collection_delete_many:mongoc_collection_delete_many
	_mongoc_cursor_next:mongoc_cursor_next
	_mongoc_cursor_destroy:mongoc_cursor_destroy
	_mongoc_collection_destroy:mongoc_collection_destroy
	_mongoc_client_destroy:mongoc_client_destroy
/usr/lib64/libbson-1.0.so
	_bson_new_from_json:bson_new_from_json
	_bson_as_canonical_extended_json:bson_as_canonical_extended_json
	_bson_as_relaxed_extended_json:bson_as_relaxed_extended_json
	_bson_free:bson_free
	_bson_destroy:bson_destroy
	_bson_new_from_data:bson_new_from_data
	_bson_iter_init:bson_iter_init
	_bson_iter_next:bson_iter_next
	_bson_iter_key:bson_iter_key
	_bson_iter_int32:bson_iter_int32
	_bson_iter_int64:bson_iter_int64
	_bson_iter_double:bson_iter_double
	_bson_iter_utf8:bson_iter_utf8
	_bson_iter_array:bson_iter_array
	_bson_iter_oid:bson_iter_oid
	_bson_oid_to_string:bson_oid_to_string
	_bson_iter_type:bson_iter_type"

extern void _mongoc_init()
extern void _mongoc_cleanup()
extern void* _mongoc_client_new(char* uri)
extern void* _mongoc_client_get_collection(void* client, char* db, char* col)
extern void* _mongoc_collection_find_with_opts(void* col, void* filter, void* _opts, void* _prefs)
extern void* _mongoc_collection_aggregate(void* col, int flags, void* pipeline, void* x, void* y)
extern bool _mongoc_collection_insert_one(void* col, void* doc, void* _opts, void* _reply, void* _err)
extern bool _mongoc_collection_replace_one(void* col, void* sel, void* doc, void* opts, void* reply, void* err)
extern bool _mongoc_collection_delete_one(void* col, void* sel, void* opts, void* reply, void* err)
extern bool _mongoc_collection_delete_many(void* col, void* sel, void* opts, void* reply, void* err)
extern bool _mongoc_cursor_next(void* cur, void* bson)
extern void _mongoc_cursor_destroy(void* cur)
extern void _mongoc_collection_destroy(void* col)
extern void _mongoc_client_destroy(void* client)

extern void* _bson_new_from_json(char* json, int len, void* err)
extern char* _bson_as_canonical_extended_json(void* bson, void* __len)
extern char* _bson_as_relaxed_extended_json(void* bson, void* __len)
extern void _bson_free(void* str)
extern void _bson_destroy(void* bson)
extern void* _bson_new_from_data(char* data, int length)
extern bool _bson_iter_init(void* i, void* bson)
extern bool _bson_iter_next(void* i)
extern char[0]* _bson_iter_key(void* i)
extern int _bson_iter_int32(void* i)
extern int64 _bson_iter_int64(void* i)
extern float64 _bson_iter_double(void* i)
extern char[0]* _bson_iter_utf8(void* i, void* __len)
extern void _bson_iter_array(void* i, int* len, void* a)
extern void* _bson_iter_oid(void *i)
extern void _bson_oid_to_string(void* oid, char* str) # [25]
extern int _bson_iter_type(void* i)

string char_to_str(char[0]* p)
	string t
	for i in 0:10000
		if p[i] == 0
			break
		t.add(p[i])
	return t

void* json_to_bson(string json)
	string t = json
	t.add(0)
	let b = _bson_new_from_json(&t[0], len(json), nil)
	if !b
		raise(new Exception("invalid json: {{json}}"))
	return b

string bson_to_json(void *bson)
	#char[0]* x = bson_as_canonical_extended_json(bson, nil)
	char[0]* x = _bson_as_relaxed_extended_json(bson, nil)
	string t = char_to_str(x)
	_bson_free(x)
	return t

string bson_iter_key(void* i)
	return char_to_str(_bson_iter_key(i))
string bson_iter_str(void* i)
	return char_to_str(_bson_iter_utf8(i, nil))

string[] bson_iter_str_array(void *i)
	string[] r
	int[160] itarray
	int length = 0
	char* array
	_bson_iter_array(i, &length, &array)
	void* bson = _bson_new_from_data(array, length)
	_bson_iter_init(&itarray, bson)
	while _bson_iter_next(&itarray)
		r.add(bson_iter_str(&itarray))
	return r



any bson_iter_to_any(void *iter)
	int t = _bson_iter_type(iter)
	if t == 2 # str utf8
		return bson_iter_str(iter)
	else if t == 16 # int
		return _bson_iter_int32(iter)
	else if t == 18 # int64
		return int(_bson_iter_int64(iter))
	else if t == 1 # double
		return float(_bson_iter_double(iter))
	else if t == 4 # array
		any r
		int[160] itarray
		int length = 0
		char* array
		_bson_iter_array(iter, &length, &array)
		void* bson = _bson_new_from_data(array, length)
		_bson_iter_init(&itarray, bson)
		while _bson_iter_next(&itarray)
			r.add(bson_iter_to_any(&itarray))
		return r
	else if t == 7 # ID
		void *oid = _bson_iter_oid(iter)
		string s
		s.resize(25)
		_bson_oid_to_string(oid, &s[0])
		s.resize(24)
		return s
	else if t == 10 # null
		any r
		return r
	print("UNKNOWN TYPE: {{t}}")
	return ""


any bson_iter_map_to_any(void *iter)
	any r
	while _bson_iter_next(iter)
		string key = bson_iter_key(iter)
		r[key] = bson_iter_to_any(iter)
	return r

any bson_to_any(void *doc)
	int[160] iter
	_bson_iter_init(&iter, doc)
	return bson_iter_map_to_any(&iter)

class Mongo
	void* client
	void __init__(string host)
		_mongoc_init()
		client = __mongo_client_new("mongodb://{{host}}:27017/?appname=kaba")
		if !client
			raise(new Exception("can not connect to {{host}}"))

	void __delete__()
		if client
			_mongoc_client_destroy(client)
		_mongoc_cleanup()

	const Collection* collection(string db, string col)
		let c = new Collection()
		c.col = __mongoc_client_get_collection(client, db, col)
		if !c.col
			raise(new Exception("can not open collection"))
		return c


class Collection
	void* col
	void __init__()
		col = nil
	void __delete__()
		if col
			_mongoc_collection_destroy(col)
	const Result* find(string json)
		let b = json_to_bson(json)
		return new Result(_mongoc_collection_find_with_opts(col, b, nil, nil))
	const Result* aggregate(string json)
		let b = json_to_bson(json)
		return new Result(_mongoc_collection_aggregate(col, 0, b, nil, nil))
	void insert(any doc)
		let b = json_to_bson(str(doc))
		if !_mongoc_collection_insert_one(col, b, nil, nil, nil)
			raise(new Exception("can not insert"))
	void replace(string json, any doc)
		let b = json_to_bson(json)
		let d = json_to_bson(str(doc))
		if !_mongoc_collection_replace_one(col, b, d, nil, nil, nil)
			raise(new Exception("can not replace"))
	void delete_one(string json)
		let b = json_to_bson(json)
		if !_mongoc_collection_delete_one(col, b, nil, nil, nil)
			raise(new Exception("can not delete"))
	void delete_many(string json)
		let b = json_to_bson(json)
		int[160] reply
		if !_mongoc_collection_delete_many(col, b, nil, &reply, nil)
			raise(new Exception("can not delete"))
		let r = bson_to_any(&reply)
		print(str(r))

class Result
	void* cur
	void* doc
	void __init__(void *_cur)
		cur = _cur
	void __delete__()
		if cur
			_mongoc_cursor_destroy(cur)
	const bool has_more()
		return _mongoc_cursor_next(cur, &doc)
		# bson_to_json(doc)
	const string json()
		return bson_to_json(doc)
	const any get()
		return bson_to_any(doc)


void* __mongo_client_new(string uri)
	string t = uri
	t.add(0)
	return _mongoc_client_new(&t[0])

void* __mongoc_client_get_collection(void* client, string db, string col)
	string t1 = db
	t1.add(0)
	string t2 = col
	t2.add(0)
	return _mongoc_client_get_collection(client, &t1[0], &t2[0])




#void __main()
#	void* b = json_to_bson("{\"a\":1,\"b\":2}")
#	print(p2s(b))
#	print(bson_to_json(b))
#	bson_destroy(b)

void main()
	let m = new Mongo("localhost")
	#let col = m.get_collection("wiki", "articles")
	#let r = col.find("{\"name\":\"Hauptseite\"}")
	let col = m.collection("alex", "files")
#	let r = col.find("{\"id\":\"100222175\"}") # 900942014
#	let r = col.aggregate("[{\"$group\": {\"_id\": \"$artist\", \"num\": {\"$sum\": 1} } }]")

	let r = col.find("{\"author\":{\"$regex\":\".*einstein\", \"$options\":\"i\"}}") # 900942014

	while r.has_more()
		#print(r.json())
		print(r.get())

	del r
	del col
	del m

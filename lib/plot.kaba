use hui

class Theme
	let bg = color(0.95,0.95,0.95,1)#color.WHITE
	let fg = color.BLACK
	let grid = color(0.7, 0.7, 0.7, 1)

struct Range
	var min, max: f32
	func length() -> f32
		return max - min
	func static from_data(x: f32[]) -> Range
		return [min(x), max(x)]

let BORDER = 10.0

var xrange, yrange: Range?

struct Tick
	value: f32
	weight: f32
	label: string


func get_ticks(range: Range, total_pixels: f32, spacing0: f32) -> Tick[]
	var r: Tick[]
	let d0 = len(range) / total_pixels * spacing0
	
	let ld0 = log(d0) / log(10.0)
	var ldi = i32(ld0 + 0.5)
	if ld0 < 0
		ldi = i32(ld0 - 0.5)
	let d = pow(10.0, ldi)
	
	let x0 = (i32(range.min / d) - 1) * d
	
	for x in x0:range.max:d
		r.add([x, 1.0, "{{x|0.1}}"])
	
	return r

struct DataSet
	var x, y: f32[]

class Window extends hui.Window
	var width, height: f32
	var data_sets: DataSet[]
	var _xrange, _yrange: Range

	func __init__()
		super.__init__("plot", 800, 600)
		set_options("", "borderwidth=0")
		#set_options("","headerbar")
		add_drawing_area("", 0, 0, "area")
		
		
		event_x("area", "hui:draw", on_draw)
	
	func mut add_plot(x: f32[], y: f32[])
		data_sets.add([x, y])
	
	func project(p: vec2) -> vec2
		return [BORDER + (p.x - _xrange.min) / len(_xrange) * (width - 2*BORDER),
			height - BORDER - (p.y - _yrange.min) / len(_yrange) * (height - 2*BORDER)]
	
	func mut optimize_view()
		_xrange = [0,1]
		_yrange = [0,1]
		for d in data_sets
			let rx = Range.from_data(d.x)
			let ry = Range.from_data(d.y)
			_xrange.min = min(_xrange.min, min(d.x))
			_xrange.max = max(_xrange.max, max(d.x))
			_yrange.min = min(_yrange.min, min(d.y))
			_yrange.max = max(_yrange.max, max(d.y))
		for r in xrange
			_xrange = r
		for r in yrange
			_yrange = r
	
	func override on_draw(p: hui.Painter)
		width = p.width
		height = p.height
		p.set_color(Theme.bg)
		p.draw_rect([0, width, 0, height])
		
		optimize_view()
		
		let tx = get_ticks(_xrange, width - 2*BORDER, 100)
		let ty = get_ticks(_yrange, height - 2*BORDER, 30)
		
		
		
		p.set_line_width(1.0)
		p.set_font_size(8)
		for t in tx
			let pp = project([t.value, 0])
			p.set_color(Theme.grid)
			p.draw_line([pp.x, BORDER], [pp.x, height - BORDER])
			if t.weight > 0.8
				p.set_color(color.BLACK)
				p.draw_str([pp.x, height-BORDER], t.label)
			
		for t in ty
			let pp = project([0, t.value])
			p.set_color(Theme.grid)
			p.draw_line([BORDER, pp.y], [width - BORDER, pp.y])
			if t.weight > 0.8
				p.set_color(color.BLACK)
				p.draw_str([BORDER, pp.y], t.label)
		
		
		var points: vec2[]
		
		for d in data_sets
			for i=>yy in d.y
				let xx = d.x[i]
				points.add(project([xx, yy]))
		
		p.clip([BORDER, width-BORDER, BORDER, height-BORDER])
		p.set_color(Theme.fg)
		p.set_line_width(2.0)
		p.set_antialiasing(true)
		p.draw_lines(points)
		

func plot(x: f32[], y: f32[])
	var w = new shared Window()
	w.add_plot(x, y)
	
	hui.fly_and_wait(w)

func plot(y: f32[])
	plot(range(0.0, len(y)), y)

func main()
	plot(range(0.0, 20.0, 0.1) |> sin)

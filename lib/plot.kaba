use hui

class Theme
	let bg = color(0.95,0.95,0.95,1)#color.WHITE
	let fg = color.BLACK
	let grid = color(0.7, 0.7, 0.7, 1)

let BORDER = 10.0

var xrange, yrange: f32[]? #f32[2]?

struct Tick
	value: f32
	weight: f32
	label: string


func get_ticks(range: f32[2], total_pixels: f32, spacing0: f32) -> Tick[]
	var r: Tick[]
	let d0 = (range[1] - range[0]) / total_pixels * spacing0
	
	let ld0 = log(d0) / log(10.0)
	var ldi = i32(ld0 + 0.5)
	if ld0 < 0
		ldi = i32(ld0 - 0.5)
	let d = pow(10.0, ldi)
	
	let x0 = (i32(range[0] / d) - 1) * d
	
	for x in x0:range[1]:d
		r.add([x, 1.0, "{{x|0.1}}"])
	
	return r


class Window extends hui.Window
	var x, y: f32[]
	var width, height: f32
	var _xrange, _yrange: f32[2]

	func __init__()
		super.__init__("plot", 800, 600)
		set_options("", "borderwidth=0")
		#set_options("","headerbar")
		add_drawing_area("", 0, 0, "area")
		
		
		event_x("area", "hui:draw", on_draw)
	
	func project(p: vec2) -> vec2
		return [BORDER + (p.x - _xrange[0]) / (_xrange[1] - _xrange[0]) * (width - 2*BORDER),
			height - BORDER - (p.y - _yrange[0]) / (_yrange[1] - _yrange[0]) * (height - 2*BORDER)]
	
	func override on_draw(p: hui.Painter)
		width = p.width
		height = p.height
		p.set_color(Theme.bg)
		p.draw_rect([0, width, 0, height])
		
		_xrange[0] = min(x)
		_xrange[1] = max(x)
		_yrange[0] = min(y)
		_yrange[1] = max(y)
		for r in xrange
			_xrange[0] = r[0]
			_xrange[1] = r[1]
		for r in yrange
			_yrange[0] = r[0]
			_yrange[1] = r[1]
		
		let tx = get_ticks(_xrange, width - 2*BORDER, 100)
		let ty = get_ticks(_yrange, height - 2*BORDER, 30)
		
		
		
		p.set_line_width(1.0)
		p.set_font_size(8)
		for t in tx
			let pp = project([t.value, 0])
			p.set_color(Theme.grid)
			p.draw_line([pp.x, BORDER], [pp.x, height - BORDER])
			if t.weight > 0.8
				p.set_color(color.BLACK)
				p.draw_str([pp.x, height-BORDER], t.label)
			
		for t in ty
			let pp = project([0, t.value])
			p.set_color(Theme.grid)
			p.draw_line([BORDER, pp.y], [width - BORDER, pp.y])
			if t.weight > 0.8
				p.set_color(color.BLACK)
				p.draw_str([BORDER, pp.y], t.label)
		
		
		var points: vec2[]
		
		for i=>yy in y
			let xx = x[i]
			points.add(project([xx, yy]))
		
		p.clip([BORDER, width-BORDER, BORDER, height-BORDER])
		p.set_color(Theme.fg)
		p.set_line_width(2.0)
		p.set_antialiasing(true)
		p.draw_lines(points)
		

func plot(x: f32[], y: f32[])
	var w = new shared Window()
	w.x = x
	w.y = y
	
	hui.fly_and_wait(w)

func plot(y: f32[])
	plot(range(0.0, len(y)), y)

func main()
	plot(range(0.0, 20.0, 0.1) |> sin)

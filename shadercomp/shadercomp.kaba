use os

string tag_contents(string all, string tag)
	int i0 = all.find("<{{tag}}>", 0)
	if i0 < 0
		return ""
	int i1 = all.find("</{{tag}}>", i0)
	if i1 < 0
		return ""
	return all[i0+len(tag)+2:i1]

string compile_stage(string code, string stage)
	if code == ""
		return ""
	let itmp = "/tmp/shadercomp.glsl"
	let otmp = "/tmp/shadercomp.bin"
	try
		shell_execute("echo '{{code}}' > {{itmp}}")
#		print("glslangValidator -V -S {{stage}} {{itmp}} -o {{otmp}}")
		shell_execute("glslangValidator -V -S {{stage}} {{itmp}} -o {{otmp}} &> /tmp/shader-error")
	except Exception as e
		string x = shell_execute("cat /tmp/shader-error")
		print("  ----  ERROR ({{stage}})  ----\n{{x}}")
		return ""
	string x = shell_execute("cat {{otmp}}")
	
#	string cmd = "echo '{{code}}' | glslc -fshader-stage={{stage}} - -o -"
	# print(cmd)
#	string x = shell_execute(cmd)
	# print(len(x))
	return x

class LayoutData
	string bindings
	string input
	string topology
	int push_size

LayoutData parse_layout(string layout)
	LayoutData ld
	ld.push_size = 0
	ld.topology = "triangles"
	let ll = layout.explode("\n")
	for s in ll
		if s == ""
			continue
		if s.head(12) == "\tbindings = "
			ld.bindings = s[12:]
		else if s.head(12) == "\tpushsize = "
			ld.push_size = int(s[12:])
		else if s.head(9) == "\tinput = "
			ld.input = s[9:]
		else if s.head(12) == "\ttopology = "
			ld.topology = s[12:]
		else
			print("WARNING: layout info unknown: {{s}}")
	return ld
int extract_push_size(string layout)
	return 0

void compile(Path filename)
	string all = Filesystem.read(filename)
	string layout = tag_contents(all, "Layout")
	string code_vertex = tag_contents(all, "VertexShader")
	string code_geometry = tag_contents(all, "GeometryShader")
	string code_fragment = tag_contents(all, "FragmentShader")
	string code_ray_gen = tag_contents(all, "RayGenShader")
	string code_ray_miss = tag_contents(all, "RayMissShader")
	string code_ray_closest_hit = tag_contents(all, "RayClosestHitShader")
	
	string x_vertex = compile_stage(code_vertex, "vert")
	string x_geometry = compile_stage(code_geometry, "geom")
	string x_fragment = compile_stage(code_fragment, "frag")
	string x_ray_gen = compile_stage(code_ray_gen, "rgen")
	string x_ray_miss = compile_stage(code_ray_miss, "rmiss")
	string x_ray_closest_hit = compile_stage(code_ray_closest_hit, "rchit")
	
	LayoutData ld = parse_layout(layout)
	
	File *f = Filesystem.create(Path(str(filename) + ".compiled"))
	f << "Info"
	f << "{version=0.1,shaders=SPIR-V}"
	f << "Input"
	f << ld.input
	f << "Topology"
	f << ld.topology
	f << "Bindings"
	f << ld.bindings
	f << "PushSize"
	f << str(ld.push_size)
	if len(x_vertex) > 0
		f << "VertexShader"
		f << x_vertex
	if len(x_geometry) > 0
		f << "GeometryShader"
		f << x_geometry
	if len(x_fragment) > 0
		f << "FragmentShader"
		f << x_fragment
	if len(x_ray_gen) > 0
		f << "RayGenShader"
		f << x_ray_gen
	if len(x_ray_miss) > 0
		f << "RayMissShader"
		f << x_ray_miss
	if len(x_ray_closest_hit) > 0
		f << "RayClosestHitShader"
		f << x_ray_closest_hit
	del f

void main(string[] arg)
	for a in arg
		compile(a)
	if len(arg) == 0
		print("input files?")

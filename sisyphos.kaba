use "localdb.kaba"
use "config.kaba"
use "remote.kaba"
use "tag.kaba"
use "actions.kaba"


void main(string[] arg)
	if arg.num == 0
		print("find <FILTER>")
		print("filter                     # list filters")
		print("filter add <DIR> <FILTER>")
		print("filter rm <DIR> [<FILTER>]")
		print("ignore                     # list ignores")
		print("ignore add <PATH>")
		print("ignore rm <PATH>")
		print("add <PATH>                 # add file/dir to local db")
		print("rm <PATH>                  # drop file/dir from local db")
		print("mv <SOURCE> <DEST>")
		print("list <DIR>                 # only show")
	//	print("status                     # only show")
		print("sync <DIR>                 # sync db entries (not files)")
		print("pull <PATH>                # download files/meta")
		print("upload <PATH>")
	//	print("sync-pure-locals-by-hash <DIR>")
		print("rehash")
		print("self-check")
		return

	conf.load()
	db.load()
	
	
	string[] arg2
	for a in arg
		if a == "--verbose"
			conf.verbose = true
		else if a == "--drop-deleted"
			conf.drop_deleted = true
		else if a == "--show-meta" or a == "--meta"
			conf.show_meta = true
		else if a == "--pull-tags"
			conf.pull_tags = true
		else if a == "--medium"
			conf.default_quality = MEDIUM
		else if a.head(12) == "--structure="
			conf.default_structure = a.substr(12,-1)
		else
			arg2.add(a)
	run_command(arg2)

void run_command(string[] arg)
	if arg[0] == "filter"
		if arg.num < 2
			conf.show()
			print("TRY: filter add/rm")
			return
		if arg[1] == "add"
			if arg.num < 4
				print("ERROR: filter add <DIR> <FILTER>")
				return
			conf.add_filter(arg[2], arg[3], "")
			conf.save()
		else if arg[1] == "rm"
			if arg.num == 4
				conf.rm_filter(arg[2], arg[3])
				conf.save()
			else if arg.num == 3
				conf.rm_dir(arg[2])
				conf.save()
			else
				print("ERROR: filter rm <DIR> [<FILTER>]")
				return
		if arg[1] == "sync"
			if arg.num < 3
				print("ERROR: filter sync <DIR>")
				return
			//remote_sync_by_filter(arg[2])
	else if arg[0] == "ignore"
		if arg.num < 2
			for i in conf.ignore
				print(i)
			print("TRY: ignore add/rm <PATH>")
			return
		if arg[1] == "add"
			if arg.num < 3
				print("ERROR: ignore add <PATH>")
				return
			conf.ignore.add(arg[2])
			conf.save()
		else if arg[1] == "rm"
			if arg.num < 3
				print("ERROR: ignore rm <PATH>")
				return
			for ig,i in conf.ignore
				if ig == arg[2]
					conf.ignore.remove(i)
					break
			conf.save()
		else
			print("ERROR: ignore ?")
			return
	else if arg[0] == "tag"
		if arg.num < 2
			print("TRY: tag add/set/rm/auto")
			return
		if arg[1] == "add"
			if arg.num < 5
				print("ERROR: tag add <KEY> <VALUE> <PATH>")
				return
			for i in 4:arg.num
				action_tag_add(arg[i], arg[2], arg[3])
		else if arg[1] == "set"
			if arg.num < 5
				print("ERROR: tag set <VALUE> <PATH> <KEY>")
				return
			for i in 4:arg.num
				action_tag_set(arg[i], arg[2], arg[3])
		else if arg[1] == "rm"
			if arg.num < 5
				print("ERROR: tag rm <KEY> <VALUE> <PATH>")
				return
			for i in 4:arg.num
				action_tag_rm(arg[i], arg[2], arg[3])
		else if arg[1] == "auto"
			if arg.num < 3
				print("ERROR: tag auto <PATH>")
				return
			for i in 2:arg.num
				action_tag_auto(arg[i])
		else
			print("ERROR: tag ?")
			return
	else if arg[0] == "find"
		if arg.num < 2
			print("ERROR: find <FILTER>")
			return
		action_find(arg[1])
	else if arg[0] == "list" or arg[0] == "ls"
		if arg.num < 2
			print("ERROR: list <DIR>")
			return
		for i in 1:arg.num
			action_list(arg[i])
	else if arg[0] == "info"
		if arg.num < 2
			print("ERROR: info <path>")
			return
		for i in 1:arg.num
			action_info(arg[i])
	else if arg[0] == "add"
		if arg.num < 2
			print("ERROR: add <PATH>")
			return
		for i in 1:arg.num
			action_add(arg[i])
	else if arg[0] == "rm"
		if arg.num < 2
			print("ERROR: rm <PATH>")
			return
		for i in 1:arg.num
			action_rm(arg[i])
	else if arg[0] == "mv"
		if arg.num < 3
			print("ERROR: rm <SOURCE> <DEST>")
			return
		action_mv(arg[1], arg[2])
	else if arg[0] == "remote"
		if arg.num < 2
			print("ERROR: remote ...")
			return
		if arg[1] == "find"
			if arg.num < 3
				print("ERROR: remote find <FILTER>")
				return
			action_remote_find(arg[2])
		else if arg[1] == "add"
			if arg.num < 3
				print("ERROR: remote add <FILTER> <DIR>")
				return
			action_remote_add(arg[2], arg[3])
		else
			print("ERROR: remote ...")
			return
	else if arg[0] == "sync"
		if arg.num < 2
			print("ERROR: sync <DIR>")
			return
		for i in 1:arg.num
			action_sync(arg[i])
	else if arg[0] == "push"
		if arg.num < 2
			print("ERROR: push <PATH>")
			return
		for i in 1:arg.num
			action_push(arg[i])
	else if arg[0] == "pull"
		if arg.num < 2
			print("ERROR: pull <PATH>")
			return
		for i in 1:arg.num
			action_pull(arg[i])
	else if arg[0] == "cleanup-structure"
		if arg.num < 2
			print("ERROR: cleanup-structure <DIR>")
			return
		for i in 1:arg.num
			action_cleanup_structure(arg[i])
	else if arg[0] == "db"
		if arg.num < 2
			print("TRY: db rehash/check")
			return
		if arg[1] == "rehash"
			db.rehash()
		else if arg[1] == "check"
			db.self_check()
		else
			print("ERROR: db...")
			return
	else
		print(arg[0] + "  ???")
	
	db.drop_selected()
	if db.dirty
		db.save()

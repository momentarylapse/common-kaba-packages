use "localdb.kaba"
use "config.kaba"
use "remote.kaba"
use "tag.kaba"


void main(string[] arg)
	if arg.num == 0
		print("find <FILTER>")
		print("filter                     # list filters")
		print("filter add <DIR> <FILTER")
		print("filter rm <DIR> <FILTER")
		print("ignore                     # list ignores")
		print("ignore add <PATH>")
		print("ignore rm <PATH>")
		print("add/addr <PATH>            # add file/dir to local db")
		print("rm/rmr <PATH>              # drop file/dir from local db")
		print("list <DIR>                 # only show")
		print("status                     # only show")
		print("sync                       # sync db entries (not files)")
		print("pull                       # download synced files")
		print("sync-pure-locals-by-hash <DIR>")
		print("rehash")
		return

	conf.load()
	db.load()
	
	
	for a in arg
		if a == "--verbose"
			conf.verbose = true
		else if a == "--drop-deleted"
			conf.drop_deleted = true
		else if a == "--pull-tags"
			conf.pull_tags = true

	if arg[0] == "filter"
		if arg.num < 2
			conf.show()
			print("TRY: filter add/rm")
			return
		if arg[1] == "add"
			if arg.num < 4
				print("ERROR: filter add <DIR> <FILTER>")
				return
			conf.add_filter(arg[2], arg[3], "quality=medium")
			conf.save()
		else if arg[1] == "rm"
			if arg.num == 4
				conf.rm_filter(arg[2], arg[3])
				conf.save()
			else if arg.num == 3
				conf.rm_dir(arg[2])
				conf.save()
			else
				print("ERROR: filter rm <DIR> [<FILTER>]")
				return
	else if arg[0] == "ignore"
		if arg.num < 2
			for i in conf.ignore
				print(i)
			print("TRY: ignore add/rm <PATH>")
			return
		if arg[1] == "add"
			if arg.num < 3
				print("ERROR: ignore add <PATH>")
				return
			conf.ignore.add(arg[2])
			conf.save()
		else if arg[1] == "rm"
			if arg.num < 3
				print("ERROR: ignore rm <PATH>")
				return
			for ig,i in conf.ignore
				if ig == arg[2]
					conf.ignore.remove(i)
					break
			conf.save()
		else
			print("ERROR: ignore ?")
			return
		
	else if arg[0] == "find"
		if arg.num < 2
			print("ERROR: find <FILTER>")
			return
		LocalFile*[] files = db.find_by_tags(arg[1])
		for f in files
			print(f.path)
	else if arg[0] == "status"
		db.show_status()
	else if arg[0] == "list"
		if arg.num < 2
			print("ERROR: list <DIR>")
			return
		db.list(arg[1])
	else if arg[0] == "info"
		if arg.num < 2
			print("ERROR: info <path>")
			return
		db.info(arg[1])
	else if arg[0] == "addr" or arg[0] == "add"
		if arg.num < 2
			print("ERROR: add/addr <PATH>")
			return
		db.add_recursive(arg[1], arg[0] == "addr")
	else if arg[0] == "rm" or arg[0] == "rmr"
		if arg.num < 2
			print("ERROR: rm/rmr <PATH>")
			return
		db.rm_recursive(arg[1], arg[0] == "rmr")
	else if arg[0] == "remote"
		if arg.num < 2
			print("ERROR: remote ...")
			return
		if arg[1] == "find"
			if arg.num < 3
				print("ERROR: remote find <FILTER>")
				return
			remote_find_and_show(arg[2])
		else
			print("ERROR: remote ...")
			return
	else if arg[0] == "sync"
		remote_sync()
	else if arg[0] == "sync-pure-locals-by-hash"
		if arg.num < 2
			print("ERROR: sync-pure-locals-by-hash <DIR>")
			return
		remote_sync_pure_locals_by_hash(arg[1])
	else if arg[0] == "download"
		if arg.num < 2
			print("ERROR: download <PATH>")
			return
		remote_download(arg[1])
	else if arg[0] == "pull"
		remote_pull()
	else if arg[0] == "cleanup-structure"
		if arg.num < 2
			print("ERROR: cleanup-structure <DIR>")
			return
		db.cleanup_structure(arg[1])
	else if arg[0] == "rehash"
		db.rehash()
	else
		print(arg[0] + "  ???")
	
	if db.dirty
		db.save()

use localdb
use config
use tag
use actions
use cli_parser


void main(string[] arg)
	CLIParser p
	p.info("sisyphos - synchronize your files")
	
	p.opt(["--verbose", "-v"], "", lambda() conf.verbosity = 5)
	p.opt(["--silent", "-s"], "", lambda() conf.verbosity = 0)
	p.opt(["--drop-deleted", "..."], "", lambda() conf.drop_deleted = true)
	p.opt(["--show-meta", "--meta", "-m"], "", lambda() conf.show_meta = true)
	p.opt(["--show-meta-light", "-l"], "", lambda() conf.show_meta_small = true)
	p.opt(["--recursive", "-r"], "", lambda() conf.recursive = true)
	p.opt(["--pure-local", "--local", "-L"], "", lambda() conf.filter_pure_local = true)
	p.opt(["--pure-remote", "--remote", "-R"], "", lambda() conf.filter_pure_remote = true)
	p.opt(["--not-in-db"], "", lambda() conf.show_not_in_db = true)
	p.opt(["--pull-tags"], "", lambda() conf.pull_tags = true)
	p.opt(["--pull-tags-only-add"], "", lambda() conf.pull_tags_only_add = true)
	p.opt(["--medium"], "", lambda() conf.default_quality = MEDIUM)
	p.opt(["--dry"], "(some commands...)", lambda() conf.dry_run = true)
	p.opta(["--structure"], "[STRUCTURE]", "a filename pattern with tags... ('{artist} - {year}-{month|02}.ogg')", lambda(string arg) conf.default_structure = arg)
	
	p.cmd("find", "<FILTER>", "find files by filter ('hash=...' or 'artist=The Beetles')", action_find)
	p.cmd("ls", "[PATH] ...", "show files", action_list)
	p.cmd("status", "[PATH] ...", "show files with issues", action_status)
	p.cmd("add", "[PATH] ...", "update/add to local database", action_add)
	p.cmd("unadd", "[PATH] ...", "remote from local database (without deleting)", action_unadd)
	p.cmd("rm", "<PATH_OR_FILTER> ...", "delete files", action_rm)
	p.cmd("mv", "<SOURCE> ... <DEST>", "move files (dest can contain tags 'aa{artist}.ogg')", action_mv)
	
	p.cmd("pull", "[PATH] ...", "overwrite with changes from host", action_pull)
	p.cmd("push", "[PATH] ...", "send changes to host", action_push)
	p.cmd("sync", "[PATH] ...", "link files with remote db", action_sync)
#	p.cmd("dsync", "<PATH> ...", "also sync...", action_dsync)
	p.cmd("get", "<FILTER> ...", "add remote files to the local db (without downloading)", action_get)
	p.cmd("tag get", "<KEY> [PATH] ...", "show tags", action_tag_get)
	p.cmd("tag set", "<KEY>=<VALUE> [PATH] ...", "set tags", action_tag_set)
	p.cmd("tag add", "<KEY>=<VALUE> [PATH] ...", "add tags (artist, genre, etc)", action_tag_add)
	p.cmd("tag rm", "<KEY>=<VALUE> [PATH] ...", "remove tags", action_tag_rm)
	p.cmd("tag auto", "<PATH> ...", "guess tags", action_tag_auto)
	p.cmd("tag diff", "<PATH> ...", "show meta difference between local/remote", action_tag_diff)

	#p.cmd("structure auto", "<PATH> ...", "rename files by tags", action_structure_auto)
	
	p.cmd("remote find", "<FILTER>", "find files on host", action_remote_find)
	p.cmd("remote add", "<FILTER> <DIR>", "???", action_remote_add)
	p.cmd("db check", "", "self test", lambda(string[] arg) db.self_check())
	p.cmd("db rehash", "", "rebuild hashes", lambda(string[] arg) db.rehash())
	p.cmd("db optimize", "", "", lambda(string[] arg) db.optimize())
	
	
	
	try
		conf.load()
	except Exception as e
		error_out(e)
	try
		db.load()
	except Exception as e
		error_out(e)
	
	p.run(arg)

	db.drop_selected()	
	if db.dirty
		db.save()

	

void run_command(string[] arg)
	if arg[0] == "filter"
		if len(arg) < 2
			conf.show()
			return
		if arg[1] == "add"
			if len(arg) < 4
				print("ERROR: filter add <DIR> <FILTER>")
				return
			conf.add_filter(absolute_path(arg[2]), arg[3], "")
			conf.save()
		else if arg[1] == "rm"
			if len(arg) == 4
				conf.rm_filter(arg[2], arg[3])
				conf.save()
			else if len(arg) == 3
				conf.rm_dir(arg[2])
				conf.save()
			else
				print("ERROR: filter rm <DIR> [<FILTER>]")
				return
		if arg[1] == "sync"
			if len(arg) < 3
				print("ERROR: filter sync <DIR>")
				return
			#remote_sync_by_filter(arg[2])
	else if arg[0] == "ignore"
		if arg.num < 2
			for i in conf.ignore
				print(i)
		if arg[1] == "add"
			if len(arg) < 3
				print("ERROR: ignore add <PATH>")
				return
			conf.ignore.add(absolute_path(arg[2]))
			conf.save()
		else if arg[1] == "rm"
			if len(arg) < 3
				print("ERROR: ignore rm <PATH>")
				return
			for ig,i in conf.ignore
				if ig == arg[2]
					conf.ignore.remove(i)
					break
			conf.save()
	else if arg[0] == "db"
		if arg[1] == "init"
			conf.save()
			db.dirty = true

use "localdb.kaba"
use "config.kaba"
use "remote.kaba"
use "tag.kaba"
use "actions.kaba"


void main(string[] arg)
	if arg.num == 0
		print("commands")
		print("  find <FILTER>              # local search")
		print("  filter                     # list filters")
		print("  filter add <DIR> <FILTER>")
		print("  filter rm <DIR> [<FILTER>]")
		print("  ignore                     # list ignores")
		print("  ignore add <PATH>")
		print("  ignore rm <PATH>")
		print("  tag get <KEY> <PATH>")
		print("  tag add <KEY>=<VALUE> <PATH>")
		print("  tag set <KEY>=<VALUE> <PATH>")
		print("  tag rm <KEY>=<VALUE> <PATH>")
		print("  tag auto <PATH>")
		print("  tag diff <PATH>            # compare to remote")
		print("  add <PATH>                 # add file/dir to local db")
		print("  rm <PATH>                  # drop file/dir from local db")
		print("  mv <SOURCE> <DEST>")
		print("  list <DIR>                 # only show")
		print("  status <DIR>               # only show")
		print("  dsync <DIR>                # sync db entries (not files)")
		print("  sync <PATH>                # sync db entries (not files)")
		print("  pull <PATH>                # download linked files/meta")
		print("  get <ID>                   # link and download files")
		print("  upload <PATH>")
	//	print("  sync-pure-locals-by-hash <DIR>")
		print("  remote find <FILTER>")
		print("  remote id <IDS>")
		print("  remote hash <HASHES>")
		print("  remote add <FILTER> <DIR>")
		print("  db rehash")
		print("  db check")
		print("  db init")
		print("options")
		print("  --verbose/-v")
		print("  --drop-deleted")
		print("  --show-meta/--meta/-m")
		print("  --recursive/-r")
		print("  --pure-local/--local")
		print("  --pure-remote/--remote")
		print("  --pull-tags")
		print("  --pull-tags-only-add")
		print("  --medium  (quality...)")
		print("  --structure=<STRUCTURE>")
		return

	try
		conf.load()
	except Exception as e
		print("ERROR: " + e.message())
	try
		db.load()
	except Exception as e
		print("ERROR: " + e.message())
	
	
	string[] arg2
	for a in arg
		if a == "--verbose" or a == "-v"
			conf.verbosity = 5
		else if a == "--silent" or a == "-s"
			conf.verbosity = 0
		else if a == "--drop-deleted"
			conf.drop_deleted = true
		else if a == "--show-meta" or a == "--meta" or a == "-m"
			conf.show_meta = true
		else if a == "--recursive" or a == "-r"
			conf.recursive = true
		else if a == "--pure-local" or a == "--local"
			conf.filter_pure_local = true
		else if a == "--pure-remote" or a == "--remote"
			conf.filter_pure_remote = true
		else if a == "--pull-tags"
			conf.pull_tags = true
		else if a == "--pull-tags-only-add"
			conf.pull_tags_only_add = true
		else if a == "--medium"
			conf.default_quality = MEDIUM
		else if a.head(12) == "--structure="
			conf.default_structure = a.substr(12,-1)
		else
			arg2.add(a)
	run_command(arg2)

void run_command(string[] arg)
	if arg[0] == "filter"
		if arg.num < 2
			conf.show()
			print("TRY: filter add/rm")
			return
		if arg[1] == "add"
			if arg.num < 4
				print("ERROR: filter add <DIR> <FILTER>")
				return
			conf.add_filter(absolute_path(arg[2]), arg[3], "")
			conf.save()
		else if arg[1] == "rm"
			if arg.num == 4
				conf.rm_filter(arg[2], arg[3])
				conf.save()
			else if arg.num == 3
				conf.rm_dir(arg[2])
				conf.save()
			else
				print("ERROR: filter rm <DIR> [<FILTER>]")
				return
		if arg[1] == "sync"
			if arg.num < 3
				print("ERROR: filter sync <DIR>")
				return
			//remote_sync_by_filter(arg[2])
	else if arg[0] == "ignore"
		if arg.num < 2
			for i in conf.ignore
				print(i)
			print("TRY: ignore add/rm <PATH>")
			return
		if arg[1] == "add"
			if arg.num < 3
				print("ERROR: ignore add <PATH>")
				return
			conf.ignore.add(absolute_path(arg[2]))
			conf.save()
		else if arg[1] == "rm"
			if arg.num < 3
				print("ERROR: ignore rm <PATH>")
				return
			for ig,i in conf.ignore
				if ig == arg[2]
					conf.ignore.remove(i)
					break
			conf.save()
		else
			print("ERROR: ignore ?")
			return
	else if arg[0] == "tag"
		if arg.num < 2
			print("TRY: tag get/add/set/rm/auto/diff")
			return
		if arg[1] == "add"
			if arg.num < 3
				print("ERROR: tag add <KEY>=<VALUE> <PATH>")
				return
			if arg.num < 4
				action_tag_add(absolute_path("./"), arg[2])
			for i in 3:arg.num
				action_tag_add(absolute_path(arg[i]), arg[2])
		else if arg[1] == "set"
			if arg.num < 3
				print("ERROR: tag set <KEY>=<VALUE> <PATH>")
				return
			if arg.num < 4
				action_tag_set(absolute_path("./"), arg[2])
			for i in 3:arg.num
				action_tag_set(absolute_path(arg[i]), arg[2])
		else if arg[1] == "rm"
			if arg.num < 3
				print("ERROR: tag rm <KEY>=<VALUE> <PATH>")
				return
			if arg.num < 4
				action_tag_rm(absolute_path("./"), arg[2])
			for i in 3:arg.num
				action_tag_rm(absolute_path(arg[i]), arg[2])
		else if arg[1] == "auto"
			if arg.num < 2
				print("ERROR: tag auto <PATH>")
				return
			if arg.num < 3
				action_tag_auto(absolute_path("./"))
			for i in 2:arg.num
				action_tag_auto(absolute_path(arg[i]))
		else if arg[1] == "show" or arg[1] == "get"
			if arg.num < 3
				print("ERROR: tag get <KEY> <PATH>")
				return
			if arg.num < 4
				action_tag_get(absolute_path("./"), arg[2])
			for i in 3:arg.num
				action_tag_get(absolute_path(arg[i]), arg[2])
		else if arg[1] == "diff"
			if arg.num < 3
				action_tag_diff(absolute_path("./"))
			for i in 2:arg.num
				action_tag_diff(absolute_path(arg[i]))
		else
			print("ERROR: tag ?")
			return
	else if arg[0] == "find"
		if arg.num < 2
			print("ERROR: find <FILTER>")
			return
		action_find(arg[1])
	else if arg[0] == "list" or arg[0] == "ls"
		if arg.num < 2
			action_list(absolute_path("./"))
		for i in 1:arg.num
			action_list(absolute_path(arg[i]))
	else if arg[0] == "status"
		if arg.num < 2
			action_status(absolute_path("./"))
		for i in 1:arg.num
			action_status(absolute_path(arg[i]))
	else if arg[0] == "info"
		if arg.num < 2
			action_info(absolute_path("./"))
		for i in 1:arg.num
			action_info(absolute_path(arg[i]))
	else if arg[0] == "add"
		if arg.num < 2
			action_add(absolute_path("./"))
		for i in 1:arg.num
			action_add(absolute_path(arg[i]))
	else if arg[0] == "rm"
		if arg.num < 2
			print("ERROR: rm <PATH>")
			return
		for i in 1:arg.num
			action_rm(absolute_path(arg[i]))
	else if arg[0] == "mv"
		if arg.num < 3
			print("ERROR: rm <SOURCE1> ... <DEST>")
			return
		for i in 1:arg.num-1
			action_mv(absolute_path(arg[i]), absolute_path(arg[arg.num-1]))
	else if arg[0] == "remote"
		if arg.num < 2
			print("ERROR: remote ...")
			return
		if arg[1] == "find"
			if arg.num < 3
				print("ERROR: remote find <FILTER>")
				return
			action_remote_find(arg[2])
		else if arg[1] == "hash"
			if arg.num < 3
				print("ERROR: remote hash <HASHES>")
				return
			action_remote_find_hash(arg[2:])
		else if arg[1] == "id"
			if arg.num < 3
				print("ERROR: remote id <IDS>")
				return
			action_remote_find_id(arg[2:])
		else if arg[1] == "add"
			if arg.num < 3
				print("ERROR: remote add <FILTER> <DIR>")
				return
			action_remote_add(arg[2], absolute_path(arg[3]))
		else
			print("ERROR: remote ...")
			return
	else if arg[0] == "dsync"
		if arg.num < 2
			action_dsync(absolute_path("./"))
		for i in 1:arg.num
			action_dsync(absolute_path(arg[i]))
	else if arg[0] == "sync"
		if arg.num < 2
			action_sync(absolute_path("./"))
		for i in 1:arg.num
			action_sync(absolute_path(arg[i]))
	else if arg[0] == "push"
		if arg.num < 2
			action_push(absolute_path("./"))
		for i in 1:arg.num
			action_push(absolute_path(arg[i]))
	else if arg[0] == "pull"
		if arg.num < 2
			action_pull(absolute_path("./"))
		for i in 1:arg.num
			action_pull(absolute_path(arg[i]))
	else if arg[0] == "get"
		if arg.num < 2
			print("ERROR: get <IDs>")
			return
		for i in 1:arg.num
			action_get(arg[i])
	else if arg[0] == "structure"
		if arg.num < 2
			print("TRY: structure apply/auto")
			return
		if arg[1] == "apply"
			if arg.num < 4
				print("ERROR: structure apply <STRUCTURE> <PATH>")
				return
			for i in 3:arg.num
				action_structure_apply(absolute_path(arg[i]), arg[2])
		else if arg[1] == "auto"
			if arg.num < 3
				print("ERROR: structure auto <DIR>")
				return
			for i in 2:arg.num
				action_structure_auto(absolute_path(arg[i]))
		else
			print("ERROR: structure ...")
			return
	else if arg[0] == "db"
		if arg.num < 2
			print("TRY: db rehash/check")
			return
		if arg[1] == "rehash"
			db.rehash()
		else if arg[1] == "check"
			db.self_check()
		else if arg[1] == "optimize"
			db.optimize()
		else if arg[1] == "init"
			conf.save()
			db.dirty = true
		else
			print("ERROR: db...")
			return
	else
		print(arg[0] + "  ???")
	
	db.drop_selected()
	if db.dirty
		db.save()

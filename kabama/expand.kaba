use common.*
use parser.*

func expand(_t: shared![Term]) -> shared![Term]
	# recursive
	var t = _t.shallow_copy()
	for p in t.params
		p = expand(p)

	# self
	if t.name == "*"
		var p1 = t.params[0]
		var p2 = t.params[1]
		
		if (p1.name == "+") or (p1.name == "-")
			# (x + y) * z  ->  x * z + y * z
			return expand(AddOperator(p1.name, AddOperator("*", p1.params[0], p2),
			                                   AddOperator("*", p1.params[1], p2)))
		else if (p2.name == "+") or (p2.name == "-")
			# z * (x + y)  ->  z * x + z * y
			return expand(AddOperator(p2.name, AddOperator("*", p1, p2.params[0]),
			                                   AddOperator("*", p1, p2.params[1])))
	else if t.name == "^"
		var p1 = t.params[0]
		var p2 = t.params[1]
		if p2.type == Type.NUMBER
			if p1.name == "*"
				# (a * b)^c  ->  a^c * b^c
				return expand(AddOperator("*", AddOperator("^", p1.params[0], p2),
				                               AddOperator("^", p1.params[1], p2)))
			else if (p1.name == "+") or (p1.name == "-")
				var e = int(p2.name)
				var t_mul = p1
				for i in 1:e
					t_mul = AddOperator("*", t_mul, p1)
				return expand(t_mul)
		if p1.name == "^"
			# (a ^ b) ^ c -> a ^ (b * c)
			return expand(AddOperator("^", p1.params[0], AddOperator("*", p1.params[1], p2)))
		
	return give(t)

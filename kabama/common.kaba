enum
	TYPE_DUMMY
	TYPE_NUMBER
	TYPE_CONSTANT
	TYPE_VARIABLE
	TYPE_OPERATOR
	TYPE_FUNCTION
	TYPE_SPECIAL
	TYPE_LIST
#	TYPE_SET

enum
	CHAR_LETTER
	CHAR_NUMBER
	CHAR_SIGN
	CHAR_WHITESPACE

var num_terms: int

class Term as shared
	var type: int
	var name: string
	var params: shared Term[]
	func __init__(_type: int, _name: string)
		type = _type
		name = _name
		#print("new Term {{type}} {{name}}")
	func __delete__()
		#print("del Term {{type}} {{name}}")
	func const shallow_copy() -> shared Term
		var c = new Term(type, name)
		for p in params
			c.params.add(p)
		return c
#	const shared Term copy()
#		var c = new Term(type, name)
#		for p in params
#			c.params.add(p.copy())
#		return c
	func const __str__() -> string
		if type == TYPE_OPERATOR
			string a = str(params[0])
			string b = str(params[1])
			if param_needs_paranthesis(0)
				a = "({{a}})"
			if param_needs_paranthesis(1)
				b = "({{b}})"
			if name == "*"
				return "{{a}} {{b}}"
			else if name == "^"
				return a + name + b
			else
				return "{{a}} {{name}} {{b}}"
		else if type == TYPE_NUMBER
			return name
		else if type == TYPE_VARIABLE
			return name
		else if type == TYPE_FUNCTION
			return name + "(" + [for p in params str(p)].join(", ") + ")"
		else if type == TYPE_SPECIAL
			return "{{name}} " + str(params[0])
		else if type == TYPE_LIST
			return "[" + [for p in params str(p)].join(", ") + "]"
		return "?"
	func const param_needs_paranthesis(p: int) -> bool
		if params[p].type == TYPE_NUMBER
			if params[p].name[:1] == "-"
				return true
		if name == "^"
			return params[p].type == TYPE_OPERATOR
		if name == "/"
			if params[p].name == "^"
				return false
			return params[p].type == TYPE_OPERATOR
		if name == "-"
			if params[p].name == "*"
				return false
			return params[p].type == TYPE_OPERATOR
		if name == "*"
			return params[p].name in ["+", "-"]
		return false

#shared Term[] copy_list(shared Term[] list)
#	return [for t in list t.copy()]
		

func AddNumber(s: string) -> shared Term
	return new Term(TYPE_NUMBER, s)

func AddVariable(s: string) -> shared Term
	return new Term(TYPE_VARIABLE, s)

func AddOperator(s: string, p1: shared Term, p2: shared Term) -> shared Term
	var t = new Term(TYPE_OPERATOR, s)
	t.params.add(p1)
	t.params.add(p2)
	return t

func AddFunction(s: string, params: shared Term[]) -> shared Term
	var t = new Term(TYPE_FUNCTION, s)
	t.params = params
	return t

func PermuteOperator(t: shared Term) -> shared Term
	var r = t.shallow_copy()
	r.params[0] = t.params[1]
	r.params[1] = t.params[0]
	return r

func AddSpecial(s: string, params: shared Term[]) -> shared Term
	var t = new Term(TYPE_SPECIAL, s)
	t.params = params
	return t

func AddList(params: shared Term[]) -> shared Term
	var t = new Term(TYPE_LIST, "-list-")
	t.params = params
	return t

# (a+b)+(c+d)
# 0 -> ~
# 1 -> (b + a) + (c + d)
# 2 -> (c + d) + .....
#Term *PermuteLiftOperator__(Term *t, int n)
#	Term *r = t.copy()
#	r.params[0] = t.params[1].copy()
#	r.params[1] = t.params[0].copy()
#	return r


class RuntimeError extends Exception


func main()
	var v = AddVariable("x")

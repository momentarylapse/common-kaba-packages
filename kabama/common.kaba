enum Type
	DUMMY
	NUMBER
	FLOAT
	CONSTANT
	VARIABLE
	OPERATOR
	FUNCTION
	SPECIAL
	LIST
#	SET

enum CharType
	LETTER
	NUMBER
	SIGN
	WHITESPACE

var num_terms: int

struct Term as shared
	var type: Type
	var name: string
	var params: shared![Term][]

	func __init__(_type: Type, _name: string)
		type = _type
		name = _name
		#print("new Term {{type}} {{name}}")

	func __delete__()
		#print("del Term {{type}} {{name}}")

	func shallow_copy() -> xfer[Term]
		var c = new Term(type, name)
		for p in params
			c.params.add(p)
		return give(c)

#	const shared Term copy()
#		var c = new Term(type, name)
#		for p in params
#			c.params.add(p.copy())
#		return c

	func const __str__() -> string
		if type == Type.OPERATOR
			var a = str(params[0])
			var b = str(params[1])
			if param_needs_paranthesis(0)
				a = "({{a}})"
			if param_needs_paranthesis(1)
				b = "({{b}})"
			if name == "*"
				return "{{a}} {{b}}"
			else if name == "^"
				return a + name + b
			else
				return "{{a}} {{name}} {{b}}"
		else if type == Type.NUMBER
			return name
		else if type == Type.FLOAT
			return name
		else if type == Type.VARIABLE
			return name
		else if type == Type.CONSTANT
			return name
		else if type == Type.FUNCTION
			return name + "(" + [for p in params str(p)].join(", ") + ")"
		else if type == Type.SPECIAL
			return "{{name}} " + str(params[0])
		else if type == Type.LIST
			return "[" + [for p in params str(p)].join(", ") + "]"
		return "?"

	func param_needs_paranthesis(index: int) -> bool
		let p = &params[index]
		if p.type == Type.NUMBER
			if p.name[:1] == "-"
				return true
		if name == "^"
			return p.type == Type.OPERATOR
		if name == "/"
			if p.name == "^"
				return false
			return p.type == Type.OPERATOR
		if name == "-"
			if p.name == "*"
				return false
			return p.type == Type.OPERATOR
		if name == "*"
			return p.name in ["+", "-"]
		return false
	
	# not usable... float(shared[Term]) :(
	func __float__() -> float
		return float(name[:10])

#shared Term[] copy_list(shared Term[] list)
#	return [for t in list t.copy()]
		

func AddNumber(s: string) -> xfer[Term]
	return new Term(Type.NUMBER, s)

func AddFloat(s: string) -> xfer[Term]
	return new Term(Type.FLOAT, s)

func AddVariable(s: string) -> xfer[Term]
	return new Term(Type.VARIABLE, s)

func AddConstant(s: string) -> xfer[Term]
	return new Term(Type.CONSTANT, s)

func AddOperator(s: string, p1: shared![Term], p2: shared![Term]) -> xfer[Term]
	var t = new Term(Type.OPERATOR, s)
	t.params.add(p1)
	t.params.add(p2)
	return give(t)

func AddFunction(s: string, params: shared![Term][]) -> xfer[Term]
	var t = new Term(Type.FUNCTION, s)
	t.params = params
	return give(t)

func PermuteOperator(t: shared![Term]) -> xfer[Term]
	var r = t.shallow_copy()
	r.params[0] = t.params[1]
	r.params[1] = t.params[0]
	return give(r)

func AddSpecial(s: string, params: shared![Term][]) -> xfer[Term]
	var t = new Term(Type.SPECIAL, s)
	t.params = params
	return give(t)

func AddList(params: shared![Term][]) -> xfer[Term]
	var t = new Term(Type.LIST, "-list-")
	t.params = params
	return give(t)

# (a+b)+(c+d)
# 0 -> ~
# 1 -> (b + a) + (c + d)
# 2 -> (c + d) + .....
#Term *PermuteLiftOperator__(Term *t, int n)
#	Term *r = t.copy()
#	r.params[0] = t.params[1].copy()
#	r.params[1] = t.params[0].copy()
#	return r


class RuntimeError extends Exception


func main()
	var v = AddVariable("x")

use common
use parser
use simplify
use expand
use diff
use subst
use zeros


class Runtime
	class Function
		string name
		string[] params
		Term* formula
		string __str__()
			let p = params.join(", ")
			return "Function {{name}}({{p}}) := {{formula}}"
	Function*[] functions
	Term*[] history
	
	class Error extends Exception
	
	void add_function(Term t)
		let f = new Function()
		f.name = t.params[0].name
		for p in t.params[0].params
			f.params.add(p.name)
		f.formula = t.params[1].copy()
		functions.add(f)
		#print("added... " + str(f))

	Term *eval_term(Term _t)
		# recursive
		let t = _t.shallow_copy()
		t.params = [for p in t.params eval_term(p)]
			
		# self
		if t.name == "$"
			if len(history) == 0
				raise(new Error("no previous command yet"))
			return history[len(history)-1].copy()
		else if t.name == "expand"
			return expand(t.params[0])
		else if t.name == "diff"
			return diff(t.params[0], t.params[1].name)
		else if t.name == "subst"
			return subst(t.params[0], t.params[1].name, t.params[2])
		else if t.name == "zeros"
			return zeros(t.params[0], t.params[1].name)
		else if t.type == TYPE_SPECIAL
			if t.name == "def"
				add_function(t.params[0])
		else if t.type == TYPE_FUNCTION
			for f in functions
				if f.name == t.name
					return subst(f.formula, f.params[0], t.params[0])
				
		return t

	Term *eval(string s)
		let t = parse(s)
		let r = normalize(eval_term(t))
		history.add(r.copy())
		return r

use common
use parser
use simplify
use expand
use diff
use subst
use zeros


class Runtime
	#class Assumption
	#	shared Term term
	class Function
		var name: string
		var params: string[]
		var formula: shared Term
		string __str__()
			var p = params.join(", ")
			return "Function {{name}}({{p}}) := {{formula}}"
	var assumptions: shared Term[]
	var functions: Function*[]
	var history: shared Term[]
	
	#class Error extends Exception
	
	void add_function(shared Term t)
		var f = new Function()
		f.name = t.params[0].name
		for p in t.params[0].params
			f.params.add(p.name)
		f.formula = t.params[1]
		functions.add(f)
		#print("added... " + str(f))

	shared Term eval_term(shared Term _t)
		# recursive
		var t = _t.shallow_copy()
		t.params = [for p in t.params eval_term(p)]
			
		# self
		if t.name == "$"
			if len(history) == 0
				raise(new RuntimeError("no previous command yet"))
			return history[len(history)-1]
		else if t.name == "expand"
			return expand(t.params[0])
		else if t.name == "diff"
			try
				return diff(t.params[0], t.params[1].name)
			except
				return t
		else if t.name == "subst"
			return subst(t.params[0], t.params[1], t.params[2], 50)
		else if t.name == "zeros"
			return zeros(t.params[0], t.params[1].name)
		else if t.type == TYPE_SPECIAL
			if t.name == "def"
				add_function(t.params[0])
		else if t.type == TYPE_FUNCTION
			for f in functions
				if f.name == t.name
					return subst_variable(f.formula, f.params[0], t.params[0])
				
		return t

	shared Term eval(string s)
		var t = parse(s)
		var r = normalize(eval_term(t))
		history.add(r)
		return r

use os

const string KABA_LINK = "/usr/lib/libc.so.6
	_tcgetattr:tcgetattr
	_tcsetattr:tcsetattr"

class Termios
	int iflag, oflag, cflag, lflag
	int[32] cc
	const string __str__()
		return "i={{iflag|08x}} o={{oflag|08x}} c={{cflag|08x}} l={{lflag|08x}}"

# default: iflag = IUTF8 + IMAXBEL + ICRNL
#          oflag = 5
#          cflag = 0o277 CREAD + CS8/CSIZE + ???
#          lflag = 0o105073 = IEXTEN + ECHOKE + ECHOCTL + ECHOK + ECHOE + ECHO + ISIG + ICANON
enum
	# iflag
	IGNBRK = 0x0001
	BRKINT = 0x0002
	PARMRK = 0x0008
	ISTRIP = 0x0020
	INLCR  = 0x0040
	IGNCR  = 0x0080
	ICRNL  = 0x0100
	IXON   = 0x0400
	IUTF8  = 0x8000
	
	# oflag
	OPOST = 0x0001
	
	# lflag
	ISIG   = 0x0001
	ICANON = 0x0002
	ECHO   = 0x0008
	ECHONL = 0x0040
	IEXTEN = 0x8000
	
	# cflag
	CSIZE  = 0x0030
	PARENB = 0x0100
	CS8    = 0x0030
	
	
	TCSANOW = 0
	VTIME = 5
	VMIN = 6

extern int _tcgetattr(int fno, Termios* t)
extern int _tcsetattr(int fno, int opt, Termios* t)
#extern void cfmakeraw(Termios* t)

Termios _t_pre_raw

void setraw()
	Termios t
	_tcgetattr(0, &t)
	_t_pre_raw = t
	#print("{{t}}\n")
	t.iflag -= (t.iflag & (ISTRIP | INLCR | IGNCR | ICRNL | IXON))
	#t.iflag -= (t.iflag & (IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL | IXON))
	#t.oflag -= (t.oflag & OPOST)
	t.lflag -= (t.lflag & (ECHO | ECHONL | ICANON | ISIG | IEXTEN))
	t.cflag -= (t.cflag & (CSIZE | PARENB))
	t.cflag = t.cflag | CS8
	#print(str(t))
	_tcsetattr(0, TCSANOW, &t)
void unsetraw()
	Termios t
	t.iflag = 0x4500
	t.oflag = 5
	t.cflag = 0xbf
	t.lflag = 0x8a3b
	t = _t_pre_raw
	#print("{{t}}\n")

	_tcsetattr(0, TCSANOW, &t)

const string ESC = "\x1b"

void clear_scr()
	print(ESC + "[2J")

class Key
	#const string BACKSPACE = [0x1b, 0x5b, 0x44]
	const string UP = [0x1b, 0x5b, 0x41]
	const string DOWN = [0x1b, 0x5b, 0x42]
	const string RIGHT = [0x1b, 0x5b, 0x43]
	const string LEFT = [0x1b, 0x5b, 0x44]
	const string END = [0x1b, 0x5b, 0x46]
	const string HOME = [0x1b, 0x5b, 0x48]
	const string DELETE = [0x1b, 0x5b, 0x33, 0x7e]
	const string BACKSPACE = [0x7f]

void move_cursor(int dx, int dy)
	if dx > 0
		print(ESC + "[{{dx}}C")
	else if dx < 0
		print(ESC + "[{{-dx}}D")

class BreakSignal extends Exception

string fancy_read_command(string prompt, out string[] history)
	var ppp = _print_postfix
	_print_postfix = ""
	setraw()
	print(prompt)
	string current
	int cursor_pos = 0
	int hist_index = len(history)
	while true
		var s = stdin.read(4)
		#print(s.hex())
		if len(s) == 0
			continue
		if s == [0x03]
			unsetraw()
			_print_postfix = ppp
			raise(new BreakSignal("break"))
		if s == [0x04]
			unsetraw()
			_print_postfix = ppp
			raise(new BreakSignal("end"))
		else if s == [0x0d]#"\n"
			print("\n")
			if current != ""
				history.add(current)
				hist_index = len(history)
			unsetraw()
			_print_postfix = ppp
			return current
		else if s == Key.UP
			if hist_index > 0
				move_cursor(-cursor_pos, 0)
				for i in current
					print(" ")
				move_cursor(-len(current), 0)
				hist_index --
				current = history[hist_index]
				print(current)
				cursor_pos = len(current)
		else if s == Key.DOWN
			move_cursor(-cursor_pos, 0)
			for i in current
				print(" ")
			move_cursor(-len(current), 0)
			current = ""
			if hist_index < len(history)-1
				hist_index ++
				current = history[hist_index]
			print(current)
			cursor_pos = len(current)
		else if s == Key.RIGHT
			if cursor_pos < len(current)
				move_cursor(1, 0)
				cursor_pos ++
		else if s == Key.LEFT
			if cursor_pos > 0
				move_cursor(-1, 0)
				cursor_pos --
		else if s == Key.END
			move_cursor(len(current)-cursor_pos, 0)
			cursor_pos = len(current)
		else if s == Key.HOME
			move_cursor(-cursor_pos, 0)
			cursor_pos = 0
		else if s == Key.BACKSPACE
			if cursor_pos > 0
				#print(s)
				move_cursor(-1, 0)
				print(current[cursor_pos:] + " ")
				move_cursor(-len(current[cursor_pos:])-1, 0)
				current = current[:cursor_pos-1] + current[cursor_pos:]
				cursor_pos --
				#print(ESC + "[H")
		else if s == Key.DELETE
			if cursor_pos < len(current)
				print(current[cursor_pos+1:] + " ")
				move_cursor(-len(current[cursor_pos+1:])-1, 0)
				current = current[:cursor_pos] + current[cursor_pos+1:]
		else if len(s) == 1
			print(s + current[cursor_pos:])
			move_cursor(-len(current[cursor_pos:]), 0)
			current = current[:cursor_pos] + s + current[cursor_pos:]
			cursor_pos ++

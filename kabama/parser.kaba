use common

class SyntaxError extends Exception

func char_type(c: char) -> CharType
	if (c >= 'a') and (c <= 'z')
		return CharType.LETTER
	if (c >= 'A') and (c <= 'Z')
		return CharType.LETTER
	if (c >= '0') and (c <= '9')
		return CharType.NUMBER
	if c == ' ' or c == '\t' or c == '\n'
		return CharType.WHITESPACE
	return CharType.SIGN

func operator_rank(s: string) -> int
	if s in ["=", ":"]
		return 1
	if s in ["+", "-"]
		return 2
	if s in ["*", "/", "âˆ§"]
		return 3
	if s == "^"
		return 4
	return -1

func check_function_params(f: string, params: Term shared[])
	if f in ["sin", "cos", "tan", "sqrt", "cosh", "sinh", "atan", "expand", "float"]
		if len(params) != 1
			raise(new SyntaxError("function '{{f}}' expects 1 parameter, {{len(params)}} given"))
	if f in ["diff", "zeros"]
		if len(params) != 2
			raise(new SyntaxError("function '{{f}}' expects 2 parameter, {{len(params)}} given"))
		if params[1].type != Type.VARIABLE
			raise(new SyntaxError("function '{{f}}' expects a variable as the second parameter"))
	if f == "subst"
		if len(params) != 3
			raise(new SyntaxError("function '{{f}}' expects 3 parameter, {{len(params)}} given"))


class Parser
	var e: string[]
	var cur_index: int
	func cur() -> string
		if cur_index >= len(e)
			return "-eol-"
		return e[cur_index]
	func next()
		cur_index ++
	func peak() -> string
		if cur_index >= len(e)-1
			return "-eol-"
		return e[cur_index + 1]
	func end_of_line() -> bool
		return cur_index >= len(e)

	func parse_operand_minimal() -> Term shared
		var c = cur()
		#print("min  {{c}} {{cur_index}}")
		if c == "("
			# recursion
			next() # (
			var o = parse_operand()
			next() # )
			return o
		else if c == ")"
			raise(new SyntaxError("unexpected )"))
		if c == "["
			next() # [
			var elements: Term shared[]
			while cur() != "]"
				elements.add(parse_operand())
				if cur() == "]"
					break
				if cur() == ","
					next()
				else
					raise(new SyntaxError(", or ] expected"))
			next() # ]
			return AddList(elements)
		else if c == "]"
			raise(new SyntaxError("unexpected ]"))
		else if cur() == "$"
			next()
			return AddVariable("$")
		else if cur() == "@"
			next()
			var name = "@" + cur()
			next()
			return AddVariable(name)
		else if char_type(c[0]) == CharType.NUMBER
			next()
			if c.find(".") >= 0
				return AddFloat(c)
			return AddNumber(c)
		else if char_type(c[0]) == CharType.LETTER
			next()
			if cur() == "("
				Term shared[] params
				next() # (
				while cur() != ")"
					params.add(parse_operand())
					if cur() == ","
						next()
						continue
					else if cur() != ")"
						raise(new SyntaxError("',' or ')' expected after function parameter"))
				next() # )
				check_function_params(c, params)
				return AddFunction(c, params)
			else if c in ["pi", "e"]
				return AddConstant(c)
			else
				return AddVariable(c)

		raise(new SyntaxError("unknown operand '{{c}}'"))
	
	
	func parse_operand() -> Term shared
		#print("operand {{cur_index}}")
		if cur() == "def"
			return parse_def()
		if cur() == "ass"
			return parse_ass()
		Term shared[] eid
		while true
			# operand
			if end_of_line()
				raise(new SyntaxError("unexpected end of line"))
			var xx = parse_operand_minimal()
			eid.add(xx)
			
			if end_of_line()
				break
			if cur() in [")", ",", "]"]
				break
			
			# operator
			if operator_rank(cur()) < 0
				raise(new SyntaxError("unknown operator '{{cur()}}'"))
			eid.add(AddOperator(cur(), new Term(Type.DUMMY, ""), new Term(Type.DUMMY, "")))
			next()

		return digest_operators(eid)

	func parse_def() -> Term shared
		next() # def
		var op = parse_operand()
		if op.name != "="
			raise(new SyntaxError("def needs '='"))
		if op.params[0].type != Type.FUNCTION
			raise(new SyntaxError("def needs function name before '='"))
		for p in op.params[0].params
			if p.type != Type.VARIABLE
				raise(new SyntaxError("only variables in function definition before '=' allowed"))
		return AddSpecial("def", [op])

	func parse_ass() -> Term shared
		next() # ass
		var op = parse_operand()
	#	if op.name != ":"
	#		raise(new SyntaxError("ass needs ':'"))
		return AddSpecial("ass", [op])

func digest_operators(out eid: Term shared[]) -> Term shared
	if (len(eid) % 2) != 1
		raise(new SyntaxError("missing operand after operator"))
	
	while len(eid) > 2
		int i_sig, sig = -1
		for i in 0:len(eid)
			if (i % 2) == 1
				int os = operator_rank(eid[i].name)
				if os > sig
					sig = os
					i_sig = i
		if eid[i_sig].type != Type.OPERATOR
			raise(new SyntaxError("missing operator"))
		eid[i_sig].params[0] = eid[i_sig - 1]
		eid[i_sig].params[1] = eid[i_sig + 1]
		eid[i_sig - 1] = eid[i_sig]
		eid.remove(i_sig)
		eid.remove(i_sig)
	#print eid
	
	
	return eid[0]

func parse(s: string) -> Term shared
	Parser p
	p.e = s.parse_tokens("+-*/^<=>(),@:|[]") # âˆ§
	p.cur_index = 0
	return p.parse_operand()

func f() -> Term shared
	return new Term(Type.NUMBER, "1")

func main()
	#shared Term t = f()
	var t = parse("x+1")
	print(str(t))
	
	
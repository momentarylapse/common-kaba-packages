
func extern _bson_new_from_json(json: u8*, len: i32, err: void*) -> void*
func extern _bson_as_canonical_extended_json(bson: void*, __len: void*) -> u8[0]&
func extern _bson_as_relaxed_extended_json(bson: void*, __len: void*) -> u8[0]&
func extern _bson_free(str: void*)
func extern _bson_destroy(bson: void*)
func extern _bson_new_from_data(data: u8*, length: i32) -> void*
func extern _bson_iter_init(i: void*, bson: void*) -> bool
func extern _bson_iter_next(i: void*) -> bool
func extern _bson_iter_key(i: void*) -> u8[0]&
func extern _bson_iter_int32(i: void*) -> i32
func extern _bson_iter_int64(i: void*) -> i64
func extern _bson_iter_double(i: void*) -> f64
func extern _bson_iter_utf8(i: void*, __len: void*) -> u8[0]&
func extern _bson_iter_array(i: void*, len: i32*, a: void*)
func extern _bson_iter_oid(i: void*) -> void*
func extern _bson_oid_to_string(oid: void*, str: u8*)
func extern _bson_iter_type(i: void*) -> i32

func char_to_str(p: u8[0]&) -> string
	var t: string
	for i in 0:10000
		if p[i] == 0
			break
		t.add(p[i])
	return t

func json_to_bson(json: string) -> void*
	var t = json
	t.add(0)
	var b = _bson_new_from_json(&t[0], len(json), nil)
	if !b
		raise(new Exception("invalid json: {{json}}"))
	return b

func bson_to_json(bson: void*) -> string
	#char[0]* x = bson_as_canonical_extended_json(bson, nil)
	var x: u8[0]& = _bson_as_relaxed_extended_json(bson, nil)
	var t = char_to_str(x)
	_bson_free(x)
	return t

func bson_iter_key(i: void*) -> string
	return char_to_str(_bson_iter_key(i))
func bson_iter_str(i: void*) -> string
	return char_to_str(_bson_iter_utf8(i, nil))

func bson_iter_str_array(i: void*) -> string[]
	var r: string[]
	var itarray: i32[160]
	var length = 0
	var array: u8*
	_bson_iter_array(i, &length, &array)
	var bson = _bson_new_from_data(array, length)
	_bson_iter_init(&itarray, bson)
	while _bson_iter_next(&itarray)
		r.add(bson_iter_str(&itarray))
	return r



func bson_iter_to_any(iter: void*) -> Any
	var t = _bson_iter_type(iter)
	if t == 2 # str utf8
		return bson_iter_str(iter)
	else if t == 16 # int
		return _bson_iter_int32(iter)
	else if t == 18 # int64
		return int(_bson_iter_int64(iter))
	else if t == 1 # double
		return float(_bson_iter_double(iter))
	else if t == 4 # array
		var r: Any
		var itarray: i32[160]
		var length = 0
		var array: u8*
		_bson_iter_array(iter, &length, &array)
		var bson = _bson_new_from_data(array, length)
		_bson_iter_init(&itarray, bson)
		while _bson_iter_next(&itarray)
			r.add(bson_iter_to_any(&itarray))
		return r
	else if t == 7 # ID
		var oid = _bson_iter_oid(iter)
		var s: string
		s.resize(25)
		_bson_oid_to_string(oid, &s[0])
		s.resize(24)
		return s
	else if t == 10 # null
		var r: Any
		return r
	raise(new Exception("UNKNOWN TYPE: {{t}}"))


func bson_iter_map_to_any(iter: void*) -> Any
	var r: Any
	while _bson_iter_next(iter)
		var key = bson_iter_key(iter)
		r[key] = bson_iter_to_any(iter)
	return r

func bson_to_any(doc: void*) -> Any
	var iter: i32[160]
	_bson_iter_init(&iter, doc)
	return bson_iter_map_to_any(&iter)



//const string SERVER = "michi.is-a-geek.org"
const string SERVER = "myu"
const string YII = "/var/www/html/_alexandria4/yii"
const string TEMP_OUT = "/tmp/sisyphos_out"
const string ALEX_IN = "/media/300/temp/alexandria-cache/in/"

const string MEDIUM = "medium"
const string PERFECT = "perfect"

bool is_canonical_dir(string dir)
	if dir.num == 0
		return false
	return dir[dir.num - 1] == '/'

string dir_canonical(string dir)
	if is_canonical_dir(dir)
		return dir
	return dir + "/"

string working_dir
void set_working_dir(string path)
	if FileIsDirectory(path)
		working_dir = dir_canonical(path)
	else
		working_dir = dir_canonical(path.dirname())

string rel_path(string path)
	if path.head(working_dir.num) == working_dir
		return path.substr(working_dir.num, -1)
	return path


// needs to be surrounded by "..."
string bash_escape(string s)
	string r = s
	r = r.replace("\\", "\\\\")
	r = r.replace("\"", "\\\"")
	r = r.replace("`", "\\`")
	return r

void make_all_dirs(string path)
	string[] parts = path.explode("/")
	string dir
	for p,i in parts
		if i == parts.num - 1
			break
		if i > 0
			dir += "/"
		dir += p
		DirCreate(dir)


	
string get_tag(string[] parts, string key)
	for p in parts
		if p.find("=", 0) < 0
			continue
		string[] kv = p.explode("=")
		if kv[0] == key
			return kv[1]
	return ""

class ConfigDir
	string dir
	ConfigDirSync[] syncs
	string structure
	
	void add_sync(string filter, string options)
		ConfigDirSync s
		s.dir = dir
		s.filter = filter
		s.options = options
		syncs.add(s)

class ConfigDirSync
	// from ConfigDir
	string dir
	string structure
	
	string filter
	string options
	


	string[] get_structure()
		string[] oo = options.explode(";")
		for o in oo
			if o.substr(0,10) == "structure="
				return o.substr(10,-1).explode("/")
	string quality()
		if options.find("quality=medium", 0) >= 0
			return MEDIUM
		return PERFECT

	string guess_dir(string[] parts)
		string[] structure = get_structure()
		string dir
		for s in structure
			string v = get_tag(parts, s)
			if v.num > 0
				dir += v + "/"
		return dir


class Config
	void __init__()
		verbose = false
		show_meta = false
		allow_remote_pull = false
		allow_remote_push = false
		allow_local_search = true
		allow_remote_search = true
		show_pure_local = false
		drop_deleted = false
		pull_tags = false
		default_quality = "perfect"
		default_structure = "{name}.{ext}"

	void load()
		File *f = FileOpen("sisyphos.conf")
		int n, m
		f >> n
		for i in 0:n
			ConfigDir e
			f >> e.dir
			f >> e.structure
			f >> m
			for j in 0:m
				ConfigDirSync s
				s.dir = e.dir
				s.structure = e.structure
				f >> s.filter
				f >> s.options
				e.syncs.add(s)
			dirs.add(e)
		f >> n
		for i in 0:n
			string ig
			f >> ig
			ignore.add(ig)
		delete f
	void save()
		File *f = FileCreate("sisyphos.conf")
		f << dirs.num
		for e in dirs
			f << e.dir
			f << e.structure
			f << e.syncs.num
			for s in e.syncs
				f << s.filter
				f << s.options
		f << ignore.num
		for i in ignore
			f << i
		delete f

	void show()
		for e in conf.dirs
			print(e.dir)
			print("structure: " + e.structure)
			for s in e.syncs
				print("  filter: " + s.filter)
				print("    options: " + s.options)

	void add_filter(string _dir, string filter, string options)
		if default_quality == MEDIUM and options == ""
			options = "quality=medium"
		string dir = dir_canonical(_dir)
		for e in dirs
			if e.dir == dir
				e.add_sync(filter, options)
				return
		ConfigDir e
		e.dir = dir
		e.add_sync(filter, options)
		dirs.add(e)
	
	ConfigDir* get_cfg(string _dir)
		string dir = dir_canonical(_dir)
		for e in dirs
			if e.dir == dir.head(e.dir.num)
				return &e
		return nil

	bool dir_is_in_db(string _dir)
		return get_cfg(_dir)

	void rm_filter(string _dir, string filter)
		string dir = dir_canonical(_dir)
		for e in dirs
			if e.dir == dir
				for s,i in e.syncs
					if s.filter == filter
						e.syncs.remove(i)
						return
		print("not found...")

	void rm_dir(string _dir)
		string dir = dir_canonical(_dir)
		for e,i in dirs
			if e.dir == dir
				dirs.remove(i)
				return
		print("not found...")
		
	ConfigDir[] dirs
	string[] ignore
	
	// runtime
	bool verbose
	bool show_meta
	bool allow_remote_pull
	bool allow_remote_push
	bool allow_local_search
	bool allow_remote_search
	bool show_pure_local
	bool drop_deleted
	bool pull_tags
	string default_quality
	string default_structure

Config conf

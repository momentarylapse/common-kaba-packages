
struct Matrix
	var e: float[]
	var n = 0
	var m = 0
	func __init__()
	func __init__(el: float[][])
		n = len(el) # rows
		m = len(el[0]) # columns
		e.resize(n*m)
		for i in 0:n
			for j in 0:m
				e[i*m + j] = el[i][j]
	func mut clear(_n: int, _m: int)
		n = _n
		m = _m
		e.clear()
		e.resize(n*m)
	func mut add(i: int, j: int, f: float)
		e[i * m + j] += f
	func get(i: int, j: int) -> float
		return e[i * m + j]
	func __str__() -> string
		var s: string[]
		for i in 0:n
			s.add(str(e[i*m:(i+1)*m]))
		return s.join("\n")
	func mut diagonalize(out b: float[])
		for i in 0:n
			var f = get(i,i)
			if f == 0
				f = 0.0000001
			#print f
			for j in i:m
				e[i * m + j] /= f
			b[i] /= f
			
			for ii in i+1:n
				var g = get(ii, i)
				for j in i:m
					e[ii * m + j] -= e[i * m + j] * g
				b[ii] -= b[i] * g
	func solve(b: float[]) -> float[]
		if n != m or len(b) != n
			raise(new Exception("size mismatch"))
		var mm = self
		var x: float[]
		x.resize(m)
		var bb = b
		mm.diagonalize(bb)
		
		var i = n-1
		while i >= 0
			var s = 0.0
			for j in i+1:n
				s += mm.get(i, j) * x[j]
			var f = mm.get(i, i)
			if abs(f) > 0.00001
				x[i] = (bb[i] - s) # / f
			else
				x[i] = 0
			i --
		return x



# ok
func _test_solve()
	let mm = Matrix([[2.,1.],[-1.,2.]])
	print(mm)
	let x = mm.solve([1.0,1.0])
	print("-------")
	print(x)


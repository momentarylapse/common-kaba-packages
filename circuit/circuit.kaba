use linalg


class Node
	var phi = 0.0
	var pos: complex
	func __init__()
	func __init__(p: complex)
		pos = p

enum
	TYPE_CABLE
	TYPE_SOURCE
	TYPE_RESISTOR
	TYPE_CAPACITOR
	TYPE_INDUCTOR
	TYPE_DIODE
	NUM_TYPES

func edge_name(t: int) -> string
	if t == TYPE_CABLE
		return "Cable"
	if t == TYPE_SOURCE
		return "Source"
	if t == TYPE_RESISTOR
		return "Resistor"
	if t == TYPE_CAPACITOR
		return "Capacitor"
	if t == TYPE_INDUCTOR
		return "Inductor"
	if t == TYPE_DIODE
		return "Diode"
	return "???"

func edge_type(s: string) -> int
	for i in 0:NUM_TYPES
		if s == edge_name(i)
			return i
	return -1
	

# ARGH
func empty() -> float[]
	float[] r
	return r

class Edge
	var type: int
	var a, b: int
	var I, U: float
	var param: float[4]
	func __init__(_type: int, n: int[], p: float[])
		type = _type
		a = n[0]
		b = n[1]
		for pp,i in p
			param[i] = pp
		#print(str(self))
	func __assign__(o: Edge)
		pass
	func virtual const g(dt: float) -> float
		return 0.0
	func virtual const I_off(dt: float) -> float
		return 0.0
	func virtual update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)
	func virtual iterate(dt: float)
		pass
	func virtual reset_state()
	func virtual const param_names() -> string[]
		return []

class Cable extends Edge
	func __init__(n: int[])
		super.__init__(TYPE_CABLE, n, empty())
	func override g(dt: float) -> float
		return 1000
	func override update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)

class Source extends Edge
	func __init__(n: int[], i: float)
		super.__init__(TYPE_SOURCE, n, [i, 10000.0])
	func override g(dt: float) -> float
		return 1 / param[1]
	func override I_off(dt: float) -> float
		return -param[0]
	func override update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt) + param[0]
	func override param_names() -> string[]
		return ["I", "R"]

class Resistor extends Edge
	func __init__(n: int[], R: float)
		super.__init__(TYPE_RESISTOR, n, [R])
	func override g(dt: float) -> float
		return 1 / param[0]
	func override update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)
	func override param_names() -> string[]
		return ["R"]

class Capacitor extends Edge
	var U_prev = 0.0
	func __init__(n: int[], C: float)
		super.__init__(TYPE_CAPACITOR, n, [C])
	func override g(dt: float) -> float
		return param[0] / dt
	func override I_off(dt: float) -> float
		return U_prev * param[0] / dt
	func override update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = (U - U_prev) * g(dt)
	func override iterate(dt: float)
		U_prev = U
	func override param_names() -> string[]
		return ["C"]
	func override reset_state()
		U_prev = 0

class Inductor extends Edge
	var I_prev = 0.0
	func __init__(n: int[], L: float)
		super.__init__(TYPE_INDUCTOR, n, [L])
	func override g(dt: float) -> float
		return dt / param[0]
	func override I_off(dt: float) -> float
		return -I_prev
	func override update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = I_prev + U * g(dt)
	func override iterate(dt: float)
		I_prev = I
	func override param_names() -> string[]
		return ["L"]
	func override reset_state()
		I_prev = 0

#const float DIODE_DEFAULT_VT = 0.02585
#const float DIODE_DEFAULT_IS = 0.0000000001
const DIODE_DEFAULT_PARAMS = [0.02585, -23.0258, 1.5]

class Diode extends Edge
	var u_low, u_high: float
	var i_low, i_high: float
	var g_low, g_high: float
	func __init__(n: int[])
		super.__init__(TYPE_DIODE, n, DIODE_DEFAULT_PARAMS)
		U = param[0]
		u_low = -0.5
		u_high = 1
		g_high = (I_sch(u_high+0.01) - I_sch(u_high)) / 0.01
		g_low = (I_sch(u_low+0.1) - I_sch(u_low)) / 0.1
		#0.000001
		i_high = I_sch(u_high) - u_high*g_high
		i_low = I_sch(u_low) - u_low*g_low
	func override param_names() -> string[]
		return ["V_t", "ln(I_s)", "q"]
	func const I_sch(u: float) -> float
		return exp(param[1]) * (exp(u / param[2] / param[0]) - 1)
	func const I_id(u: float) -> float
		if u > u_high
			return u*g_high + i_high
		if u < u_low
			return u*g_low + i_low
		return exp(param[1]) * (exp(u / param[2] / param[0]) - 1)
	func override g(dt: float) -> float
		if U > u_high
			return g_high
		if U < u_low
			return g_low
		return exp(param[1] + U / param[2] / param[0]) / (param[2]*param[0])
	func override I_off(dt: float) -> float
		if U > u_high
			return -i_high
		if U < u_low
			return -i_low
		return g(dt) * U - I_id(U)
	func override update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = I_id(U)

class SimResult
	var U, I: float[][]
	var phi: float[][]
	func clear()
		U.clear()
		I.clear()
		phi.clear()

class Circuit
	var nodes: Node[]
	var edges: Edge*[]
	var _out: int
	
	func __init__()
		reset_default()
		
	func clear()
		nodes.clear()
		_out = 1
		for e in edges
			del e
		edges.clear()
	
	func reset_default()
		clear()
		nodes.add(Node(complex(0.2, 0.3)))
		nodes.add(Node(complex(0.2, 0.7)))
	
	func reset_state()
		for e in edges
			e.reset_state()
	
	func quick_out()
		string s
		for e in edges
			s += "{{e.U}}\t{{e.I}}\t"
		print(s)

	func create_G(out G: Matrix, dt: float)
		int n = len(nodes)-1
		G.clear(n,n)
		for e in edges
			int a = e.a-1
			int b = e.b-1
			float g = e.g(dt)
			if a >= 0 and b >= 0
				G.add(a, b, -g)
				G.add(b, a, -g)
			if a >= 0
				G.add(a, a, g)
			if b >= 0
				G.add(b, b, g)
	
	func create_I(out I: float[], I_in: float, dt: float)
		int n = len(nodes)-1
		I = [I_in]
		I.resize(n)
		for e in edges
			int a = e.a-1
			int b = e.b-1
			float I_off = e.I_off(dt)
			if a >= 0
				I[a] += I_off
			if b >= 0
				I[b] -= I_off

	func optimizer_step(I_in: float, dt: float)
		int n = len(nodes)-1
		Matrix G
		create_G(G, dt)
		#print("G")
		#print(G)
		
		
		float[] I
		create_I(I, I_in, dt)
		#print("I " + I)
	
		# U = R * I
		# I = G * U
		float[] u = G.solve(I)
		#print("u " + u)
		
		# update potentials
		for i in 0:n
			nodes[i+1].phi = u[i]
		# update edges
		for e in edges
			e.update(nodes, dt)
	
	func time_step(I_in: float, dt: float)
		
		#print("-----")
		for i in 0:15
			optimizer_step(I_in, dt)
		
		# update edges
		for e in edges
			e.iterate(dt)
	
	func get_xxxx() -> float
		float Uin = nodes[1].phi
		float Uout = nodes[_out].phi
		float factor = Uout / Uin
		#print(factor)
		return factor
	
	func simulate(t_max: float, dt: float, amp: float, omega: float, type: int, out res: SimResult)
		for t in 0:t_max:dt
		
			# input
			float input = amp
			if type == 1
				input = amp * sin(t * omega)
			else if type == 2
				if sin(t * omega) < 0
					input = 0
			else if type == 3
				input = amp * loop(t*omega/2/pi, -1, 1)
			
			
			time_step(input, dt)
			
			# result
			float[] I, U, phi
			for e in edges
				I.add(e.I)
				U.add(e.U)
			for n in nodes
				phi.add(n.phi)
			res.U.add(U)
			res.I.add(I)
			res.phi.add(phi)
	
	func export() -> string
		string s
		for n in nodes
			s += "Node:{{n.pos.x}}:{{n.pos.y}}\n"
		for e in edges
			s += edge_name(e.type) + ":{{e.a}:{{e.b}}"
			int n = len(e.param_names())
			for i in 0:n
				s += ":{{e.param[i]}}"
			s += "\n"
		s += "Out:{{_out}}\n"
		return s
	
	func import(s: string)
		clear()
		string[] lines = s.explode("\n")
		for l in lines
			string[] x = l.explode(":")
			if len(x) == 0
				continue
			if x[0] == "Node"
				nodes.add(Node(complex(float(x[1]), float(x[2]))))
			else if x[0] == "Out"
				_out = int(x[1])
			else
				int t = edge_type(x[0])
				int[] n = [int(x[1]), int(x[2])]
				Edge* e = add_default(n, t)
				for i in 3:len(x)
					e.param[i] = float(x[i])
	
	func add_default(n: int[], t: int) -> Edge*
		Edge* e = nil
		if t == TYPE_CABLE
			e = new Cable(n)
		else if t == TYPE_SOURCE
			e = new Source(n, 1)
		else if t == TYPE_RESISTOR
			e = new Resistor(n, 10)
		else if t == TYPE_CAPACITOR
			e = new Capacitor(n, 1)
		else if t == TYPE_INDUCTOR
			e = new Inductor(n, 1)
		else if t == TYPE_DIODE
			e = new Diode(n)
		else
			raise(new Exception("unknown type: {{t}}"))
		edges.add(e)
		return e

func _main()
	Circuit c
	#c.edges.add(new Resistor([0,1], 1))
	#c.nodes.add(Node(complex(0,0)))
	#c.edges.add(new Diode([0, 2]))
	#c.edges.add(new Resistor([2,1], 1))
	c.edges.add(new Diode([0, 1]))
	print(str(c))
	SimResult res
	c.simulate(1, 1, 0.1, 1, 0, res)
	print(str(c))

func __main()
	Diode* d = new Diode([0,0])
	return
	for f in 0.5:1.5:0.01
	#	print(f)
		d.U = f
		print(d.I_id(f))
	

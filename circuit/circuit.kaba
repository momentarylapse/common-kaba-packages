use linalg


class Node
	var phi = 0.0
	var pos: vec2
	func __init__()
	func __init__(p: vec2)
		pos = p

enum EdgeType
	CABLE as "Cable"
	SOURCE as "Source"
	RESISTOR as "Resistor"
	CAPACITOR as "Capacitor"
	INDUCTOR as "Inductor"
	DIODE as "Diode"


# ARGH
func empty() -> float[]
	var r: float[]
	return r

class Edge
	var type: EdgeType
	var a, b: int
	var I, U: float
	var param: float[4]
	func __init__(_type: EdgeType, n: int[], p: float[])
		type = _type
		a = n[0]
		b = n[1]
		for i=>pp in p
			param[i] = pp
		#print(str(self))
	func __assign__(o: Edge)
		pass
	func virtual g(dt: float) -> float
		return 0.0
	func virtual I_off(dt: float) -> float
		return 0.0
	func virtual mut update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)
	func virtual mut iterate(dt: float)
		pass
	func virtual mut reset_state()
	func virtual param_names() -> string[]
		return []

class Cable extends Edge
	func __init__(n: int[])
		super.__init__(EdgeType.CABLE, n, empty())
	func override g(dt: float) -> float
		return 1000
	func override mut update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)

class Source extends Edge
	func __init__(n: int[], i: float)
		super.__init__(EdgeType.SOURCE, n, [i, 10000.0])
	func override g(dt: float) -> float
		return 1 / param[1]
	func override I_off(dt: float) -> float
		return -param[0]
	func override mut update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt) + param[0]
	func override param_names() -> string[]
		return ["I", "R"]

class Resistor extends Edge
	func __init__(n: int[], R: float)
		super.__init__(EdgeType.RESISTOR, n, [R])
	func override g(dt: float) -> float
		return 1 / param[0]
	func override mut update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = U * g(dt)
	func override param_names() -> string[]
		return ["R"]

class Capacitor extends Edge
	var U_prev = 0.0
	func __init__(n: int[], C: float)
		super.__init__(EdgeType.CAPACITOR, n, [C])
	func override g(dt: float) -> float
		return param[0] / dt
	func override I_off(dt: float) -> float
		return U_prev * param[0] / dt
	func override mut update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = (U - U_prev) * g(dt)
	func override mut iterate(dt: float)
		U_prev = U
	func override param_names() -> string[]
		return ["C"]
	func override mut reset_state()
		U_prev = 0

class Inductor extends Edge
	var I_prev = 0.0
	func __init__(n: int[], L: float)
		super.__init__(EdgeType.INDUCTOR, n, [L])
	func override g(dt: float) -> float
		return dt / param[0]
	func override I_off(dt: float) -> float
		return -I_prev
	func override mut update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = I_prev + U * g(dt)
	func override mut iterate(dt: float)
		I_prev = I
	func override param_names() -> string[]
		return ["L"]
	func override mut reset_state()
		I_prev = 0

#const float DIODE_DEFAULT_VT = 0.02585
#const float DIODE_DEFAULT_IS = 0.0000000001
const DIODE_DEFAULT_PARAMS = [0.02585, -23.0258, 1.5]

class Diode extends Edge
	var u_low, u_high: float
	var i_low, i_high: float
	var g_low, g_high: float
	func __init__(n: int[])
		super.__init__(EdgeType.DIODE, n, DIODE_DEFAULT_PARAMS)
		U = param[0]
		u_low = -0.5
		u_high = 1
		g_high = (I_sch(u_high+0.01) - I_sch(u_high)) / 0.01
		g_low = (I_sch(u_low+0.1) - I_sch(u_low)) / 0.1
		#0.000001
		i_high = I_sch(u_high) - u_high*g_high
		i_low = I_sch(u_low) - u_low*g_low
	func override param_names() -> string[]
		return ["V_t", "ln(I_s)", "q"]
	func const I_sch(u: float) -> float
		return exp(param[1]) * (exp(u / param[2] / param[0]) - 1)
	func const I_id(u: float) -> float
		if u > u_high
			return u*g_high + i_high
		if u < u_low
			return u*g_low + i_low
		return exp(param[1]) * (exp(u / param[2] / param[0]) - 1)
	func override g(dt: float) -> float
		if U > u_high
			return g_high
		if U < u_low
			return g_low
		return exp(param[1] + U / param[2] / param[0]) / (param[2]*param[0])
	func override I_off(dt: float) -> float
		if U > u_high
			return -i_high
		if U < u_low
			return -i_low
		return g(dt) * U - I_id(U)
	func override mut update(nodes: Node[], dt: float)
		U = nodes[a].phi - nodes[b].phi
		I = I_id(U)

class SimResult
	var U, I: float[][]
	var phi: float[][]
	func mut clear()
		U.clear()
		I.clear()
		phi.clear()

class Circuit
	var nodes: Node[]
	var edges: Edge*[]
	var _out: int
	
	func __init__()
		reset_default()
		
	func mut clear()
		nodes.clear()
		_out = 1
		for e in edges
			del e
		edges.clear()
	
	func mut reset_default()
		clear()
		nodes.add(Node((0.2, 0.3)))
		nodes.add(Node((0.2, 0.7)))
	
	func mut reset_state()
		for e in edges
			e.reset_state()
	
	func quick_out()
		var s: string
		for e in edges
			s += "{{e.U}}\t{{e.I}}\t"
		print(s)

	func create_G(out G: Matrix, dt: float)
		var n = len(nodes)-1
		G.clear(n,n)
		for e in edges
			var a = e.a-1
			var b = e.b-1
			var g = e.g(dt)
			if a >= 0 and b >= 0
				G.add(a, b, -g)
				G.add(b, a, -g)
			if a >= 0
				G.add(a, a, g)
			if b >= 0
				G.add(b, b, g)
	
	func create_I(out I: float[], I_in: float, dt: float)
		var n = len(nodes)-1
		I = [I_in]
		I.resize(n)
		for e in edges
			var a = e.a-1
			var b = e.b-1
			var I_off = e.I_off(dt)
			if a >= 0
				I[a] += I_off
			if b >= 0
				I[b] -= I_off

	func mut optimizer_step(I_in: float, dt: float)
		var n = len(nodes)-1
		var G: Matrix
		create_G(G, dt)
		#print("G")
		#print(G)
		
		
		var I: float[]
		create_I(I, I_in, dt)
		#print("I " + I)
	
		# U = R * I
		# I = G * U
		var u = G.solve(I)
		#print("u " + u)
		
		# update potentials
		for i in 0:n
			nodes[i+1].phi = u[i]
		# update edges
		for e in edges
			e.update(nodes, dt)
	
	func mut time_step(I_in: float, dt: float)
		
		#print("-----")
		for i in 0:15
			optimizer_step(I_in, dt)
		
		# update edges
		for e in edges
			e.iterate(dt)
	
	func get_xxxx() -> float
		var Uin = nodes[1].phi
		var Uout = nodes[_out].phi
		var factor = Uout / Uin
		#print(factor)
		return factor
	
	func mut simulate(t_max: float, dt: float, amp: float, omega: float, type: int, out res: SimResult)
		for t in 0:t_max:dt
		
			# input
			var input = amp
			if type == 1
				input = amp * sin(t * omega)
			else if type == 2
				if sin(t * omega) < 0
					input = 0
			else if type == 3
				input = amp * loop(t*omega/2/pi, -1, 1)
			
			
			time_step(input, dt)
			
			# result
			var I, U, phi: float[]
			for e in edges
				I.add(e.I)
				U.add(e.U)
			for n in nodes
				phi.add(n.phi)
			res.U.add(U)
			res.I.add(I)
			res.phi.add(phi)
	
	func export() -> string
		var s: string
		for n in nodes
			s += "Node:{{n.pos.x}}:{{n.pos.y}}\n"
		for e in edges
			s += str(e.type) + ":{{e.a}:{{e.b}}"
			var n = len(e.param_names())
			for i in 0:n
				s += ":{{e.param[i]}}"
			s += "\n"
		s += "Out:{{_out}}\n"
		return s
	
	func mut import(s: string)
		clear()
		var lines = s.explode("\n")
		for l in lines
			var x = l.explode(":")
			if len(x) == 0
				continue
			if x[0] == "Node"
				nodes.add(Node((float(x[1]), float(x[2]))))
			else if x[0] == "Out"
				_out = int(x[1])
			else
				var t = EdgeType.parse(x[0])
				var n = [int(x[1]), int(x[2])]
				var e: Edge* = add_default(n, t)
				for i in 3:len(x)
					e.param[i] = float(x[i])
	
	func mut add_default(n: int[], t: EdgeType) -> Edge*
		var e: Edge* = nil
		if t == EdgeType.CABLE
			e = new Cable(n)
		else if t == EdgeType.SOURCE
			e = new Source(n, 1)
		else if t == EdgeType.RESISTOR
			e = new Resistor(n, 10)
		else if t == EdgeType.CAPACITOR
			e = new Capacitor(n, 1)
		else if t == EdgeType.INDUCTOR
			e = new Inductor(n, 1)
		else if t == EdgeType.DIODE
			e = new Diode(n)
		else
			raise(new Exception("unknown type: {{t}}"))
		edges.add(e)
		return e

func _main()
	var c: Circuit
	#c.edges.add(new Resistor([0,1], 1))
	#c.nodes.add(Node((0,0)))
	#c.edges.add(new Diode([0, 2]))
	#c.edges.add(new Resistor([2,1], 1))
	c.edges.add(new Diode([0, 1]))
	print(str(c))
	var res: SimResult
	c.simulate(1, 1, 0.1, 1, 0, res)
	print(str(c))

func __main()
	var d = new Diode([0,0])
	return
	for f in 0.5:1.5:0.01
	#	print(f)
		d.U = f
		print(d.I_id(f))
	

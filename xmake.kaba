class Config
	string root
	string binary
	string main_file
	string flags_global
	string flags_compile
	string flags_link
	string[] install
	
	bool verbose
	
	void load()
		File* f = FileOpenText(conf.root + "xmake.conf")
		string t
		while true
			f >> t
			if t.num == 0
				break
			if t == "# binary name"
				f >> binary
			else if t == "# main file"
				f >> main_file
			else if t == "# options"
				f >> flags_global
			else if t == "# flags"
				f >> flags_compile
			else if t == "# linking flags"
				f >> flags_link
			else if t == "# install"
				while true
					f >> t
					if t.num == 0
						break
					install.add(t)
				break
			else
				raise(new Exception("unknown tag: " + t))
		delete f
Config conf

class SourceFile
	string filename
	string object()
		return filename.replace(".cpp", ".o")
	string[] dep
	bool add_dep(string d)
		for dd in dep
			if dd == d
				return false
		dep.add(d)
		return true

SourceFile[] sources

string rel(string filename)
	return filename.substr(conf.root.num, -1)

string canonical(string filename)
	string[] p = filename.explode("/")
	for i in 0:p.num
		if p[i] == ".." and i > 0
			p.remove(i)
			p.remove(i-1)
			i -= 2
	return p.join("/")
			

void find_dep(SourceFile f, string filename)
	string s
	try
		s = FileRead(filename)
	except
		return
	string[] lines = s.explode("\n")
	
	for l in lines
		int p = l.find("#include \"", 0)
		if p >= 0
			int q = l.find("\"", p + 11)
			string d = filename.dirname() + l.substr(p+10, q-p-10)
			d = canonical(d)
			if FileExists(d)
				if f.add_dep(d)
					//print("  " + rel(d))
					find_dep(f, d)

void parse_source(string filename)
	if conf.verbose
		print(rel(filename))
	SourceFile f
	f.filename = filename
	
	find_dep(f, filename)
	
	sources.add(f)

void parse_dir(string dir)
	DirEntry[] files = DirSearch(dir, "*.cpp", true)
	for f in files
		if f.is_dir
			parse_dir(dir + f.name + "/")
		else
			parse_source(dir + f.name)

void create()
	File* f = FileCreateText(conf.root + "Makefile")
	f << "BIN = ../" + conf.binary
	f << "CPP = g++"
	f << "GLOBALFLAGS = " + conf.flags_global
	f << "CXXFLAGS = " + conf.flags_compile + " $(GLOBALFLAGS)"
	f << "CXXFLAGSLINKING = " + conf.flags_link + " $(GLOBALFLAGS)"
	f << ""
	string[] obj
	for s in sources
		if rel(s.filename) != conf.main_file
			obj.add(rel(s.object()))
	f << "OBJ = " + obj.join(" \\\n ")
	f << ""
	f << "$(BIN) : $(OBJ) " + conf.main_file.replace(".cpp", ".o")
	f << "\t$(CPP) $(OBJ) " + conf.main_file.replace(".cpp", ".o") + " -o $(BIN) $(CXXFLAGSLINKING)"
	f << ""
	f << "all : $(BIN)"
	f << ""
	for s in sources
		string a = rel(s.object()) + " : " + rel(s.filename)
		for d in s.dep
			a += " " + rel(d)
		f << a
		f << "\t$(CPP) -c " + rel(s.filename) + " -o $@ $(CXXFLAGS)"
		f << ""
	f << "install :"
	for i in conf.install
		f << i
	f << ""
	f << "clean :"
	f << "\trm -f $(BIN)"
	f << "\tfind . -name \"*.o\" -exec rm -f {} \\;"
	f << "\tfind . -name \"*.a\" -exec rm -f {} \\;"
	f << ""


	
	delete f

void main(string[] arg)
	if arg.num == 0
		return
	conf.root = arg[0]
	conf.verbose = false
	if conf.root.tail(1) != "/"
		conf.root += "/"
	
	conf.load()
	if conf.verbose
		print(conf.install.join("\n"))
	
	parse_dir(conf.root)
	
	create()
	
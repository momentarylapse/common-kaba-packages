let KABA_LINK = "libusb-1.0
	_libusb_init:libusb_init
	_libusb_exit:libusb_exit
	_libusb_set_debug:libusb_set_debug
	_libusb_get_device_list:libusb_get_device_list
	_libusb_free_device_list:libusb_free_device_list
	_libusb_get_bus_number:libusb_get_bus_number
	_libusb_get_port_number:libusb_get_port_number
	_libusb_get_port_numbers:libusb_get_port_numbers
	_libusb_get_device_address:libusb_get_device_address
	_libusb_get_device_descriptor:libusb_get_device_descriptor
	_libusb_get_config_descriptor:libusb_get_config_descriptor
	_libusb_free_config_descriptor:libusb_free_config_descriptor
	_libusb_clear_halt:libusb_clear_halt
	_libusb_open:libusb_open
	_libusb_open_device_with_vid_pid:libusb_open_device_with_vid_pid
	_libusb_close:libusb_close
	_libusb_reset_device:libusb_reset_device
	_libusb_get_device:libusb_get_device
	_libusb_get_configuration:libusb_get_configuration
	_libusb_set_configuration:libusb_set_configuration
	_libusb_claim_interface:libusb_claim_interface
	_libusb_release_interface:libusb_release_interface
	_libusb_kernel_driver_active:libusb_kernel_driver_active
	_libusb_detach_kernel_driver:libusb_detach_kernel_driver
	_libusb_set_interface_alt_setting:libusb_set_interface_alt_setting
	_libusb_interrupt_transfer:libusb_interrupt_transfer
	_libusb_control_transfer:libusb_control_transfer
"


class _context
class _device
class _handle
class _descriptor
	var i: int[8]
class _endpoint_descriptor
	var i: int[3]
	func address() -> int
		return (i[0] & 0x00ff0000) >> 16
	func attributes() -> int
		return (i[0] & 0xff000000) >> 24
	func max_packet_size() -> int
		return i[1] & 0x0000ffff
class _interface_descriptor
	var i: int[4]
	var endpoint: _endpoint_descriptor[0]&
	func num_endpoints() -> int
		return i[1] & 0x000000ff
	func interface() -> int
		return (i[0] & 0x00ff0000) >> 16
	func alt_setting() -> int
		return (i[0] & 0xff000000) >> 24
class _interface
	var altsetting: _interface_descriptor[0]&
	var num_altsettings, xxx: int
class _config_descriptor
	var i: int[4]
	var interface: _interface[0]&
	func num_interfaces() -> int
		return i[1] & 0x000000ff
	func config_value() -> int
		return (i[1] & 0x0000ff00) >> 8
	#int config_index()
	#	return (i[1] & 0x00ff0000) >> 16

func extern _libusb_init(c: _context**) -> int
func extern _libusb_exit(c: _context*)
func extern _libusb_set_debug(c: _context*, level: int)
func extern _libusb_get_device_list(c: _context*, list: void*) -> int
func extern _libusb_free_device_list(list: void*, unref: int)
func extern _libusb_get_bus_number(d: _device*) -> int
func extern _libusb_get_port_number(d: _device*) -> int
func extern _libusb_get_port_numbers(d: _device*, ports: void*, len: int) -> int
func extern _libusb_get_device_address(d: _device*) -> int
#extern int _libusb_get_device_descriptor(_device* d, _descriptor *desc)
func extern _libusb_get_device_descriptor(d: _device*, desc: void*) -> int
func extern _libusb_get_config_descriptor(d: _device*, conf: int, desc: void*) -> int
func extern _libusb_free_config_descriptor(desc: void*)

func extern _libusb_open(d: _device*, h: _handle**) -> int
func extern _libusb_open_device_with_vid_pid(c: _context*, vid: int, pid: int) -> _handle*
func extern _libusb_close(h: _handle*)
func extern _libusb_reset_device(h: _handle*) -> int
func extern _libusb_get_device(h: _handle*) -> _device*
func extern _libusb_get_configuration(h: _handle*) -> int
func extern _libusb_set_configuration(h: _handle*, conf: int) -> int
func extern _libusb_claim_interface(h: _handle*, i: int) -> int
func extern _libusb_release_interface(h: _handle*, i: int) -> int
func extern _libusb_kernel_driver_active(h: _handle*, i: int) -> int
func extern _libusb_detach_kernel_driver(h: _handle*, i: int) -> int
func extern _libusb_clear_halt(h: _handle*, endpoint: int) -> int
func extern _libusb_set_interface_alt_setting(h: _handle*, i: int, alt: int) -> int

func extern _libusb_interrupt_transfer(h: _handle*, entpoint: int, data: void*, length: int, transferred: int*, timeout: int) -> int
func extern _libusb_control_transfer(h: _handle*, req_type: int, request: int, value: int, index: int, data: void*, length: int, timeout: int) -> int

struct DeviceInfo
	var bus, port, address: int
	var _class, sub_class, protocoll, max_package_size, num_configs: int
	var vid, pid: int
	func __str__() -> string
		return "{{bus}}:{{address}}  0x{{vid|4x}}:{{pid|4x}}  {{_class}}  {{sub_class}}"

func REPORT_ERROR(r: int, msg: string)
	var e = "????  {{r}}"
	if r == -1
		e = "IO ERROR"
	else if r == -2
		e = "INVALID PARAM"
	else if r == -3
		e = "ACCESS DENIED"
	else if r == -4
		e = "NO DEVICE"
	else if r == -5
		e = "NOT FOUND"
	else if r == -6
		e = "BUSY"
	else if r == -7
		e = "TIMEOUT"
	else if r == -8
		e = "OVERFLOW"
	else if r == -9
		e = "PIPE"
	else if r == -10
		e = "INTERRUPTED"
	else if r == -11
		e = "NO MEMORY"
	else if r == -12
		e = "NOT SUPPORTED"
	raise(new Exception(msg + "  " + e))
func CHECK(r: int, msg: string)
	if r < 0
		REPORT_ERROR(r, msg)

struct Device
	var dev: _device*
	
	var static dummy: _config_descriptor
	
	func get_info() -> DeviceInfo
		var i: DeviceInfo
		i.bus = _libusb_get_bus_number(dev)
		i.port = _libusb_get_port_number(dev)
		i.address = _libusb_get_device_address(dev)
		
		var desc: _descriptor
		CHECK(_libusb_get_device_descriptor(dev, &desc), "can not get device descriptor")
		i._class = desc.i[1] & 0x000000ff
		i.sub_class = (desc.i[1] & 0x0000ff00) >> 8
		i.protocoll = (desc.i[1] & 0x00ff0000) >> 16
		i.max_package_size = (desc.i[1] & 0xff000000) >> 24
		i.vid = desc.i[2] & 0x0000ffff
		i.pid = (desc.i[2] & 0xffff0000) >> 16
		i.num_configs = (desc.i[4] & 0x0000ff00) >> 8
		return i
	func path() -> int[]
		var s = "       "
		var n = _libusb_get_port_numbers(dev, &s[0], len(s))
		CHECK(n, "can not get port numbers")
		return [for ch in s[:n] int(ch)]
	func get_config_desc(index: int)
		var desc: _config_descriptor& = &dummy
		CHECK(_libusb_get_config_descriptor(dev, index, &desc), "can not get config descriptor")
		#let b = binary(desc, 36).hex()
		#print(b)
		print("[config]")
		print("  value: {{desc.config_value()}}")
		let num_if = desc.num_interfaces()
		for i in 0:num_if
			print("  [interface]")
			var ii = &desc.interface[i]
			for j in 0:ii.num_altsettings
				print("    [alt]")
				var a = &ii.altsetting[j]
				print("      interface:   {{a.interface()}}")
				print("      alt setting: {{a.alt_setting()}}")
				#print(a)
				for k in 0:a.num_endpoints()
					var e = &a.endpoint[k]
					#any ep
					#ep.set("address", e.address())
					#ep.set("attributes", e.attributes())
					#ep.set("max_packet_size", e.max_packet_size())
					print("      [endpoint]")
					print("        address:         {{e.address()}}")
					print("        attributes:      {{e.attributes()}}")
					print("        max packet size: {{e.max_packet_size()}}")
		_libusb_free_config_descriptor(desc)
	func open() -> xfer[Handle]
		var h = new Handle()
##		h.dev = &self
		CHECK(_libusb_open(dev, &h.h), "can not open device")
		return give(h)
		

class Context
	var c: _context* = nil
	func __delete__()
		_libusb_exit(c)
	func enumerate() -> xfer[Device][]
		var r: owned[Device][]
		var list: _device*[0]*
		let n = _libusb_get_device_list(c, &list)
		for ll in list
			for i in 0:n
				var dev = new Device(ll[i])
				r.add(give(dev))
		_libusb_free_device_list(list, 1)
		return give(r)
	func open(vid: int, pid: int) -> xfer[Handle]
		var h = new Handle()
		#int v = vid << 16 + pid
		h.h = _libusb_open_device_with_vid_pid(c, vid, pid)
		if !h.h
			raise(new Exception("device not found"))
##		h.dev = new Device(_libusb_get_device(h.h))
		return give(h)

class Handle
	var h: _handle* = nil
##	var dev: Device*
	func __delete__()
		if h
			_libusb_close(h)
	func reset()
		CHECK(_libusb_reset_device(h), "can not reset device")
	func get_config() -> int
		return _libusb_get_configuration(h)
	func set_config(conf: int)
		CHECK(_libusb_set_configuration(h, conf), "set config")
	func claim_interface(i: int)
		CHECK(_libusb_claim_interface(h, i), "claim")
	func release_interface(i: int)
		_libusb_release_interface(h, i)
	func kernel_driver_active(i: int) -> bool
		let r = _libusb_kernel_driver_active(h, i)
		CHECK(r, "kernel driver?!?")
		return r == 1
	func detach_kernel_driver(i: int)
		CHECK(_libusb_detach_kernel_driver(h, i), "can not detach kernel driver")
	func clear_halt(endpoint: int)
		CHECK(_libusb_clear_halt(h, endpoint), "can not clear halt")
	func set_interface_alt_setting(i: int, alt: int)
		CHECK(_libusb_set_interface_alt_setting(h, i, alt), "can not set alt")
		
	
	func interrupt_transfer(endpoint: int, data: bytes, timeout: int) -> int
		var transferred: int
		CHECK(_libusb_interrupt_transfer(h, endpoint, &data[0], len(data), &transferred, timeout), "interrupt transfer")
		return transferred
	func interrupt_read(endpoint: int, max_size: int, timeout: int) -> bytes
		var data: bytes
		data.resize(max_size)
		let transferred = interrupt_transfer(endpoint | 0x80, data, timeout)
		data.resize(transferred)
		return data
	
	# endpoint = 0
	func control_transfer(req: int[], data: bytes, timeout: int) -> int
		let r = _libusb_control_transfer(h, req[0],req[1],req[2],req[3], &data[0], len(data), timeout)
		CHECK(r, "control transfer")
		return r
	func control_write(req: int[], data: bytes) -> int
		return control_transfer(req, data, 1000)
	func control_read(req: int[], max_size: int) -> bytes
		var data: bytes
		data.resize(max_size)
		let r = control_transfer(req, data, 1000)
		data.resize(r)
		return str(r)

func init() -> xfer[Context]
	var c = new Context()
	CHECK(_libusb_init(&c.c), "can not init library")
	return give(c)


func main()
	var c = init()
	var devs = c.enumerate()
	for d in devs
		print(str(d.get_info()))


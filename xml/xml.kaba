use os


func _is_whitespace(c: u8) -> bool
	return (c == ' ' or c == 9 or c == 10 or c == 13)


func _is_special(c: u8) -> bool
	return (c == '<' or c == '>' or c == '?' or c == '=' or c == '/')


func _skip_ws(s: string, i0: i32) -> i32
	for i in i0:len(s)
		if not _is_whitespace(s[i])
			return i
	return len(s)


func _decode_str(s: string) -> string
	if s[:1] == "\""
		return s[1:-1]
	if s[:1] == "'"
		return s[1:-1]
	return s


func _next(s: string, out i0: i32) -> string
	i0 = _skip_ws(s, i0)
	var r = _peek(s, i0)
	i0 += len(r)
	return r


func _peek(s: string, i0: i32) -> string
	var i = i0
	i = _skip_ws(s, i)
	var r: string
	if _is_special(s[i])
		return s[i:i+1]
	if s[i] == '"'
		for j in i+1:len(s)
			if s[j] == '"'
				return s[i:j+1]
	if s[i] == '''
		for j in i+1:len(s)
			if s[j] == '''
				return s[i:j+1]
	for j in i:len(s)
		if _is_whitespace(s[j]) or _is_special(s[j])
			return s[i:j]
	return ""


func _parse_tag(out tag_key: string, s: string, out i0: i32) -> (Any,bool)
	if _next(s, i0) != "<"
		raise(new Exception("< expected"))

	tag_key = _next(s, i0)
	if tag_key == "?"
		tag_key = _next(s, i0)
	if tag_key == "/"
		tag_key += _next(s, i0)
	#print("TAG: " + tag_key[:20])

	var tag: Any
	var selfclosing = false
	while true
		let n = _next(s, i0)
		if n == ">"
			return (tag,selfclosing)
		else if n == "?"
			continue
		else if n == "/"
			selfclosing = true
			continue
		else
			let key = n
			#print("KEY {{key}}")
			if _next(s, i0) != "="
				raise(new Exception("= expected after {{key}}"))
			let value = _decode_str(_next(s, i0))
			#print("VAL {{value}}")
			tag[key] = value
	return (tag,selfclosing)


func _doc_set(out doc: Any, k: string, c: Any)
	if k in doc.keys()
		if doc[k]!.type() != Any[]
			doc[k] = dyn([*doc[k]!])
			#print(doc)
		doc[k]!.add(c)
		#print(doc)
	else
		doc[k] = c


func _parse_inside_part(s: string, key: string, out i0: i32, out part: Any) -> string
	#print(">> INSIDE {{key}}")
	#print(part)
	var content: string
	while true
		var p = _peek(s, i0)
		if p == "<"
			# child <tag>
			var k: string
			var (tag,selfclosing) = _parse_tag(k, s, i0)
			#print("---------------" + k[:20])
			#print(tag)
			if k[:1] == "/"
				#print("<< END TAG")
				#print("<< OUTSIDE {{key}}")
				return ""
			else if k[:7] == "![CDATA"
				#print("  CDATA!!")
				#part.set("_", "...")#k[8:-1])
				#print("<< OUTSIDE {{key}}")
				#return "..."
				part["_"] = "...."
			else if selfclosing
				# <child/>
				_doc_set(part, k, tag)
			else
				#print(">> SUB TAG {{k}} of {{key}}")
				#print("BEFORE {{part}}")
				#any subpart
				var cc = _parse_inside_part(s, k, i0, tag)
				#print("...add... " + subpart + " into " + part + " at " + k)
				#print("{{len(tag)}}  {{len(cc)}}")
				#print("BEFORE' {{part}}")
				if len(tag) > 0
					if len(cc) > 0
						#print("   ADD CONT")
						tag["_"] = cc
					#print("   ADD SUBP")
					_doc_set(part, k, tag)
				else if len(cc) > 0
					#print("   ADD CONT " + k)
					_doc_set(part, k, cc)
				#return ""
		else
			# raw content -> until next <tag>
			for i in i0:len(s)
				if s[i] == '<'
					break
				content.add(s[i])
			i0 += len(content)
			#print("CONTENTS " + content)
			var k: string
			var (tag,_sc) = _parse_tag(k, s, i0)
			if k != "/" + key
				raise(new Exception("end tag expected"))
			#print("<< OUTSIDE {{key}}")
			return content
		#print("AGAIN! in {{key}}")
	#print("<< OUTSIDE {{key}}")

func _parse_tag_complete(out key: string, s: string, out i: i32) -> Any

	var (t,selfclosing) = _parse_tag(key, s, i)
	if not selfclosing
		_parse_inside_part(s, key, i, t)
	return t


func parse(s: string) -> Any
	var i = 0

	var key: string
	var header = _parse_tag(key, s, i)

	var root: Any
	var t = _parse_tag_complete(key, s, i)
	root[key] = t

	#root.set("?xml", header)

	return root


func _encode_part(key: string, doc: Any, pre: string) -> string
	if doc.type() in [i32, f32, string]
		# string
		return "{{pre}}<{{key}}>{{doc}}</{{key}}>\n"
	else if doc.type == Any{}
		# dict
		var s: string
		s += "{{pre}}<{{key}}>\n"
		for k in doc.keys()
			s += _encode_part(k, doc[k]!, pre + "\t")
		s += "{{pre}}</{{key}}>\n"
		return s
	else if doc.type == Any[]
		# array
		var s: string
		for i in 0:len(doc)
			s += _encode_part(key, doc[i]!, pre)
		return s
	else
		return "???{{doc.type}}\n"


func encode(doc: Any) -> string
	var s = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
	if doc.type != Any{}
		raise(new Exception("doc must be a dict"))
	for k in doc.keys()
		s += _encode_part(k, doc[k]!, "")
	return s


func main()
	var d = dyn({"a":{"b":[{"x":2, "y":1.1}, "c"], "d":{"a":"4"}}})
	print(d)
	print(encode(d))
	print(parse(encode(d)))
	
	print("--------")
	print(parse("<?xml version=\"1.0\" encoding=\"UTF-8\"?><a><test/><x a=\"b\"/></a>"))

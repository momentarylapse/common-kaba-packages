use file

string dir_absolute(string dir)
	if dir.head(2) == "./"
		return dir_absolute(Filesystem.current_directory() + dir.substr(2,-1))
	if dir.head(3) == "../"
		return dir_absolute(Filesystem.current_directory() + dir)
		
	string[] xx = dir.explode("/")
	for x,i in xx
		if x == ".." and i > 0
			xx.remove(i)
			xx.remove(i-1)
			i -= 2
	return xx.join("/")

string dir_canonical(string dir)
	string d = dir_absolute(dir)
	if d.tail(1) == "/"
		return d
	return d + "/"

bool sa_has(string[] a, string val)
	for e in a
		if e == val
			return true
	return false

# project
class Config
	string root
	bool verbose
	
	string name
	string binary
	string main_file
	string[] libs
	string[] libs_optional
	string[] ignore_libs
	string language
	string flags_global
	string flags_compiler
	string flags_linker
	string[] icons
	string desktop_file
	string[] mime_files
	string[] installs
	
	void __init__()
		language = "c++14"
	
	bool ignored(string l)
		for ig in ignore_libs
			if l == ig
				return true
		return false
	
	void load()
		File* f = Filesystem.open_text(conf.root + "xmake.conf")
		string t
		while !f.eof()
			f >> t
			if t.num == 0
				break
			if t == "# project name"
				f >> name
			else if t == "# binary name"
				f >> binary
			else if t == "# main file"
				f >> main_file
			else if t == "# language"
				f >> language
			else if t == "# flags"
				f >> flags_global
			#else if t == "# compiler flags"
#				f >> flags_compiler
#			else if t == "# linker flags"
#				f >> flags_linker
			else if t == "# libraries"
				f >> t
				libs = t.explode(",")
			else if t == "# libraries optional"
				f >> t
				libs_optional = t.explode(",")
			else if t == "# icons"
				f >> t
				icons = t.explode(",")
			else if t == "# desktop file"
				f >> desktop_file
			else if t == "# mime files"
				f >> t
				mime_files = t.explode(",")
			else if t == "# additional install"
				f >> t
				installs = t.explode(",")
			else
				raise(new Exception("unknown tag: " + t))
		delete f
	void save()
		File* f = Filesystem.create_text(conf.root + "xmake.conf")
		f << "# project name"
		f << name
		f << "# binary name"
		f << binary
		f << "# main file"
		f << main_file
		f << "# language"
		f << language
		f << "# flags"
		f << flags_global
		f << "# libraries"
		f << libs.join(",")
		f << "# libraries optional"
		f << libs_optional.join(",")
		f << "# icons"
		f << icons.join(",")
		f << "# desktop file"
		f << desktop_file
		f << "# mime files"
		f << mime_files.join(",")
		f << "# additional install"
		f << installs.join(",")
		delete f
	
	DirEntry[] needs_installing()
		DirEntry[] r
		let list = Filesystem.search("../static", "*.*", true)
		let ignore = mime_files
		ignore.add(desktop_file)
		for e in list
			if !sa_has(ignore, e.name)
				e.name = "static/" + e.name
				r.add(e)
		for i in installs
			DirEntry e
			e.name = i
			e.is_dir = Filesystem.is_directory("../" + i)
			r.add(e)
		return r

Config conf

class SourceFile
	string filename
	string object()
		return filename.replace(".cpp", ".o")
	string[] dep
	bool add_dep(string d)
		for dd in dep
			if dd == d
				return false
		dep.add(d)
		return true

SourceFile[] sources

string rel(string filename)
	return filename.substr(conf.root.num, -1)

string canonical(string filename)
	let p = filename.explode("/")
	for i in 0:p.num
		if p[i] == ".." and i > 0
			p.remove(i)
			p.remove(i-1)
			i -= 2
	return p.join("/")
			

void find_dep(SourceFile f, string filename)
	string s
	try
		s = Filesystem.read(filename)
	except
		return
	let lines = s.explode("\n")
	
	for l in lines
		int p = l.find("#include \"", 0)
		if p >= 0
			int q = l.find("\"", p + 11)
			string d = filename.dirname() + l.substr(p+10, q-p-10)
			d = canonical(d)
			if Filesystem.exists(d)
				if f.add_dep(d)
					#print("  " + rel(d))
					find_dep(f, d)

void parse_source(string filename)
	if conf.verbose
		print(rel(filename))
	SourceFile f
	f.filename = filename
	
	find_dep(f, filename)
	
	sources.add(f)

void parse_dir(string dir)
	let files = Filesystem.search(dir, "*.cpp", true)
	for f in files
		if f.is_dir
			parse_dir(dir + f.name + "/")
		else
			parse_source(dir + f.name)

use os
use hui


class Profile
	string name
	string[] libs_optional

# project
class Config
	Path root
	bool verbose
	bool dry_run
	
	string name
	string binary_file
	string main_file
	string[] libs
	string[] libs_optional
	string[] ignore_libs
	Profile[] profiles
	string language
	string optimization
	string build_type
	string flags_global
	string flags_compiler
	string flags_linker
	string[] icons
	string desktop_file
	string[] mime_files
	string[] installs
	
	void __init__()
		language = "c++17"
		optimization = "2"
		build_type = "debug"
		verbose = false
		dry_run = false
	
	bool ignored(string l)
		for ig in ignore_libs
			if l == ig
				return true
		return false
	
	void load()
		if not Filesystem.exists(conf.root << "xmake.conf")
			raise(new Exception("no xmake.conf found"))
		hui.Configuration c
		c.load(conf.root << "xmake.conf")
		for k in c.keys()
			if k in ["project", "project-name"]
				name = c[k]
			else if k in ["binary-name", "binary", "binary-file"]
				binary_file = c[k]
			else if k == "main-file"
				main_file = c[k]
			else if k == "language"
				language = c.get_str(k, "c++17")
			else if k == "flags"
				flags_global = c[k]
			else if k == "optimization"
				optimization = c.get_str(k, "2")
			else if k == "build-type"
				build_type = c.get_str(k, "debug")
			#else if k == "compiler-flags"
#				flags_compiler = c[k]
#			else if k == "linker-flags"
#				flags_linker = c[k]
			else if k == "libraries"
				libs = c[k].explode(",")
			else if k == "libraries-optional"
				libs_optional = c[k].explode(",")
			else if k == "icons"
				icons = c[k].explode(",")
			else if k == "desktop-file"
				desktop_file = c[k]
			else if k == "mime-files"
				mime_files = c[k].explode(",")
			else if k == "additional-install"
				installs = c[k].explode(",")
			else if k[:10] == "profile "
				Profile p
				p.name = k[8:]
				p.libs_optional = c[k].explode(",")
				profiles.add(p)
			else
				raise(new Exception("unknown tag: {{k}}"))
	void save()
		hui.Configuration c
		c["project"] = name
		c["binary"] = binary_file
		c["main-file"] = main_file
		c["language"] = language
		c["optimization"] = optimization
		c["build-type"] = build_type
		c["flags"] = flags_global
		c["libraries"] = libs.join(",")
		c["libraries-optional"] = libs_optional.join(",")
		for p in profiles
			c["profile-{{p.name}}"] = p.libs_optional.join(",")
		c["icons"] = icons.join(",")
		c["desktop-file"] = desktop_file
		c["mime-files"] = mime_files.join(",")
		c["additional-install"] = installs.join(",")
		c.save(conf.root << "xmake.conf")
	
	Path[] needs_installing()
		Path[] r
		let list = Filesystem.search(Path("../static"), "*.*", true)
		let ignore = mime_files
		ignore.add(desktop_file)
		for e in list
			if not (e in ignore)
				r.add("static/{{e}}")
		for i in installs
			r.add(i)
		return r

Config conf

class SourceFile
	Path filename
	Path object()
		return Path(str(filename).replace(".cpp", ".o"))
	Path[] dep
	bool add_dep(Path d)
		for dd in dep
			if dd == d
				return false
		dep.add(d)
		return true

SourceFile[] sources

Path rel(Path filename)
	return filename.relative_to(conf.root)


void find_dep(out SourceFile f, Path filename)
	string s
	try
		s = Filesystem.read(filename)
	except
		return
	let lines = s.explode("\n")
	
	for l in lines
		int p = l.find("#include \"", 0)
		if p >= 0
			int q = l.find("\"", p + 11)
			Path d = filename.parent() << l[p+10:q]
			d = d.canonical()
			if Filesystem.exists(d)
				if f.add_dep(d)
					#print("  " + rel(d))
					find_dep(f, d)

void parse_source(Path filename)
	if conf.verbose
		print(rel(filename))
	SourceFile f
	f.filename = filename
	
	find_dep(f, filename)
	
	sources.add(f)

void parse_dir(Path dir)
	let files = Filesystem.search(dir, "*.cpp", true)
	for f in files
		if Filesystem.is_directory(dir << f)
			parse_dir(dir << f)
		else
			parse_source(dir << f)

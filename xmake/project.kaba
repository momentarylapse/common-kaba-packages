use os

struct Profile
	var name: string
	var libs_optional: string[]

func any2sa(a: any) -> string[]
	if a.type == string
		return [str(a)]
	return [for s in a.as_array() str(s)]

func sa2any(a: string[]) -> any
	var r: any
	for s in a
		r.add(s)
	return r

# project
struct Config
	var root: Path
	var verbose = false
	var dry_run = false
	var force_all_libraries = false
	var force_rebuild = false
	var force_profile: string
	var force_threads = -1
	var force_build_dir: Path
	
	var name: string
	var binary_file: Path
	var source_dir: Path
	var main_file: string
	var libs: string[]
	var lib_groups: string[][]
	var libs_optional: string[]
	var ignore_libs: string[]
	var profiles: Profile[]
	var language = "c++17"
	var optimization = "2"
	var build_type = "debug"
	var flags_global: string
	var flags_compiler: string
	var flags_linker: string
	var icons: string[]
	var desktop_file: Path
	var mime_files: string[]
	var install_source: Path
	var installs_additional: string[]
	var outputs = ["make"]
	
	func ignored(l: string) -> bool
		return l in ignore_libs
	
	func mut load()
		if not fs.exists(conf.root | "xmake.conf")
			raise(new Exception("no xmake.conf found"))
		var c: os.Configuration
		c.load(conf.root | "xmake.conf")
		install_source = "static"
		for k in c.keys()
			if k in ["project.name"]
				name = str(c[k])
			else if k in ["build.source"]
				source_dir = str(c[k])
			else if k in ["build.binary"]
				binary_file = str(c[k])
			else if k == "build.main"
				main_file = str(c[k])
			else if k == "build.language"
				language = c.get_str(k, "c++17")
			else if k == "build.flags"
				flags_global = str(c[k])
			else if k == "build.optimization"
				optimization = c.get_str(k, "2")
			else if k == "build.type"
				build_type = c.get_str(k, "debug")
			#else if k == "compiler-flags"
#				flags_compiler = c[k]
#			else if k == "linker-flags"
#				flags_linker = c[k]
			else if k == "build.libraries"
				parse_libs(c[k], libs, lib_groups, libs_optional)
			#else if k == "build.libraries-optional"
			#	libs_optional = c[k].explode(",")
			else if k == "install.source"
				install_source = str(c[k])
			else if k == "install.icons"
				icons = any2sa(c[k])
			else if k == "install.desktop-file"
				desktop_file = str(c[k])
			else if k == "install.mime-files"
				mime_files = any2sa(c[k])
			else if k == "install.additional"
				installs_additional = any2sa(c[k])
			else if k[:14] == "build.profile-"
				var p: Profile
				p.name = k[14:]
				p.libs_optional = any2sa(c[k])
				profiles.add(p)
			else if k == "build.system"
				outputs = any2sa(c[k])
			else
				raise(new Exception("unknown tag: {{k}}"))
	func mut save()
		var c: os.Configuration
		c["project.name"] = name
		c["build.source"] = str(source_dir)
		c["build.binary"] = str(binary_file)
		c["build.main"] = str(main_file)
		c["build.language"] = language
		c["build.optimization"] = optimization
		c["build-type"] = build_type
		c["build.flags"] = flags_global
		c["build.libraries"] = sa2any(libs)
		c["build.libraries-optional"] = sa2any(libs_optional)
		for p in profiles
			c["profile-{{p.name}}"] = sa2any(p.libs_optional)
		c["install.source"] = str(install_source)
		c["install.icons"] = sa2any(icons)
		c["install.desktop-file"] = str(desktop_file)
		c["install.mime-files"] = sa2any(mime_files)
		c["install.additional"] = sa2any(installs_additional)
		c.save(conf.root | "xmake.conf")
	
	func needs_installing() -> Path[]
		var r: Path[]
		let list = fs.search(install_source, "*.*", "fd")
		var ignore = mime_files
		ignore.add(str(desktop_file))
		for e in list
			if not (str(install_source | e) in ignore)
				r.add(install_source | e)
		for i in installs_additional
			r.add(i)
		return r
		
	func has_explicit_default_profile() -> bool
		for p in conf.profiles
			if p.name == "default"
				return true
		return false
	
	func build_dir() -> Path
		if not force_build_dir.is_empty()
			return force_build_dir
		return root | "build"

var conf: Config

func parse_libs(s: any, out libs: string[], out lib_groups: string[][], out libs_opt: string[])
	for x in any2sa(s)
		if x[-1:] == "?"
			libs_opt.add(x[:-1])
		else
			lib_groups.add(x.explode("|"))
			libs.add(x.explode("|")[0])

struct SourceFile
	filename: Path
	dep: Path[]

	# makefile
	func object_old() -> Path
		return Path(str(filename).replace(".cpp", ".o"))

	func object() -> Path
		return conf.build_dir() | rel(Path(str(filename).replace(".cpp", ".o")))

	func mut add_dep(d: Path) -> bool
		if d in dep
			return false
		dep.add(d)
		return true

var sources: SourceFile[]

func rel(filename: Path) -> Path
	return filename.relative_to(conf.root)

func relsrc(filename: Path) -> Path
	return filename.relative_to(conf.root | conf.source_dir)


func find_dep(out f: SourceFile, filename: Path)
	var s: string
	try
		s = fs.read(filename)
	except
		return

	let lines = s.explode("\n")
	for l in lines
		let p = l.find("#include \"", 0)
		if p >= 0
			let q = l.find("\"", p + 11)
			var d = filename.parent() | l[p+10:q]
			d = d.canonical()
			if fs.exists(d)
				if f.add_dep(d)
				#	print("  <" + rel(d) + ">")
					find_dep(f, d)

func parse_dependencies()
	for f in sources
		f.dep.clear()
	for f in sources
		if conf.verbose
			print(rel(f.filename))
		find_dep(f, f.filename)

func find_sources(dir: Path)
	let files = fs.search(dir, "*.cpp", "fr")
	for f in files
		var s: SourceFile
		s.filename = dir | f
		sources.add(s)


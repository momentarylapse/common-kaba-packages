use os.Path
use os

struct Profile
	var name: string
	var libs_optional: string[]

func any2sa(a: any) -> string[]
	if a.type() == string
		return [str(a)]
	return [for s in a.as_list()! str(s)]

func any2pa(a: any) -> Path[]
	if a.type() == string
		return [str(a)]
	return [for s in a.as_list()! Path(str(s))]

func sa2any(a: string[]) -> any
	var r: any
	for s in a
		r.add(s)
	return r

func pa2any(a: Path[]) -> any
	var r: any
	for s in a
		r.add(str(s))
	return r

struct LibGroup
	var optional = false
	var libs: string[]

enum BuildType
	BINARY
	LIBRARY
	STATIC_LIBRARY
	SHARED_LIBRARY

struct BuildTarget
	var name: string
	var type = BuildType.BINARY
	var binary_file: Path
	var source: Path[]
	var source_exclude: Path[]
	var default = true
	var dependencies: LibGroup[]
	var include_directories: string[]
	var features: string[]
	var compiler_definitions: string[]
	func __init__()
	func is_library() -> bool
		return type != BuildType.BINARY


func extract_target_name(x: string) -> string
	for i in x[13:].find(".")
		return x[13:13+i]
	return ""

func find_targets(c: os.Configuration) -> string[]
	return c.keys()
		|> filter(x => x[:13] == "build.target:")
		|> extract_target_name
		|> unique


struct ProjectInfo
	var name: string
	var prefix: string
	var company: string
	var description: string
	var icon: Path

struct BuildInfo
	var systems = ["cmake"]
	var profiles: Profile[]
	var language = "c++17"
	var optimization = "2"
	var type = "debug"
	var flags_global: string
	var flags_compiler: string
	var flags_linker: string
	var features: string[]

struct InstallInfo
	var source: Path[]
	var icons: string[]
	var desktop_file: Path
	var mime_files: string[]

# project
struct Config
	var root: Path
	var verbose = false
	var dry_run = false
	var force_all_libraries = false
	var force_rebuild = false
	var force_profile: string
	var force_threads = -1
	var force_build_dir: Path
	var home_directory: Path
	var install_prefix: Path
	
	# project
	var project: ProjectInfo
	
	# build
	var build: BuildInfo
	var targets: BuildTarget[]
	
	# install
	var install: InstallInfo
	
	func ignored(l: string) -> bool
		return false
		#return l in ignore_libs
	
	func mut parse_targets(c: os.Configuration)
		
		var target_names = find_targets(c)
		if len(target_names) == 0
			raise(new Exception("no [build.target:...] found"))
		#print("targets: {{target_names}}")
		for n in target_names
			var t: BuildTarget
			t.name = n
			t.binary_file = n
			targets.add(t)

	func mut detect_environment()
		# FIXME...
		var x = os.fs.current_directory()
		let p = x.all_parents()
		if len(p) >= 2
			if p[len(p) - 2] == "/home"
				if len(p) >= 3
					home_directory = p[len(p) - 3]
				else
					home_directory = x
				install_prefix = home_directory | ".local"

	func mut load()
		if not os.fs.exists(conf.root | "xmake.conf")
			raise(new Exception("no xmake.conf found"))
		var c: os.Configuration
		c.load(conf.root | "xmake.conf")
		install.source = ["static/"]
		
		parse_targets(c)
		
		for k=>v in c.dict
			if k in ["project.name"]
				project.name = str(v)
			else if k in ["project.prefix"]
				project.prefix = str(v)
			else if k in ["project.company"]
				project.company = str(v)
			else if k in ["project.description"]
				project.description = str(v)
			else if k in ["project.icon"]
				project.icon = str(v)
			else if k == "build.language"
				build.language = str(v)
			else if k == "build.flags"
				build.flags_global = str(v)
			else if k == "build.optimization"
				build.optimization = str(v)
			else if k == "build.type"
				build.type = str(v)
			#else if k == "compiler-flags"
#				flags_compiler = c[k]
#			else if k == "linker-flags"
#				flags_linker = c[k]
			else if k == "build.system"
				build.systems = any2sa(v)
			else if k == "build.features"
				build.features = any2sa(v)
			else if k == "install.source"
				install.source = any2pa(v)
			else if k == "install.icons"
				install.icons = any2sa(v)
			else if k == "install.desktop-file"
				install.desktop_file = str(v)
			else if k == "install.mime-files"
				install.mime_files = any2sa(v)
			else if k[:14] == "build.profile-"
				var p: Profile
				p.name = k[14:]
				p.libs_optional = any2sa(v)
				build.profiles.add(p)
			else
				var found = false
				for mut t in targets
					let pre = "build.target:{{t.name}}"
					if k == "{{pre}}.binary"
						t.binary_file = str(v)
						found = true
					#else if k == "{{pre}}.source"
					#	t.exclusive_source.add(str(v))
					#	found = true
					else if k == "{{pre}}.default"
						t.default = bool(v)
						found = true
					else if k == "{{pre}}.type"
						if str(v) == "library"
							t.type = BuildType.LIBRARY
						else if str(v) == "static-library"
							t.type = BuildType.STATIC_LIBRARY
						else if str(v) == "shared-library"
							t.type = BuildType.SHARED_LIBRARY
						found = true
					else if k == "{{pre}}.source"
						t.source = any2pa(v)
						found = true
					else if k == "{{pre}}.source-exclude"
						t.source_exclude = any2pa(v)
						found = true
					else if k == "{{pre}}.binary"
						t.binary_file = str(v)
						found = true
					else if k == "{{pre}}.dependencies"
						t.dependencies = parse_libs(v)
						found = true
					else if k == "{{pre}}.include-directories"
						t.include_directories = any2sa(v)
						found = true
					else if k == "{{pre}}.features"
						t.features = any2sa(v)
						found = true
					else if k == "{{pre}}.definitions"
						t.compiler_definitions = any2sa(v)
						found = true
					##else if k == "build.main"
					##	targets[0].exclusive_source = [str(c[k])]
				if not found
					raise(new Exception("unknown tag: {{k}}"))
				

	func mut save()
		var c: os.Configuration
		c["project.name"] = project.name
	#	c["build.source"] = str(source_dir)
	#	c["build.binary"] = str(binary_file)
	#	if len(main_file) > 0
	#		c["build.main"] = main_file
		c["build.system"] = sa2any(build.systems)
		c["build.language"] = build.language
		c["build.optimization"] = build.optimization
		c["build.type"] = build.type
		c["build.flags"] = build.flags_global
		c["build.features"] = sa2any(build.features)
		for p in build.profiles
			c["profile-{{p.name}}"] = sa2any(p.libs_optional)
		
		for t in targets
			let pre = "build.target:{{t.name}}"
			if t.type == BuildType.LIBRARY
				c["{{pre}}.type"] = "library"
			else if t.type == BuildType.STATIC_LIBRARY
				c["{{pre}}.type"] = "static-library"
			else if t.type == BuildType.SHARED_LIBRARY
				c["{{pre}}.type"] = "shared-library"
			c["{{pre}}.binary"] = str(t.binary_file)
			c["{{pre}}.source"] = pa2any(t.source)
			c["{{pre}}.source-exclude"] = pa2any(t.source_exclude)
			c["{{pre}}.include-directories"] = sa2any(t.include_directories)
			c["{{pre}}.dependencies"] = encode_libs(t.dependencies)
			if not t.default
				c["{{pre}}.default"] = false
			
		c["install.source"] = pa2any(install.source)
		c["install.icons"] = sa2any(install.icons)
		c["install.desktop-file"] = str(install.desktop_file)
		c["install.mime-files"] = sa2any(install.mime_files)
		#c["install.additional"] = sa2any(installs_additional)
		c.save(conf.root | "xmake.conf")
	
	func needs_installing() -> Path[]
		var r: Path[]
		var ignore = install.mime_files
		ignore.add(str(install.desktop_file))
		
		for s in install.source
			if str(s)[-1:] == "*"
				let sdir = str(s)[:-1] as Path
				let list = os.fs.search(sdir, "*.*", "fd")
				for e in list
					if not (str(sdir | e) in ignore)
						r.add(sdir | e)
			else
				r.add(s)
		#for i in installs_additional
		#	r.add(i)
		return r
		
	func has_explicit_default_profile() -> bool
		for p in conf.build.profiles
			if p.name == "default"
				return true
		return false
	
	func build_dir() -> Path
		if not force_build_dir.is_empty()
			return force_build_dir
		return root | "build"
		
	func main_target() -> BuildTarget
		for t in targets
			if t.type == BuildType.BINARY and t.default
				return t
		for t in targets
			if t.default
				return t
		raise(new Exception("no main target found (executable and default)"))
		
	func _find_sources()
		#let dir = root | source_dir
		#let files = os.fs.search(dir, "*.cpp", "fr")
		#for f in files
		#	#if not test_source_dir.is_empty()
		#	#	if (source_dir|f) in test_source_dir
		#	#		continue
		#	var s: SourceFile
		#	s.filename = dir | f
		#	_sources.add(s)
		
		
#	func find_common_sources() -> Path[]
#		var exclusive: Path[]
#		for t in targets
#			let xx = find_exclusive_sources(t)
#			for x in xx
#				exclusive.add(x)
#		
#		
#		var r: Path[]
#		let dir = root | source_dir
#		let files = os.fs.search(dir, "*.cpp", "fr")
#		for f in files
#			if not ((dir | f) in exclusive)
#				r.add(dir | f)
#		return r
	
	func _find_sources(pattern: Path[]) -> Path[]
		var r: Path[]
		for x in pattern
			if os.fs.is_directory(root | x)
				let files = os.fs.search(root | x, "*.cpp", "fr")
				for f in files
					r.add(root | x | f)
			else if os.fs.exists(root | x)
				r.add(root | x)
		return r
	
	func find_sources(t: BuildTarget) -> Path[]
		var sources = _find_sources(t.source)
		var exclude = _find_sources(t.source_exclude)
		return sources |> filter(x => not (x in exclude))
	
	func dependencies() -> LibGroup[]
		var r: Ret
		for t in targets
			for d in t.dependencies
				if find_target(d.libs[0]) == nil
					r.add(d)
		return r
	
	func find_target(name: string) -> BuildTarget*
		for t in targets
			if t.name == name
				return &t
		return nil

var conf: Config

func parse_libs(s: any) -> LibGroup[]
	var r: LibGroup[]
	for x in any2sa(s)
		var g: LibGroup
		if x[-1:] == "?"
			g.optional = true
			g.libs = [x[:-1]]
			pass#r.add([true, [x[:-1]]])
		else
			g.libs = x.explode("|")
		r.add(g)
	return r

func encode_libs(lib_groups: LibGroup[]) -> any
	var a: any
	for g in lib_groups
		if g.optional
			a.add(g.libs.join("|") + "?")
		else
			a.add(g.libs.join("|"))
	return a

struct SourceFile
	filename: Path
	dep: Path[]

	# makefile
	func object_old() -> Path
		return Path(str(filename).replace(".cpp", ".o"))

	func object() -> Path
		return conf.build_dir() | rel(Path(str(filename).replace(".cpp", ".o")))

	func mut add_dep(d: Path) -> bool
		if d in dep
			return false
		dep.add(d)
		return true

var _sources: SourceFile[]

func rel(filename: Path) -> Path
	return filename.relative_to(conf.root)

#func relsrc(filename: Path) -> Path
#	return filename.relative_to(conf.root | conf.source_dir)


func find_dep(out f: SourceFile, filename: Path)
	var s: string
	try
		s = os.fs.read(filename)
	except
		return

	let lines = s.explode("\n")
	for l in lines
		for p in l.find("#include \"", 0)
			let q = l.find("\"", p + 11)
			var d = filename.parent() | l[p+10:q!]
			d = d.canonical()
			if os.fs.exists(d)
				if f.add_dep(d)
				#	print("  <" + rel(d) + ">")
					find_dep(f, d)

func parse_dependencies()
	for mut f in _sources
		f.dep.clear()
	for mut f in _sources
		if conf.verbose
			print(rel(f.filename))
		find_dep(f, f.filename)



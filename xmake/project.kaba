use os
use hui


class Term
	const RED = "\x1b[0;31m"
	const GREEN = "\x1b[0;32m"
	const YELLOW = "\x1b[0;33m"
	const BLUE = "\x1b[0;34m"
	const BLUE2 = "\x1b[0;36m"
	const VIOLET = "\x1b[0;35m"
	const BOLD = "\x1b[1m"
	const END = "\x1b[0m"


class Profile
	string name
	string[] libs_optional

# project
class Config
	Path root
	bool verbose = false
	bool dry_run = false
	bool force_all_libraries = false
	bool force_rebuild = false
	string force_profile
	
	string name
	string binary_file
	string main_file
	string[] libs
	string[] libs_optional
	string[] ignore_libs
	Profile[] profiles
	string language = "c++17"
	string optimization = "2"
	string build_type = "debug"
	string flags_global
	string flags_compiler
	string flags_linker
	string[] icons
	string desktop_file
	string[] mime_files
	string[] installs
	string[] outputs = ["make"]
	
	func ignored(l: string) -> bool
		for ig in ignore_libs
			if l == ig
				return true
		return false
	
	func load()
		if not Filesystem.exists(conf.root << "xmake.conf")
			raise(new Exception("no xmake.conf found"))
		hui.Configuration c
		c.load(conf.root << "xmake.conf")
		for k in c.keys()
			if k in ["project", "project-name"]
				name = c[k]
			else if k in ["binary-name", "binary", "binary-file"]
				binary_file = c[k]
			else if k == "main-file"
				main_file = c[k]
			else if k == "language"
				language = c.get_str(k, "c++17")
			else if k == "flags"
				flags_global = c[k]
			else if k == "optimization"
				optimization = c.get_str(k, "2")
			else if k == "build-type"
				build_type = c.get_str(k, "debug")
			#else if k == "compiler-flags"
#				flags_compiler = c[k]
#			else if k == "linker-flags"
#				flags_linker = c[k]
			else if k == "libraries"
				libs = c[k].explode(",")
			else if k == "libraries-optional"
				libs_optional = c[k].explode(",")
			else if k == "icons"
				icons = c[k].explode(",")
			else if k == "desktop-file"
				desktop_file = c[k]
			else if k == "mime-files"
				mime_files = c[k].explode(",")
			else if k == "additional-install"
				installs = c[k].explode(",")
			else if k[:8] == "profile-"
				Profile p
				p.name = k[8:]
				p.libs_optional = c[k].explode(",")
				profiles.add(p)
			else if k == "output"
				outputs = c[k].explode(",")
			else
				raise(new Exception("unknown tag: {{k}}"))
	func save()
		hui.Configuration c
		c["project"] = name
		c["binary"] = binary_file
		c["main-file"] = main_file
		c["language"] = language
		c["optimization"] = optimization
		c["build-type"] = build_type
		c["flags"] = flags_global
		c["libraries"] = libs.join(",")
		c["libraries-optional"] = libs_optional.join(",")
		for p in profiles
			c["profile-{{p.name}}"] = p.libs_optional.join(",")
		c["icons"] = icons.join(",")
		c["desktop-file"] = desktop_file
		c["mime-files"] = mime_files.join(",")
		c["additional-install"] = installs.join(",")
		c.save(conf.root << "xmake.conf")
	
	func needs_installing() -> Path[]
		Path[] r
		var list = Filesystem.search(Path("../static"), "*.*", "fd")
		var ignore = mime_files
		ignore.add(desktop_file)
		for e in list
			if not (str(e) in ignore)
				r.add(Path("static") << e)
		for i in installs
			r.add(i)
		return r
		
	func has_explicit_default_profile() -> bool
		for p in conf.profiles
			if p.name == "default"
				return true
		return false

Config conf

class SourceFile
	Path filename
	func const object() -> Path
		return Path(str(filename).replace(".cpp", ".o"))
	Path[] dep
	func add_dep(d: Path) -> bool
		if d in dep
			return false
		dep.add(d)
		return true

SourceFile[] sources

func rel(filename: Path) -> Path
	return filename.relative_to(conf.root)


func find_dep(out f: SourceFile, filename: Path)
	string s
	try
		s = Filesystem.read(filename)
	except
		return
	var lines = s.explode("\n")
	
	for l in lines
		int p = l.find("#include \"", 0)
		if p >= 0
			int q = l.find("\"", p + 11)
			Path d = filename.parent() << l[p+10:q]
			d = d.canonical()
			if Filesystem.exists(d)
				if f.add_dep(d)
				#	print("  <" + rel(d) + ">")
					find_dep(f, d)

func parse_source(filename: Path)
	if conf.verbose
		print(rel(filename))
	SourceFile f
	f.filename = filename
	
	find_dep(f, filename)
	
	sources.add(f)

func parse_dir(dir: Path)
	var files = Filesystem.search(dir, "*.cpp", "fr")
	for f in files
		parse_source(dir << f)

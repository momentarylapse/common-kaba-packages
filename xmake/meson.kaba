use os
use os.Path
use project.*
use library.*

#dep = compiler.find_library('ws2_32', required: true)

func create_meson()
	print("-- meson --")
	var f = os.fs.open(conf.root | "meson.build", "wt")
	var debug = str(conf.build_type == "debug")
	f << "project('{{conf.name}}', 'cpp', default_options : ['cpp_std={{conf.language}}', 'warning_level=1', 'optimization={{conf.optimization}}', 'debug={{debug}}'])"
	var opts = ["-Wno-unused", "-Wstrict-aliasing=0", "-fno-omit-frame-pointer"]
	var opt = [for o in opts "'{{o}}'"].join(", ")
	f << "add_project_arguments({{opt}}, language : ['cpp'])"
	f << "
#install_data
#meson.add_install_script('')
#install_subdir

cc = meson.get_compiler('cpp')

# mandatory dependencies
mdep = cc.find_library('m', required : false)
threaddep = dependency('threads')"

	var vars = ["mdep", "threaddep"]
	for g in conf.lib_groups
		if g.optional
			for l in g.libs
				f << "
# optional dependency: " + l
				var ll = lib.get(l)
				var mlibs = ll.meson_libs()
				var ltest: string
				var deps: string
				for i=>m in mlibs
					var v = "d"
					if len(mlibs) > 1
						v += str(i+1)
					f << v + " = cc.find_library('{{m}}', required : false)"
					if i > 0
						ltest += " and "
						deps += ","
					ltest += v + ".found()"
					deps += v
				f << "if {{ltest}}"
				f << "	add_project_arguments('-D{{ll.define()}}=1', language : ['cpp'])"
				f << "	deps += [{{deps}}]"
				f << "else"
				f << "	add_project_arguments('-D{{ll.define()}}=0', language : ['cpp'])"
				f << "endif"
		else
			for l in g.libs
				var ll = lib.get(l)
				var varx = l + "dep"
				vars.add(varx)
				f << varx + " = dependency('{{ll.meson_libs()[0]}}')"
				f << "add_project_arguments('-D{{ll.define()}}=1', language : ['cpp'])"
	f << "deps = " + str(vars).replace("\"", "")
	
	f << "

sources = ["
	for i=>s in sources
		var e: string
		if i < len(sources) - 1
			e = ","
		f << "	'{{rel(s.filename)}}'{{e}}"
	f << "]

"

	f << "executable('{{conf.targets[0].binary_file}}', sources, dependencies : deps, install : true)"
	
	f << ""
	
	var list = conf.needs_installing()
	for e in list
		if os.fs.is_directory(e)
			f << "install_subdir('{{e}}', install_dir : join_paths(get_option('datadir'), '{{conf.name}}'))"
		else
			f << "install_data('{{e}}', install_dir : join_paths(get_option('datadir'), '{{conf.name}}'))"
	
	if conf.desktop_file != ""
		f << "install_data('{{conf.desktop_file}}', install_dir : join_paths(get_option('datadir'), 'applications'))"



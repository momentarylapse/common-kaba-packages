use library
use project
use makefile
use visualstudio
use meson
use build
use cli_parser
use os


func blank(n: int) -> string
	return [for i in 0:n " "].join("")

func action_has(a: string[])
	lib.test(a[0])

func action_list(a: string[])
	for l in sorted(lib.libraries, "name")
		if l.test()
			print("{{l.name|14}} {{Term.GREEN}}found{{Term.END}}")
		else
			print("{{l.name|14}} {{Term.RED}}not found{{Term.END}}")

func action_init(a: string[])
	conf.save()

func action_update(a: string[])
	print("updating {{conf.root}}")
	
	conf.load()
	
	var missing = [for l in conf.libs l if !lib.test(l)]
	for l in conf.libs_optional
		if !conf.ignored(l)
			lib.test(l)
	if len(missing) > 0
		print("ERROR: necessary libraries missing: {{missing}}")
	
	parse_dir(conf.root)

	if not conf.dry_run
		if "make" in conf.outputs
			create_all_makefiles()
		if "meson" in conf.outputs
			create_meson()
		if "vs2019" in conf.outputs
			create_visual_studio(2019)

func action_build(a: string[])
	#print("building {{conf.root}}")
	conf.load()
	parse_dir(conf.root)
	build()

func action_clear(a: string[])
	#print("clearing {{conf.root}}")
	conf.load()
	parse_dir(conf.root)
	build_clear()


func main(arg: string[])
	lib.init()
	conf.verbose = false
	conf.root = Path("./").absolute()
	
	string[] command
	conf.ignore_libs
	
	#bool build
	
	CLIParser p
	p.opt(["-v", "--verbose"], "verbose output", lambda() conf.verbose = true)
	p.opt(["--dry"], "dry run", lambda() conf.dry_run = true)
	p.opta(["--ignore-lib"], "LIB", "", lambda(string o) conf.ignore_libs.add(o))
	p.opt(["--all"], "enable all libraries", lambda() conf.force_all_libraries = true)
	p.opt(["--rebuild"], "clear before build", lambda() conf.force_rebuild = true)
	p.opta(["--profile"], "PROFILE", "", lambda(string o) conf.force_profile = o)
	
	p.cmd("has", "<LIBRARY>", "check if available", action_has)
	p.cmd("list", "", "list available libs", action_list)
	p.cmd("init", "", "create new project", action_init)
	p.cmd("build", "", "build project", action_build)
	p.cmd("clear", "", "clear build files", action_clear)
	p.cmd("update", "", "update build files", action_update)
	p.run(arg)

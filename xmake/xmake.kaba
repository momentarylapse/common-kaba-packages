use library
use project
use makefile
use visualstudio
use meson
use cmake
use build
use os


func blank(n: int) -> string
	return [for i in 0:n " "].join("")

func action_has(a: string[])
	lib.test(a[0])

func action_list(a: string[])
	for l in sort(lib.libraries, "name")
		if l.test()
			print("{{l.name|14}} {{terminal.GREEN}}found{{terminal.END}}")
		else
			print("{{l.name|14}} {{terminal.RED}}not found{{terminal.END}}")

func action_init(a: string[])
	conf.save()

func action_update(a: string[])
	print("updating {{conf.root}}")
	
	conf.load()
	
	var missing = [for l in conf.libs l if !lib.test(l)]
	for l in conf.libs_optional
		if !conf.ignored(l)
			lib.test(l)
	if len(missing) > 0
		print("ERROR: necessary libraries missing: {{missing}}")
	
	find_sources(conf.root | conf.source_dir)

	if not conf.dry_run
		if "make" in conf.outputs
			create_all_makefiles()
		if "meson" in conf.outputs
			create_meson()
		if "vs2019" in conf.outputs
			create_visual_studio(2019)
		if "cmake" in conf.outputs
			create_cmake()

func action_build(a: string[])
	#print("building {{conf.root}}")
	conf.load()
	find_sources(conf.root)
	build()

func action_clear(a: string[])
	#print("clearing {{conf.root}}")
	conf.load()
	find_sources(conf.root)
	build_clear()


func action_vcpkg_install(a: string[])
	conf.load()
	
	var req: string[]
	
	for l in conf.libs
		req += lib.get(l).vcpkg
	for l in conf.libs_optional
		if !conf.ignored(l)
			req += lib.get(l).vcpkg
	req = sort(req, "")
	if len(req) == 0
		return

	var cmd = "vcpkg install"
	for r in req
		cmd += " {{r}}:x64-windows"
	print(cmd)

func main(arg: string[])
	lib.init()
	conf.verbose = false
	conf.root = Path("./").absolute().canonical()
	
	#conf.ignore_libs
	
	#bool build
	
	var p: CommandLineParser
	p.info("xmake", "the build tool for lazy people")
	p.option("-v/--verbose", "verbose output", func() conf.verbose = true)
	p.option("--dry", "dry run", func() conf.dry_run = true)
	p.option("--ignore-lib", "LIB", "", func(o: string) conf.ignore_libs.add(o))
	p.option("--all", "enable all libraries", func() conf.force_all_libraries = true)
	p.option("--rebuild", "clear before build", func() conf.force_rebuild = true)
	p.option("--profile", "PROFILE", "", func(o: string) conf.force_profile = o)
	p.option("-j/--threads", "THREADS", "number of build threads", func(o: string) conf.force_threads = int(o))
	p.option("--out", "BUILD_DIR", "", func(o: string) conf.force_build_dir = o)
	
	p.cmd("has", "LIBRARY", "check if available", action_has)
	p.cmd("list", "", "list available libs", action_list)
	p.cmd("init", "", "create new project", action_init)
	p.cmd("build", "", "build project", action_build)
	p.cmd("clear", "", "clear build files", action_clear)
	p.cmd("update", "", "update build files", action_update)
	p.cmd("vcpkg-install", "", "print vcpkg install command", action_vcpkg_install)
	#p.cmd("", "", "default: build", action_build)
	p.parse(arg)

use os
use project
use library

func create_all_makefiles()
	parse_dependencies()

	# fixed profiles
	for p in conf.profiles
		if p.name == "default"
			create_makefile(p, "")
		else
			create_makefile(p, "-{{p.name}}")
	
	# dynamic profile
	if conf.has_explicit_default_profile()
		return
	var p: Profile
	p.name = "default"
	for l in conf.libs_optional
		if (lib.has(l) or conf.force_all_libraries) and !conf.ignored(l)
			p.libs_optional.add(l)
	create_makefile(p, "")


func append(out a: string[], b: string[])
	for t in b
		a.add(t)

func collect_global_flags(p: Profile, out cflags: string, out lflags: string, out defines: string)
	var pkg: string[]
	for l in conf.libs
		if len(lib.pkg(l)) > 0
			append(pkg, lib.pkg(l))
		else
			cflags += " " + lib.compiler_flags(l)
			lflags += " " + lib.linker_flags(l)
		defines += " -D{{lib.define(l)}}=1"
	for l in conf.libs_optional
		if l in p.libs_optional
			if len(lib.pkg(l)) > 0
				append(pkg, lib.pkg(l))
			else
				cflags += " " + lib.compiler_flags(l)
				lflags += " " + lib.linker_flags(l)
			defines += " -D{{lib.define(l)}}=1"
		else
			defines += " -D{{lib.define(l)}}=0"
	if len(pkg) > 0
		cflags += " `pkg-config --cflags {{pkg.join(" ")}}`"
		lflags += " `pkg-config --cflags --libs {{pkg.join(" ")}}`"
	 defines += " -D'INSTALL_PREFIX=\"$(prefix)\"'"

func collect_objects(from: Path) -> string[]
	var obj: string[]
	for s in sources
		if rel(s.filename) != rel(conf.root << conf.main_file)
			obj.add(str(s.object().relative_to(from)))
	return obj

# clean line
func cl(s: string) -> string
	return s.replace("  ", " ").replace("  ", " ")

func create_makefile(p: Profile, postfix: string)

	raise(new Exception("Makefile deprecated!"))

	print("-- makefile {{p.name}} --")
	var f = new TextLinesFormatter(fs.open(conf.root << conf.source_dir << ("Makefile" + postfix), "wt"))
	f << "BIN = ../{{conf.binary_file}}"
	f << "CPP = g++"
	var cflags, lflags, defines: string
	collect_global_flags(p, cflags, lflags, defines)
	var x: string
	if conf.build_type == "debug"
		x = "-g"
	f << "prefix = /usr/local"
	f << cl("GLOBALFLAGS = {{conf.flags_global}} -O{{conf.optimization}} {{x}} -std={{conf.language}} {{defines}}")
	f << cl("CXXFLAGS = {{conf.flags_compiler}} {{cflags}} $(GLOBALFLAGS)")
	f << cl("CXXFLAGSLINKING = {{conf.flags_linker}} {{lflags}} $(GLOBALFLAGS)")
	f << ""
	var obj = collect_objects(conf.root << conf.source_dir)
	f << "OBJ = " + obj.join(" \\\n ")
	f << ""
	var main_ob = relsrc(conf.root << conf.main_file.replace(".cpp", ".o"))
	f << "$(BIN) : $(OBJ) {{main_ob}}"
	f << "\t$(CPP) $(OBJ) {{main_ob}} -o $(BIN) $(CXXFLAGSLINKING)"
	f << ""
	f << "all : $(BIN)"
	f << ""
	for s in sources
		var a = "{{relsrc(s.object())}} : {{relsrc(s.filename)}}"
		for d in s.dep
			a += " {{relsrc(d)}}"
		f << a
		f << "\t$(CPP) -c {{relsrc(s.filename)}} -o $@ $(CXXFLAGS)"
		f << ""

	# install
	f << "install :"
	var datadir = "$(prefix)/share/{{conf.name}}"
	f << "	mkdir -p {{datadir}}"
	if conf.desktop_file != ""
		f << "	xdg-desktop-menu install ../{{conf.desktop_file}}"
	for m in conf.mime_files
		f << "	xdg-mime install ../{{m}}"
	for icon,i in conf.icons
		var xx = icon.explode(":")
		var e: string
		if i < len(conf.icons) - 1
			e += " --noupdate"
		if len(xx) == 3
			f << "	xdg-icon-resource install --context mimetypes --size {{xx[1]}} ../{{xx[0]}} {{xx[2]}}{{e}}"
#	if conf.icon != ""
#		f << "	cp -f " + conf.icon + " " + datadir
	var list = conf.needs_installing()
	for e in list
		if fs.is_directory(conf.root << e)
			f << "	cp -ruf '../{{e}}' {{datadir}}"
		else
			f << "	cp -uf '../{{e}}' {{datadir}}"
	f << "	cp $(BIN) $(prefix)/bin"
	f << ""

	# clean
	f << "clean :"
	f << "\trm -f $(BIN)"
	f << "\tfind . -name \"*.o\" -exec rm -f {} \\;"
	f << "\tfind . -name \"*.a\" -exec rm -f {} \\;"
	f << ""

	del f

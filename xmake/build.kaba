use project.*
use makefile.*
use library.*
use os
use os.Path
use thread
use time




func is_completely_built(s: SourceFile) -> bool
	if not os.fs.exists(s.object())
		return false
	var ts = os.fs.mtime(s.filename)
	var to = os.fs.mtime(s.object())
	if to.time < ts.time
		return false
	for d in s.dep
		var td = os.fs.mtime(d)
		if to.time < td.time
			return false
	return true

func create_directory_recursive(dir: Path)
	if not os.fs.exists(dir)
		create_directory_recursive(dir.parent())
		try
			os.fs.create_directory(dir)
		except
			pass
#	let parents = sorted(dir.all_parents(), "-")
#	print(parents)
#	for p in parents
#		if not os.fs.exists(p)
#			print("    {{p}}")
#			os.fs.create_directory(p)

func compile(s: SourceFile, cxx_flags: string) -> bool
	create_directory_recursive(s.object().parent())
	var command = "g++ -c {{s.filename}} -o {{s.object()}} {{cxx_flags}}"
	if conf.verbose
		print(command)
	try
		var r = os.shell_execute(command)
	except Exception as e
		#print("ERROR:")
		#print(e)
		return false
	return true

class TX extends thread.Thread
	var s: SourceFile
	var cxx_flags: string
	func override on_run()
		#print("COMPILE  {{s.filename}}")
		compile(s, cxx_flags)
		#time.sleep(1)



func get_profile(name: string) -> Profile
	for p in conf.profiles
		if p.name == name
			return p
	var p: Profile
	p.name = "local"
	for g in conf.lib_groups
		if g.optional
			for l in g.libs
				if (lib.has(l) or conf.force_all_libraries) and !conf.ignored(l)
					p.libs_optional.add(l)
	return p

func build()
	if conf.force_rebuild
		build_clear()


	let p = get_profile(conf.force_profile)
	
	let binary_file = conf.build_dir() | conf.binary_file
			
	var cflags, lflags, defines: string
	collect_global_flags(p, cflags, lflags, defines)
	var x: string
	if conf.build_type == "debug"
		x = "-g"
	let global_flags = "{{conf.flags_global}} -O{{conf.optimization}} {{x}} -std={{conf.language}} {{defines}}"
	let cxx_flags = "{{conf.flags_compiler}} {{cflags}} {{global_flags}}"
	let cxx_flags_linking = "{{conf.flags_linker}} {{lflags}} {{global_flags}}"
	
	let needs_building = [for s in sources s if not is_completely_built(s)]
	#print("total {{len(sources)}}, build {{len(needs_building)}}")
	
	
	var num_threads = thread.get_num_cores()
	if conf.force_threads > 0
		num_threads = conf.force_threads
	
	if num_threads > 1

		var threads: owned![TX][]
		for i in 0:num_threads
			threads.add(new TX())
	
		for i=>s in needs_building
			var t: TX* = nil
			if i < num_threads
				#print("{{i}} -> direct")
				threads.add(new TX())
				t = weak(threads[len(threads)-1])
			else
				#print("{{i}} -> pool")
				while not t
					for tt in threads
						if tt.is_done()
							tt.join()
							# TODO allow multiple run()s
							tt = new TX()
							t = weak(tt)
							break
			print("{{i+1|3}}/{{len(needs_building)}} {{os.terminal.YELLOW}}{{rel(s.filename)}}{{os.terminal.END}}")
			for tt in t
				tt.s = s
				tt.cxx_flags = cxx_flags
				tt.run()
		
		for t in threads
			t.join()
	
#	for t in threads
#		t.run()
#	for t in threads
#		t.join()
	##CompilerPool cp
	#cp.run(100,1)
	#time.sleep(10)
	
	else
		for i=>s in needs_building
			print("{{i+1|3}}/{{len(needs_building)}} {{os.terminal.YELLOW}}{{rel(s.filename)}}{{os.terminal.END}}")
			if not compile(s, cxx_flags)
				return


	if len(needs_building) == 0 and os.fs.exists(binary_file)
		print("  up to date")
		return
			
	print("Link  {{os.terminal.YELLOW}}{{binary_file}}{{os.terminal.END}}")
	var main_file: SourceFile
	main_file.filename = conf.root | conf.main_file
	let main_ob = main_file.object() #conf.main_file.replace(".cpp", ".o")
	let obj = collect_objects(conf.root).join(" ")
	let command = "g++ {{obj}} {{main_ob}} -o {{binary_file}} {{cxx_flags_linking}}"
	if conf.verbose
		print(command)
	try
		var r = os.shell_execute(command)
	except Exception as e
		#print("ERROR:")
		#print(e)
		return



func build_clear()
	for s in sources
		try
			os.fs.delete(s.object())
			#print(s.object())
		except
			pass
	var binary_file = conf.binary_file
	try
		os.fs.delete(binary_file)
	except
		pass
	
	

use project.*
use os

func find_best_png_icon() -> os.Path
	if conf.project.icon.extension() == "png"
		return conf.project.icon
	let list = os.fs.search("static/icons/hicolor/64x64/apps", "*.png", "f")
	if len(list) == 0
		raise(new Exception("no suitable *.png icon found for MacOS app bundle"))
	return os.Path("static/icons/hicolor/64x64/apps") | list[0]
	


func create_macos_bundle() -> string

	os.fs.create_directory(conf.root | ".cmake")

	os.fs.write_text(conf.root | ".cmake/Info.plist", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>{{conf.project.name}}</string>
	<key>CFBundleGetInfoString</key>
	<string></string>
	<key>CFBundleIconFile</key>
	<string>{{conf.project.name}}.icns</string>
	<key>CFBundleIdentifier</key>
	<string>{{conf.project.company}}</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleLongVersionString</key>
	<string></string>
	<key>CFBundleName</key>
	<string>{{conf.project.name}}</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>0.1</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>0.1</string>
	<key>CSResourcesFileMapped</key>
	<true/>
	<key>NSHumanReadableCopyright</key>
	<string></string>
</dict>
</plist>
")


	var input = "${CMAKE_CURRENT_SOURCE_DIR}/{{find_best_png_icon()}}"
	var r = "


#=======================================================================================
#    MacOS bundle
#=======================================================================================

if (APPLE)
	add_custom_command(OUTPUT {{conf.project.name}}.icns
		COMMAND [ -e {{conf.project.name}}.iconset ] || mkdir {{conf.project.name}}.iconset
		COMMAND sips -z 16 16 {{input}} --out {{conf.project.name}}.iconset/icon_16x16.png
		COMMAND sips -z 32 32 {{input}} --out {{conf.project.name}}.iconset/icon_16x16@2x.png
		COMMAND sips -z 32 32 {{input}} --out {{conf.project.name}}.iconset/icon_32x32.png
		COMMAND sips -z 64 64 {{input}} --out {{conf.project.name}}.iconset/icon_32x32@2x.png
		COMMAND sips -z 128 128 {{input}} --out {{conf.project.name}}.iconset/icon_128x128.png
		COMMAND sips -z 256 256 {{input}} --out {{conf.project.name}}.iconset/icon_128x128@2x.png
		COMMAND sips -z 256 256 {{input}} --out {{conf.project.name}}.iconset/icon_256x256.png
		COMMAND sips -z 512 512 {{input}} --out {{conf.project.name}}.iconset/icon_256x256@2x.png
		COMMAND sips -z 512 512 {{input}} --out {{conf.project.name}}.iconset/icon_512x512.png
		COMMAND sips -z 1024 1024 {{input}} --out {{conf.project.name}}.iconset/icon_512x512@2x.png
		COMMAND iconutil -c icns {{conf.project.name}}.iconset
		DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/{{conf.project.icon}}\"
		VERBATIM)

	add_custom_target(bundle
		COMMAND [ -e {{conf.project.name}}.app ] || mkdir {{conf.project.name}}.app
		COMMAND [ -e {{conf.project.name}}.app/Contents ] || mkdir {{conf.project.name}}.app/Contents
		COMMAND [ -e {{conf.project.name}}.app/Contents/MacOS ] || mkdir {{conf.project.name}}.app/Contents/MacOS
		COMMAND cp -f {{conf.main_target().name}} {{conf.project.name}}.app/Contents/MacOS
		COMMAND [ -e {{conf.project.name}}.app/Contents/Resources ] || mkdir {{conf.project.name}}.app/Contents/Resources
		COMMAND cp -rf {{conf.project.name}}.icns {{conf.project.name}}.app/Contents/Resources"
	let list = conf.needs_installing()
	for e in list
		r += "
		COMMAND cp -rf \"${CMAKE_CURRENT_SOURCE_DIR}/{{e}}\" {{conf.project.name}}.app/Contents/Resources"
	r += "
		COMMAND cp -rf \"${CMAKE_CURRENT_SOURCE_DIR}/.cmake/Info.plist\" {{conf.project.name}}.app/Contents
		DEPENDS {{conf.project.name}} {{conf.project.name}}.icns
		VERBATIM)

endif()"
	return r

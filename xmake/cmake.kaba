use os
use project.*
use library.*
use vcpkg
use cmake_libraries.*
use cmake_install.*
use cmake_bundle.*
use cmake_visualstudio.*
use cmake_gitversion.*





func create_base() -> string
	let debug = conf.build.type == "debug"
	
	var r = "# created by xmake

cmake_minimum_required(VERSION 3.21)
project({{conf.project.name}})
set(CMAKE_CXX_STANDARD {{conf.build.language[3:]}})
set(CMAKE_CXX_STANDARD_REQUIRED True)"
	if debug
		r += "
set(CMAKE_BUILD_TYPE Debug)"
	
#	let common_sources = conf.find_common_sources()
#	let files = [for s in common_sources  str(rel(s))].join("\n\t")
#	r += "
#set(SOURCE_COMMON
#	{{files}}
#)"

#	if len(conf.include_directories) > 0
#		let dirs = conf.include_directories.join(" ")
#		r += "
#list(APPEND INCLUDE_DIRECTORIES {{dirs}})"
	return r





# TODO bundle with multi-targets...
func create_target(t: BuildTarget) -> string
	let xsources = conf.find_sources(t)
	let xfiles = [for s in xsources  str(rel(s))].join("\n\t")
	
	var deps = "${DEPS}"
	for d in t.dependencies
		if conf.find_target(d.libs[0])
			deps += " {{d.libs[0]}}"
	
	var r = "


#=======================================================================================
#    target {{t.name}}
#======================================================================================="

	var tflags = ""
	if "gui" in t.features
		tflags += " WIN32"

	if t.is_library
		r += "

add_library({{t.binary_file}}"
	else
		r += "

add_executable({{t.binary_file}}{{tflags}}"
	r += "
	{{xfiles}})
target_include_directories({{t.binary_file}} PUBLIC ${INCLUDE_DIRECTORIES})
target_link_directories({{t.binary_file}} PUBLIC ${LINK_DIRECTORIES})
target_compile_options({{t.binary_file}} PUBLIC ${COMPILE_OPTIONS})
target_compile_definitions({{t.binary_file}} PUBLIC ${COMPILE_DEFINITIONS} INSTALL_PREFIX=\"${CMAKE_INSTALL_PREFIX}\")
target_link_libraries({{t.binary_file}} PUBLIC {{deps}})"
	for i in t.include_directories
		r += "
target_include_directories({{t.binary_file}} PUBLIC {{i}})"
	
	if not t.default
		r += "
set_target_properties({{t.binary_file}} PROPERTIES EXCLUDE_FROM_ALL TRUE)"
	return r




func create()
	
	print("-- cmake --")
	 
	var r = create_base()
	
	r += create_libs()

	for t in conf.targets
		r += create_target(t)
	
	if "macosbundle" in conf.build.features
		r += create_macos_bundle()
	
	r += create_install_base()

	if conf.install.desktop_file != ""
		r += create_install_desktop()

#	if len(conf.icons) > 0
#		r += create_install_icons()

	if len(conf.install.mime_files) > 0
		r += create_install_mime()
		
	os.fs.write_text(conf.root | "CMakeLists.txt", r)
	

	if "gitversion" in conf.build.features
		create_git_version()
	
	if "vs2022" in conf.build.features
		create_vs2022_stuff()

	if "vcpkg" in conf.build.features
		vcpkg.create()



#find_program(XDG-MIME_EXECUTABLE xdg-mime)
#find_program(XDG-DESKTOP-MENU_EXECUTABLE xdg-desktop-menu)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} install --novendor basket.xml)
#execute_process(COMMAND ${XDG-DESKTOP-MENU_EXECUTABLE} install --novendor basket.desktop)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default basket.desktop "application/x-basket-item")

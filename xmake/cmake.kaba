use os
use project
use library

func create_cmake()
	
	print("-- cmake --")
	
	bool debug = conf.build_type == "debug"
	
	var f = Filesystem.create_text(conf.root << "CMakeLists.txt")
	f << "# created by xmake"
	f << "
project({{conf.name}})"
	f << "cmake_minimum_required(VERSION 3.22)"
	f << "set(CMAKE_CXX_STANDARD {{conf.language[3:]}})"
	f << "set(CMAKE_CXX_STANDARD_REQUIRED True)"
	if debug
		f << "set(CMAKE_BUILD_TYPE Debug)"
	
	f << "set(SOURCE "
	for s,i in sources
		f << "	{{rel(s.filename)}}"
	f << ")"
	
	f << "
find_package(PkgConfig REQUIRED)"
	
	
#	find_package(OpenGL REQUIRED)
#include_directories(${OpenGL_INCLUDE_DIRS})
#link_directories(${OpenGL_LIBRARY_DIRS})
#add_definitions(${OpenGL_DEFINITIONS})
#if(NOT OPENGL_FOUND)
#    message(ERROR " OPENGL not found!")
#endif(NOT OPENGL_FOUND)
#add_compile_definitions(HAS_LIB_GL=1)


	
	#var deps: string[]
	for l in conf.libs
		var ll = lib.get(l)
		var varx = l.upper()
		#deps.add("{{varx}}_LIBRARIES")
		if len(ll.pkg) > 0
			f << "
# {{l}} mandatory
pkg_check_modules({{varx}} REQUIRED {{ll.pkg[0]}})
include_directories(${"+varx+"_INCLUDE_DIRS})
link_directories(${"+varx+"_LIBRARY_DIRS})
list(APPEND DEPS ${"+varx+"_LIBRARIES})
add_definitions(${"+varx+"_CFLAGS_OTHER})
add_compile_definitions({{ll.define()}}=1)"
		else
			print("ERROR: no pkg for {{l}}")


	for l in conf.libs_optional
		var ll = lib.get(l)
		#deps.add("{{varx}}_LIBRARIES")
		if len(ll.pkg) > 0
			var varx = [for p in ll.pkg p.upper()]
			f << "
# {{l}} (optional)"
			for v,i in varx
				f << "pkg_check_modules({{v}} {{ll.pkg[i]}})"
			f << "if(" + ([for v in varx "{{v}}_FOUND"].join(" AND ")) + ")"
			for v,i in varx
				f << "	include_directories(${"+v+"_INCLUDE_DIRS})"
				f << "	link_directories(${"+v+"_LIBRARY_DIRS})"
				f << "	list(APPEND DEPS ${"+v+"_LIBRARIES})"
				f << "	add_definitions(${"+v+"_CFLAGS_OTHER})"
			f << "	add_compile_definitions({{ll.define()}}=1)
else()
	add_compile_definitions({{ll.define()}}=0)
endif()"
		else if len(ll.cmake) > 0
			var cn = ll.cmake[0]
			f << "
# {{l}} (optional)
find_package({{cn}})
if({{cn}}_FOUND)
	include_directories(${"+cn+"_INCLUDE_DIRS})
	link_directories(${"+cn+"_LIBRARY_DIRS})
	add_definitions(${"+cn+"_DEFINITIONS})
	list(APPEND DEPS ${"+cn+"_LIBRARIES})
	add_compile_definitions({{ll.define()}}=1)
else()
	add_compile_definitions({{ll.define()}}=0)
#endif()"
		else if l == "dl"
			f << "
# dl...
list(APPEND DEPS ${CMAKE_DL_LIBS})
add_compile_definitions({{ll.define()}}=1)"
		else
			f << "add_compile_definitions({{ll.define()}}=0)"
			print("WARNING: lib {{l}} not in cmake")

	
	f << "
add_executable({{conf.binary_file}} ${SOURCE})"
	
	f << "
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
target_link_libraries({{conf.binary_file}} PRIVATE Threads::Threads ${DEPS})"

	f << "
add_compile_definitions(INSTALL_PREFIX=\"${CMAKE_INSTALL_PREFIX}\")"


	f << "
install(TARGETS {{conf.binary_file}} DESTINATION bin)"
	var list = conf.needs_installing()
	for e in list
		if Filesystem.is_directory(conf.root << e)
			f << "install(DIRECTORY \"{{e}}\" DESTINATION share/{{conf.name}})"
		else
			f << "install(FILES \"{{e}}\" DESTINATION share/{{conf.name}})"


	if conf.desktop_file != ""
		f << "
set(INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")
configure_file(\"{{conf.desktop_file}}\" /tmp/{{conf.desktop_file.basename()}} NO_SOURCE_PERMISSIONS)

find_program(XDG_DESKTOP_MENU_EXECUTABLE xdg-desktop-menu)
if(NOT XDG_DESKTOP_MENU_EXECUTABLE STREQUAL \"XDG_DESKTOP_MENU_EXECUTABLE_NOTFOUND\")
	install(CODE \"message(STATUS \\\"installing desktop file\\\")\")
	install(CODE \"execute_process(COMMAND ${XDG_DESKTOP_MENU_EXECUTABLE} install /tmp/{{conf.desktop_file.basename()}})\")
endif()"
	if len(conf.mime_files) > 0
		f << "
find_program(XDG_MIME_EXECUTABLE xdg-mime)
if(NOT XDG_MIME_EXECUTABLE STREQUAL \"XDG_MIME_EXECUTABLE_NOTFOUND\")"
		for m in conf.mime_files
			f << "	install(CODE \"message(STATUS \\\"installing mime file\\\")\")
	install(CODE \"execute_process(COMMAND ${XDG_MIME_EXECUTABLE} install --novendor ${CMAKE_CURRENT_SOURCE_DIR}/{{m}})\")"
		f << "endif()"





#find_program(XDG-MIME_EXECUTABLE xdg-mime)
#find_program(XDG-DESKTOP-MENU_EXECUTABLE xdg-desktop-menu)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} install --novendor basket.xml)
#execute_process(COMMAND ${XDG-DESKTOP-MENU_EXECUTABLE} install --novendor basket.desktop)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default basket.desktop "application/x-basket-item")



use os
use project
use library


func cmake_link_mandatory_lib(l: string) -> string
	let ll = lib.get(l)
	let varx = l.upper()
	#deps.add("{{varx}}_LIBRARIES")
	if len(ll.pkg) > 0
		return "

# lib: {{l}} mandatory
pkg_check_modules({{varx}} REQUIRED {{ll.pkg[0]}})
include_directories(${"+varx+"_INCLUDE_DIRS})
link_directories(${"+varx+"_LIBRARY_DIRS})
list(APPEND DEPS ${"+varx+"_LIBRARIES})
add_definitions(${"+varx+"_CFLAGS_OTHER})
add_compile_definitions({{ll.define()}}=1)"
	else
		print("ERROR: no pkg for {{l}}")
		return ""


func cmake_link_mandatory_group(g: LibGroup) -> string
	let lls = [for l in g.libs  lib.get(l)]
	let varxs = [for l in g.libs  l.upper()]
	#deps.add("{{varx}}_LIBRARIES")
	let cvar = varxs.join("_OR_")
	let label = g.libs.join(" or ")
	var s = "

# lib: {{label}} (mandatory)
set({{cvar}} \"{{g.libs[0]}}\" CACHE STRING \"Use {{label}}?\")"

	for i=>v in varxs
		if len(lls[i].pkg) > 0
			s += "
pkg_check_modules({{v}} {{lls[i].pkg[0]}})
if({{v}}_FOUND)
	list(APPEND {{cvar}}_FOUND \"{{g.libs[i]}}\")
endif()"
	s += "
if({{cvar}}_FOUND)
	if(NOT ${GTK3_OR_GTK4} IN_LIST {{cvar}}_FOUND)
		list(GET {{cvar}}_FOUND 0 X)
		set({{cvar}} ${X} CACHE STRING \"choose\" FORCE)
		message(WARNING \"Choice for {{cvar}} invalid, using ${"+cvar+"} instead\")
	endif()
else()
	message(SEND_ERROR \"Neither {{label}} found\") #  or/nor..
	set({{cvar}} \"\")
endif()"
	
	for i=>v in varxs
		s += "
if({{cvar}} STREQUAL \"{{g.libs[i]}}\")"
		if len(lls[i].pkg) > 0
			s += "
	include_directories(${"+v+"_INCLUDE_DIRS})
	link_directories(${"+v+"_LIBRARY_DIRS})
	list(APPEND DEPS ${"+v+"_LIBRARIES})
	add_definitions(${"+v+"_CFLAGS_OTHER})
	add_compile_definitions({{lls[i].define()}}=1)"
		else
			print("ERROR: no pkg for {{lls[i]}}")
		s += "
endif()"
	return s

func cmake_link_optional_lib(l: string) -> string
	let ll = lib.get(l)
	#deps.add("{{varx}}_LIBRARIES")
	
	if len(ll.pkg) > 0
		# => pkg
		let varx = [for p in ll.pkg p.upper()]
		var r = "

# lib: {{l}} (optional)"
		for i=>v in varx
			r += "
pkg_check_modules({{v}} {{ll.pkg[i]}})"
		r += "
if(" + ([for v in varx "{{v}}_FOUND"].join(" AND ")) + ")"
		for i=>v in varx
			r += "
	include_directories(${"+v+"_INCLUDE_DIRS})
	link_directories(${"+v+"_LIBRARY_DIRS})
	list(APPEND DEPS ${"+v+"_LIBRARIES})
	add_definitions(${"+v+"_CFLAGS_OTHER})"
		r += "
	add_compile_definitions({{ll.define()}}=1)
else()
	add_compile_definitions({{ll.define()}}=0)
endif()"
		return r

	else if len(ll.cmake) > 0
		# => cmake
		let cn = ll.cmake[0]
		return "

# lib: {{l}} (optional)
find_package({{cn}})
if({{cn}}_FOUND)
	include_directories(${"+cn+"_INCLUDE_DIRS})
	link_directories(${"+cn+"_LIBRARY_DIRS})
	add_definitions(${"+cn+"_DEFINITIONS})
	list(APPEND DEPS ${"+cn+"_LIBRARIES})
	add_compile_definitions({{ll.define()}}=1)
else()
	add_compile_definitions({{ll.define()}}=0)
#endif()"

	else if l == "dl"
		return "

# lib: dl...
list(APPEND DEPS ${CMAKE_DL_LIBS})
add_compile_definitions({{ll.define()}}=1)"


	print("WARNING: lib {{l}} not in cmake")
	return "

add_compile_definitions({{ll.define()}}=0)"

func create_cmake()
	
	print("-- cmake --")
	
	var f = new TextLinesFormatter(fs.open(conf.root | "CMakeLists.txt", "wt"))
	f << create_cmake_base()
	
	f << create_cmake_libs()

	f << create_cmake_install()




#find_program(XDG-MIME_EXECUTABLE xdg-mime)
#find_program(XDG-DESKTOP-MENU_EXECUTABLE xdg-desktop-menu)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} install --novendor basket.xml)
#execute_process(COMMAND ${XDG-DESKTOP-MENU_EXECUTABLE} install --novendor basket.desktop)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default basket.desktop "application/x-basket-item")


func create_cmake_base() -> string
	let debug = conf.build_type == "debug"
	
	var r = "# created by xmake

cmake_minimum_required(VERSION 3.21)
project({{conf.name}})
set(CMAKE_CXX_STANDARD {{conf.language[3:]}})
set(CMAKE_CXX_STANDARD_REQUIRED True)"
	if debug
		r += "
set(CMAKE_BUILD_TYPE Debug)"
	
	let files = [for s in sources  str(rel(s.filename))].join("\n\t")
	r += "
set(SOURCE
	{{files}}
)

add_executable({{conf.binary_file}} ${SOURCE})
"
	return r



func create_cmake_libs() -> string
	var r = "
find_package(PkgConfig REQUIRED)
"
	
	
#	find_package(OpenGL REQUIRED)
#include_directories(${OpenGL_INCLUDE_DIRS})
#link_directories(${OpenGL_LIBRARY_DIRS})
#add_definitions(${OpenGL_DEFINITIONS})
#if(NOT OPENGL_FOUND)
#    message(ERROR " OPENGL not found!")
#endif(NOT OPENGL_FOUND)
#add_compile_definitions(HAS_LIB_GL=1)


	
	#var deps: string[]
	for g in conf.lib_groups
		if g.optional
			for l in g.libs
				r += cmake_link_optional_lib(l)
		else
			if len(g.libs) > 1
				r += cmake_link_mandatory_group(g)
			else
				r += cmake_link_mandatory_lib(g.libs[0])

	
	r += "

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
target_link_libraries({{conf.binary_file}} PRIVATE Threads::Threads ${DEPS})
"
	return r



func create_cmake_install() -> string
	var r = "

add_compile_definitions(INSTALL_PREFIX=\"${CMAKE_INSTALL_PREFIX}\")

install(TARGETS {{conf.binary_file}} DESTINATION bin)"
	let list = conf.needs_installing()
	for e in list
		if fs.is_directory(conf.root | e)
			r += "
install(DIRECTORY \"{{e}}\" DESTINATION share/{{conf.name}})"
		else
			r += "
install(FILES \"{{e}}\" DESTINATION share/{{conf.name}})"


	if conf.desktop_file != ""
		r += "

set(INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")
configure_file(\"{{conf.desktop_file}}\" /tmp/{{conf.desktop_file.basename()}} NO_SOURCE_PERMISSIONS)

find_program(XDG_DESKTOP_MENU_EXECUTABLE xdg-desktop-menu)
if(NOT XDG_DESKTOP_MENU_EXECUTABLE STREQUAL \"XDG_DESKTOP_MENU_EXECUTABLE_NOTFOUND\")
	install(CODE \"message(STATUS \\\"installing desktop file\\\")\")
	install(CODE \"execute_process(COMMAND ${XDG_DESKTOP_MENU_EXECUTABLE} install /tmp/{{conf.desktop_file.basename()}})\")
endif()"
	if len(conf.mime_files) > 0
		r += "

find_program(XDG_MIME_EXECUTABLE xdg-mime)
if(NOT XDG_MIME_EXECUTABLE STREQUAL \"XDG_MIME_EXECUTABLE_NOTFOUND\")"
		for m in conf.mime_files
			r += "
	install(CODE \"message(STATUS \\\"installing mime file\\\")\")
	install(CODE \"execute_process(COMMAND ${XDG_MIME_EXECUTABLE} install --novendor ${CMAKE_CURRENT_SOURCE_DIR}/{{m}})\")"
		r += "
endif()
"
	return r


use os
use project.*
use library.*
use vcpkg.*


func var_name(l: string) -> string
	return l.upper().replace("-", "").replace(".", "")

func cmake_link_mandatory_lib(l: string) -> string
	let ll = lib.get(l)
	let varx = var_name(l)
	#deps.add("{{varx}}_LIBRARIES")
	if len(ll.pkg) > 0
		return "

# lib: {{l}} mandatory
pkg_check_modules({{varx}} REQUIRED {{ll.pkg[0]}})
target_include_directories({{conf.binary_file}} PUBLIC ${"+varx+"_INCLUDE_DIRS})
target_link_directories({{conf.binary_file}} PUBLIC ${"+varx+"_LIBRARY_DIRS})
list(APPEND DEPS ${"+varx+"_LIBRARIES})
target_compile_options({{conf.binary_file}} PUBLIC ${"+varx+"_CFLAGS_OTHER})
target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=1)"
	else
		print("ERROR: no pkg for {{l}}")
		return ""


func cmake_link_mandatory_group(g: LibGroup) -> string
	let lls = [for l in g.libs  lib.get(l)]
	let varxs = g.libs |> var_name
	#deps.add("{{varx}}_LIBRARIES")
	let cvar = varxs.join("_OR_")
	let label = g.libs.join(" or ")
	var s = "

# lib: {{label}} (mandatory)
set({{cvar}} \"{{g.libs[0]}}\" CACHE STRING \"Use {{label}}?\")"

	for i=>v in varxs
		if len(lls[i].pkg) > 0
			s += "
pkg_check_modules({{v}} {{lls[i].pkg[0]}})
if({{v}}_FOUND)
	list(APPEND {{cvar}}_FOUND \"{{g.libs[i]}}\")
endif()"
	s += "
if({{cvar}}_FOUND)
	if(NOT ${GTK3_OR_GTK4} IN_LIST {{cvar}}_FOUND)
		list(GET {{cvar}}_FOUND 0 X)
		set({{cvar}} ${X} CACHE STRING \"choose\" FORCE)
		message(WARNING \"Choice for {{cvar}} invalid, using ${"+cvar+"} instead\")
	endif()
else()
	message(SEND_ERROR \"Neither {{label}} found\") #  or/nor..
	set({{cvar}} \"\")
endif()"
	
	for i=>v in varxs
		s += "
if({{cvar}} STREQUAL \"{{g.libs[i]}}\")"
		if len(lls[i].pkg) > 0
			s += "
	target_include_directories({{conf.binary_file}} PUBLIC ${"+v+"_INCLUDE_DIRS})
	target_link_directories({{conf.binary_file}} PUBLIC ${"+v+"_LIBRARY_DIRS})
	list(APPEND DEPS ${"+v+"_LIBRARIES})
	target_compile_options({{conf.binary_file}} PUBLIC ${"+v+"_CFLAGS_OTHER})
	target_compile_definitions({{conf.binary_file}} PUBLIC {{lls[i].define()}}=1)"
		else
			print("ERROR: no pkg for {{lls[i]}}")
		s += "
endif()"
	return s


func cmake_link_optional_lib(l: string) -> string
	let ll = lib.get(l)
	#deps.add("{{varx}}_LIBRARIES")
	
	let var_enabled = "LIB_{{var_name(l)}}_ENABLED"
	
	if len(ll.pkg) > 0
		# => pkg
		let varx = ll.pkg |> var_name
		var r = "

# lib: {{l}} (optional)
set({{var_enabled}} true CACHE BOOL \"Use {{l}} library?\")"
		for i=>v in varx
			r += "
pkg_check_modules({{v}} {{ll.pkg[i]}})"
		r += "
if(" + ([for v in varx "{{v}}_FOUND"].join(" AND ")) + ")"
		for i=>v in varx
			r += "
	target_include_directories({{conf.binary_file}} PUBLIC ${"+v+"_INCLUDE_DIRS})
	target_link_directories({{conf.binary_file}} PUBLIC ${"+v+"_LIBRARY_DIRS})
	list(APPEND DEPS ${"+v+"_LIBRARIES})
	target_compile_options({{conf.binary_file}} PUBLIC ${"+v+"_CFLAGS_OTHER})"
		r += "
else()
	set({{var_enabled}} false CACHE BOOL \"{{l}} library not found\" FORCE)
endif()
if(${"+var_enabled+"})
	target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=1)
else()
	target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=0)
endif()"
		return r

	else if len(ll.cmake) > 0
		# => cmake
		let cn = ll.cmake[0]
		return "

# lib: {{l}} (optional)
set({{var_enabled}} true CACHE BOOL \"Use {{l}} library?\")
find_package({{cn}})
if({{cn}}_FOUND)
	target_include_directories({{conf.binary_file}} PUBLIC ${"+cn+"_INCLUDE_DIRS})
	target_link_directories({{conf.binary_file}} PUBLIC ${"+cn+"_LIBRARY_DIRS})
	target_compile_definitions({{conf.binary_file}} PUBLIC ${"+cn+"_DEFINITIONS})
	list(APPEND DEPS ${"+cn+"_LIBRARIES})
else()
	set({{var_enabled}} false CACHE BOOL \"{{l}} library not found\" FORCE)
endif()
if(${"+var_enabled+"})
	target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=1)
else()
	target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=0)
#endif()"

	else if l == "dl"
		return "

# lib: dl...
if(WIN32)
	target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=0)
else()
	list(APPEND DEPS ${CMAKE_DL_LIBS})
	target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=1)
endif()"


	print("WARNING: lib {{l}} not in cmake")
	return "

target_compile_definitions({{conf.binary_file}} PUBLIC {{ll.define()}}=0)"

func create_cmake(with_vs2022: bool)
	
	print("-- cmake --")
	 
	var r = create_cmake_base()
	
	r += create_cmake_libs()
	
	r += create_cmake_install_base()

	if conf.desktop_file != ""
		r += create_cmake_install_desktop()

#	if len(conf.icons) > 0
#		r += create_cmake_install_icons()

	if len(conf.mime_files) > 0
		r += create_cmake_install_mime()
		
	os.fs.write_text(conf.root | "CMakeLists.txt", r)
	
	
	if not with_vs2022
		return
	
	os.fs.write_text(conf.root | "CMakePresets.json", "ï»¿{
	\"version\": 3,
	\"configurePresets\": [
		{
			\"name\": \"windows-base\",
			\"hidden\": true,
			\"generator\": \"Ninja\",
			\"binaryDir\": \"${sourceDir}/out/build/${presetName}\",
			\"installDir\": \"${sourceDir}/out/install/${presetName}\",
			\"toolchainFile\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",
			\"condition\": {
				\"type\": \"equals\",
				\"lhs\": \"${hostSystemName}\",
				\"rhs\": \"Windows\"
			}
		},
		{
			\"name\": \"x64-debug\",
			\"displayName\": \"x64 Debug\",
			\"inherits\": \"windows-base\",
			\"architecture\": {
				\"value\": \"x64\",
				\"strategy\": \"external\"
			},
			\"cacheVariables\": {
				\"CMAKE_BUILD_TYPE\": \"Debug\"
			}
		},
		{
			\"name\": \"x64-release\",
			\"displayName\": \"x64 Release\",
			\"inherits\": \"x64-debug\",
			\"cacheVariables\": {
				\"CMAKE_BUILD_TYPE\": \"Release\"
			}
		}
	]
}
".replace("\t", "    "))

	os.fs.create_directory(conf.root | ".vs")
	os.fs.write_text(conf.root | ".vs" | "launch.vs.json", "{
  \"version\": \"0.2.1\",
  \"defaults\": {},
  \"configurations\": [
    {
      \"type\": \"default\",
      \"project\": \"CMakeLists.txt\",
      \"projectTarget\": \"{{conf.binary_file}}.exe\",
      \"name\": \"{{conf.binary_file}}.exe\",
      \"currentDir\": \"${workspaceRoot}\"
    }
  ]
}
")

	create_vcpkg()



#find_program(XDG-MIME_EXECUTABLE xdg-mime)
#find_program(XDG-DESKTOP-MENU_EXECUTABLE xdg-desktop-menu)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} install --novendor basket.xml)
#execute_process(COMMAND ${XDG-DESKTOP-MENU_EXECUTABLE} install --novendor basket.desktop)
#execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default basket.desktop "application/x-basket-item")


func create_cmake_base() -> string
	let debug = conf.build_type == "debug"
	
	var r = "# created by xmake

cmake_minimum_required(VERSION 3.21)
project({{conf.name}})
set(CMAKE_CXX_STANDARD {{conf.language[3:]}})
set(CMAKE_CXX_STANDARD_REQUIRED True)"
	if debug
		r += "
set(CMAKE_BUILD_TYPE Debug)"
	
	let files = [for s in sources  str(rel(s.filename))].join("\n\t")
	r += "
set(SOURCE
	{{files}}
)

add_executable({{conf.binary_file}} ${SOURCE})"

	if len(conf.include_directories) > 0
		let dirs = conf.include_directories.join(" ")
		r += "
target_include_directories({{conf.binary_file}} PRIVATE {{dirs}})"
	return r



func create_cmake_libs() -> string
	var r = "

find_package(PkgConfig REQUIRED)
"

	for g in conf.lib_groups
		if g.optional
			for l in g.libs
				r += cmake_link_optional_lib(l)
		else
			if len(g.libs) > 1
				r += cmake_link_mandatory_group(g)
			else
				r += cmake_link_mandatory_lib(g.libs[0])

	
	r += "

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
list(APPEND DEPS Threads::Threads)

target_link_libraries({{conf.binary_file}} PRIVATE ${DEPS})"
	return r


func create_cmake_install_base() -> string
	var r = "

target_compile_definitions({{conf.binary_file}} PUBLIC INSTALL_PREFIX=\"${CMAKE_INSTALL_PREFIX}\")

install(TARGETS {{conf.binary_file}} DESTINATION bin)"
	let list = conf.needs_installing()
	for e in list
		if os.fs.is_directory(conf.root | e)
			r += "
install(DIRECTORY \"{{e}}\" DESTINATION share/{{conf.name}})"
		else
			r += "
install(FILES \"{{e}}\" DESTINATION share/{{conf.name}})"
	return r


func create_cmake_install_desktop() -> string
	return "

# install .desktop file
set(INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")
configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/{{conf.desktop_file}}\" /tmp/{{conf.desktop_file.basename()}} NO_SOURCE_PERMISSIONS)
install(FILES /tmp/{{conf.desktop_file.basename()}} DESTINATION share/applications)"


func create_cmake_install_icons() -> string
	var r = "

# install icons"
	for i in conf.icons
		let x = i.explode(":")
		if len(x) >= 3
			r += "
install(FILES {{x[0]}} DESTINATION share/icons/hicolor/{{x[1]}}x{{x[1]}}/apps RENAME {{x[2]}}.png)"
	return r


func create_cmake_install_mime() -> string
	var r = "

# install mime
find_program(XDG_MIME_EXECUTABLE xdg-mime)
if(NOT XDG_MIME_EXECUTABLE STREQUAL \"XDG_MIME_EXECUTABLE_NOTFOUND\")"
	for m in conf.mime_files
		r += "
	install(CODE \"message(STATUS \\\"installing mime file\\\")\")
	install(CODE \"execute_process(COMMAND ${XDG_MIME_EXECUTABLE} install --novendor ${CMAKE_CURRENT_SOURCE_DIR}/{{m}})\")"
	r += "
endif()
"
	return r

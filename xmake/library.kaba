use os
use hui
use project

class Library
	var name: string
	var libs: string[]
	var pkg: string[]
	var vcpkg: string[]
	var meson: string[]
	var cmake: string[]
	var includes: string[]
	var dir_override: string
	var flags: string
	#void __init__(string _name, string[] _libs)
	#	name = _name
	#	libs = _libs
	func test() -> bool
		for i in includes
			if not os.fs.exists(Path("/usr/include") << i)
				return false
		return true
	func compiler_flags() -> string
		if len(pkg) > 0
			return "`pkg-config --cflags --libs {{pkg.join(" ")}}`"
		if len(dir_override) > 0
			return "-I{{dir_override}}"
		return flags
	func linker_flags() -> string
		if len(pkg) > 0
			return "`pkg-config --cflags {{pkg.join(" ")}}`"
		var r = flags
		for l in libs
			if len(l) > 0
				r += " -l{{l}}"
		return r
	func meson_libs() -> string[]
		if len(meson) > 0
			return meson
		return libs
	func define() -> string
		return "HAS_LIB_{{name.upper()}}"


class LibraryManager
	var libraries: Library[]

	func mut init()
		var lib_dir = hui.app_directory << "apps/xmake/libs"
		var list = os.fs.search(lib_dir, "*.txt", "f")
		for e in list
			var c: os.Configuration
			c.load(lib_dir << e)
			var l: Library
			l.name = e.basename()[:-4]
			if len(c["link"]) > 0
				l.libs = any2sa(c["link"])
			if len(c["include"]) > 0
				l.includes = any2sa(c["include"])
			if len(c["pkg"]) > 0
				l.pkg = any2sa(c["pkg"])
			if len(c["meson"]) > 0
				l.meson = any2sa(c["meson"])
			if len(c["cmake"]) > 0
				l.cmake = any2sa(c["cmake"])
			if len(c["vcpkg"]) > 0
				l.vcpkg = any2sa(c["vcpkg"])
			if len(c["flags"]) > 0
				l.flags = str(c["flags"])
			l.dir_override = str(c["dir"])
			libraries.add(l)

	func get(name: string) -> Library*
		for l in libraries
			if l.name == name
				return &l
		raise(new Exception("unknown library: {{name}}"))
		return nil

	func has(name: string) -> bool
		return get(name).test()
	
	func test(name: string) -> bool
		if has(name)
			print("{{name|14}} {{terminal.GREEN}}found{{terminal.END}}")
			return true
		else
			print("{{name|14}} {{terminal.RED}}not found{{terminal.END}}")
		return false

	func compiler_flags(name: string) -> string
		return get(name).compiler_flags()

	func linker_flags(name: string) -> string
		return get(name).linker_flags()
	
	func define(name: string) -> string
		return get(name).define()
	
	func pkg(name: string) -> string[]
		return get(name).pkg
		
	func vs_might_have(name: string) -> bool
		return len(get(name).vcpkg) > 0

var lib: LibraryManager

use os
use os.Path
use hui
use project.*

struct Library
	var name: string
	var libs: string[]
	var pkg: string[]
	var vcpkg: string[]
	var meson: string[]
	var cmake_packages: string[]
	var cmake_components: string[]
	var cmake_targets: string[]
	var cmake_variable: string?
	var cmake_code: string#?  FIXME kaba bug
	var includes: string[]
	var dir_override: string
	var flags: string

	func test() -> bool
		for i in includes
			if not os.fs.exists(Path("/usr/include") | i)
				return false
		return true

	func compiler_flags() -> string
		if len(pkg) > 0
			return "`pkg-config --cflags --libs {{pkg.join(" ")}}`"
		if len(dir_override) > 0
			return "-I{{dir_override}}"
		return flags

	func linker_flags() -> string
		if len(pkg) > 0
			return "`pkg-config --cflags {{pkg.join(" ")}}`"
		var r = flags
		for l in libs
			if len(l) > 0
				r += " -l{{l}}"
		return r

	func meson_libs() -> string[]
		if len(meson) > 0
			return meson
		return libs

	func define() -> string
		return "HAS_LIB_{{name.upper()}}"


struct LibraryManager
	var libraries: Library[]

	func mut init()
		var lib_dir = hui.app_directory | "packages/xmake/libs"
		var list = os.fs.search(lib_dir, "*.txt", "f")
		for e in list
			libraries.add(load_lib(lib_dir | e))

	func load_lib(file: os.Path) -> Library
		var c: os.Configuration
		c.load(file)
		var l: Library
		l.name = file.basename_no_ext()
		if len(c["link"]) > 0
			l.libs = any2sa(c["link"])
		if len(c["include"]) > 0
			l.includes = any2sa(c["include"])
		if len(c["pkg"]) > 0
			l.pkg = any2sa(c["pkg"])
		if len(c["meson"]) > 0
			l.meson = any2sa(c["meson"])
		if len(c["cmake.package"]) > 0
			l.cmake_packages = any2sa(c["cmake.package"])
		if len(c["cmake.components"]) > 0
			l.cmake_components = any2sa(c["cmake.components"])
		if len(c["cmake.target"]) > 0
			l.cmake_targets = any2sa(c["cmake.target"])
		if len(c["cmake.variable"]) > 0
			l.cmake_variable = str(c["cmake.variable"])
		if len(c["cmake.code"]) > 0
			l.cmake_code = str(c["cmake"])
		if len(c["vcpkg"]) > 0
			l.vcpkg = any2sa(c["vcpkg"])
		if len(c["flags"]) > 0
			l.flags = str(c["flags"])
		l.dir_override = str(c["dir"])
		
		if len(l.cmake_packages) > 1 and len(l.cmake_components) > 0
			print("WARNING: lib {{file.basename_no_ext()}} has multiple packages and also components...")
		
		let code_file = file.parent() | (file.basename_no_ext() + ".cmakecode")
		if os.fs.exists(code_file)
			l.cmake_code = os.fs.read_text(code_file)
		return l

	func get(name: string) -> Library&
		for l in libraries
			if l.name == name
				return &l
		raise(new Exception("unknown library: {{name}}"))
		#return nil

	func has(name: string) -> bool
		return get(name).test()
	
	func test(name: string) -> bool
		if has(name)
			print("{{name|14}} {{os.terminal.GREEN}}found{{os.terminal.END}}")
			return true
		else
			print("{{name|14}} {{os.terminal.RED}}not found{{os.terminal.END}}")
		return false

	func compiler_flags(name: string) -> string
		return get(name).compiler_flags()

	func linker_flags(name: string) -> string
		return get(name).linker_flags()
	
	func define(name: string) -> string
		return get(name).define()
	
	func pkg(name: string) -> string[]
		return get(name).pkg
		
	func vs_might_have(name: string) -> bool
		return len(get(name).vcpkg) > 0

var lib: LibraryManager

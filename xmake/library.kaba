use os
use hui
use project

class Library
	string name
	string[] libs
	string[] pkg
	string[] meson
	string[] includes
	string dir_override
	string flags
	#void __init__(string _name, string[] _libs)
	#	name = _name
	#	libs = _libs
	func const test() -> bool
		for i in includes
			if not os.Filesystem.exists(Path("/usr/include") << i)
				return false
		return true
	func const compiler_flags() -> string
		if len(pkg) > 0
			return "`pkg-config --cflags --libs {{pkg.join(" ")}}`"
		if len(dir_override) > 0
			return "-I{{dir_override}}"
		return flags
	func const linker_flags() -> string
		if len(pkg) > 0
			return "`pkg-config --cflags {{pkg.join(" ")}}`"
		string r = flags
		for l in libs
			if len(l) > 0
				r += " -l{{l}}"
		return r
	func const meson_libs() -> string[]
		if len(meson) > 0
			return meson
		return libs
	func const define() -> string
		return "HAS_LIB_{{name.upper()}}"


class LibraryManager
	Library[] libraries

	func init()
		Path lib_dir = hui.app_directory << "apps/xmake/libs"
		var list = os.Filesystem.search(lib_dir, "*.txt", "f")
		for e in list
			hui.Configuration c
			c.load(lib_dir << e)
			Library l
			l.name = e.basename()[:-4]
			if len(c["link"]) > 0
				l.libs = c["link"].explode(",")
			if len(c["include"]) > 0
				l.includes = c["include"].explode(",")
			if len(c["pkg"]) > 0
				l.pkg = c["pkg"].explode(",")
			if len(c["meson"]) > 0
				l.meson = c["meson"].explode(",")
			if len(c["flags"]) > 0
				l.flags = c["flags"]
			l.dir_override = c["dir"]
			libraries.add(l)

	func const get(name: string) -> Library*
		for l in libraries
			if l.name == name
				return &l
		raise(new Exception("unknown library: {{name}}"))
		return nil

	func const has(name: string) -> bool
		return get(name).test()
	
	func const test(name: string) -> bool
		if has(name)
			print("{{name|14}} {{Term.GREEN}}found{{Term.END}}")
			return true
		else
			print("{{name|14}} {{Term.RED}}not found{{Term.END}}")
		return false

	func const compiler_flags(name: string) -> string
		return get(name).compiler_flags()

	func const linker_flags(name: string) -> string
		return get(name).linker_flags()
	
	func const define(name: string) -> string
		return get(name).define()
	
	func const pkg(name: string) -> string[]
		return get(name).pkg

LibraryManager lib

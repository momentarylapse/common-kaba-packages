enum
	TYPE_NUMBER
	TYPE_CONSTANT
	TYPE_VARIABLE
	TYPE_OPERATOR
	TYPE_FUNCTION
	TYPE_SPECIAL
	TYPE_LIST

enum
	CHAR_LETTER
	CHAR_NUMBER
	CHAR_SIGN
	CHAR_WHITESPACE

class Term
	int type
	string name
	Term*[] params
	void __init__(int _type, string _name)
		type = _type
		name = _name
	void __delete__()
		for p in params
			delete p
	Term* shallow_copy()
		Term* c = new Term(type, name)
		for p in params
			c.params.add(p)
		return c
	Term* copy()
		Term* c = new Term(type, name)
		for p in params
			c.params.add(p.copy())
		return c
	string str()
		string r = "?"
		if type == TYPE_OPERATOR
			string a = params[0].str()
			string b = params[1].str()
			if param_needs_paranthesis(0)
				a = "(" + a + ")"
			if param_needs_paranthesis(1)
				b = "(" + b + ")"
			if name == "*"
				r = a + " " + b
			else if name == "^"
				r = a + name + b
			else
				r = a + " " + name + " " + b
		else if type == TYPE_NUMBER
			return name
		else if type == TYPE_VARIABLE
			return name
		else if type == TYPE_FUNCTION
			return name + "(" + [for p in params p.str()].join(", ") + ")"
		else if type == TYPE_SPECIAL
			return "def " + params[0].str()
		else if type == TYPE_LIST
			return "[" + [for p in params p.str()].join(", ") + "]"
		return r
	bool param_needs_paranthesis(int p)
		if name == "^"
			return params[p].type == TYPE_OPERATOR
		if name == "/"
			if params[p].name == "^"
				return false
			return params[p].type == TYPE_OPERATOR
		if name == "-"
			if params[p].name == "*"
				return false
			return params[p].type == TYPE_OPERATOR
		if name == "*"
			return params[p].name in ["+", "-"]
		return false


Term*[] copy_list(Term*[] list)
	return [for t in list t.copy()]
		

Term *AddNumber(string s)
	return new Term(TYPE_NUMBER, s)

Term *AddVariable(string s)
	return new Term(TYPE_VARIABLE, s)

Term *AddOperator(string s, Term *p1, Term *p2)
	let t = new Term(TYPE_OPERATOR, s)
	t.params.add(p1)
	t.params.add(p2)
	return t

Term *AddFunction(string s, Term*[] params)
	let t = new Term(TYPE_FUNCTION, s)
	t.params = params
	return t

Term *PermuteOperator(Term *t)
	Term *r = t.copy()
	r.params[0] = t.params[1].copy()
	r.params[1] = t.params[0].copy()
	return r

Term *AddSpecial(string s, Term*[] params)
	let t = new Term(TYPE_SPECIAL, s)
	t.params = params
	return t

Term *AddList(Term*[] params)
	let t = new Term(TYPE_LIST, "-list-")
	t.params = params
	return t

# (a+b)+(c+d)
# 0 -> ~
# 1 -> (b + a) + (c + d)
# 2 -> (c + d) + .....
#Term *PermuteLiftOperator__(Term *t, int n)
#	Term *r = t.copy()
#	r.params[0] = t.params[1].copy()
#	r.params[1] = t.params[0].copy()
#	return r


class RuntimeError extends Exception

